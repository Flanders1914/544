{
  "problem": {
    "id": "324",
    "frontend_id": "324",
    "title": "Wiggle Sort II",
    "description": "Given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....\nYou may assume the input array always has a valid answer.\n \nExample 1:\n\nInput: nums = [1,5,1,1,6,4]\nOutput: [1,6,1,5,1,4]\nExplanation: [1,4,1,5,1,6] is also accepted.\n\nExample 2:\n\nInput: nums = [1,3,2,2,3,1]\nOutput: [2,3,1,3,1,2]\n\n \nConstraints:\n\n1 <= nums.length <= 5 * 104\n0 <= nums[i] <= 5000\nIt is guaranteed that there will be an answer for the given input nums.\n\n \nFollow Up: Can you do it in O(n) time and/or in-place with O(1) extra space?",
    "difficulty": "Medium",
    "examples": [
      "[1,5,1,1,6,4]",
      "[1,3,2,2,3,1]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[1,5,1,1,6,4]"
        },
        "expected": "[1,6,1,5,1,4]"
      },
      {
        "input": {
          "nums": "[1,3,2,2,3,1]"
        },
        "expected": "[2,3,1,3,1,2]"
      }
    ],
    "python_starter": "class Solution:\n    def wiggleSort(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        ",
    "hints": [],
    "meta_data": {
      "name": "wiggleSort",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "void"
      },
      "output": {
        "paramindex": 0
      },
      "manual": false
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def wiggleSort(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        # Step 1: Sort the array\n        nums.sort()\n        \n        # Step 2: Create a new array to hold the wiggle sorted elements\n        n = len(nums)\n        result = [0] * n\n        \n        # Step 3: Fill the result array with the largest and smallest elements\n        left, right = (n - 1) // 2, n - 1\n        for i in range(n):\n            if i % 2 == 0:  # even index\n                result[i] = nums[left]\n                left -= 1\n            else:  # odd index\n                result[i] = nums[right]\n                right -= 1\n        \n        # Step 4: Copy the result back to nums\n        for i in range(n):\n            nums[i] = result[i]",
    "explanation": "The solution begins by sorting the input array `nums`. This allows us to easily access the smallest and largest elements. We then create a new array `result` to hold the rearranged elements.\n\nWe use two pointers: `left` starts from the middle of the sorted array (for the smaller elements), and `right` starts from the end of the array (for the larger elements). We iterate through the indices of the `result` array, placing elements from the `left` pointer at even indices and elements from the `right` pointer at odd indices.\n\nFinally, we copy the rearranged elements back into the original `nums` array.\n\n### Time Complexity\n- The sorting step takes O(n log n).\n- The rearranging step takes O(n).\nThus, the overall time complexity is O(n log n).\n\n### Space Complexity\n- We use an additional array `result` of size O(n) for storing the rearranged elements, which gives us a space complexity of O(n). However, since we are modifying the input array in-place, we can consider the extra space used for the result array as acceptable for this problem.\n\nThis solution meets the requirements of the problem and efficiently produces the desired wiggle sort order."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:48"
}