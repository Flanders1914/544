{
  "problem": {
    "id": "57",
    "frontend_id": "57",
    "title": "Insert Interval",
    "description": "You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\nInsert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\nReturn intervals after the insertion.\nNote that you don't need to modify intervals in-place. You can make a new array and return it.\n \nExample 1:\n\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]\nOutput: [[1,5],[6,9]]\n\nExample 2:\n\nInput: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\nOutput: [[1,2],[3,10],[12,16]]\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n\n \nConstraints:\n\n0 <= intervals.length <= 104\nintervals[i].length == 2\n0 <= starti <= endi <= 105\nintervals is sorted by starti in ascending order.\nnewInterval.length == 2\n0 <= start <= end <= 105\n\n",
    "difficulty": "Medium",
    "examples": [
      "[[1,3],[6,9]]",
      "[2,5]",
      "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
      "[4,8]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "intervals": "[[1,3]",
          "newInterval": "[2,5]"
        },
        "expected": "[[1,5]"
      }
    ],
    "python_starter": "class Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        ",
    "hints": [
      "Intervals Array is sorted. Can you use Binary Search to find the correct position to insert the new Interval.?",
      "Can you try merging the overlapping intervals while inserting the new interval?",
      "This can be done by comparing the end of the last interval with the start of the new interval and vice versa."
    ],
    "meta_data": {
      "name": "insert",
      "params": [
        {
          "name": "intervals",
          "type": "integer[][]"
        },
        {
          "name": "newInterval",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer[][]"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        result = []\n        i = 0\n        n = len(intervals)\n\n        # Add all intervals that end before the new interval starts\n        while i < n and intervals[i][1] < newInterval[0]:\n            result.append(intervals[i])\n            i += 1\n\n        # Merge overlapping intervals\n        while i < n and intervals[i][0] <= newInterval[1]:\n            newInterval[0] = min(newInterval[0], intervals[i][0])\n            newInterval[1] = max(newInterval[1], intervals[i][1])\n            i += 1\n        \n        # Add the merged new interval\n        result.append(newInterval)\n\n        # Add the remaining intervals\n        while i < n:\n            result.append(intervals[i])\n            i += 1\n\n        return result",
    "explanation": "The provided solution efficiently handles the insertion of a new interval into a sorted list of non-overlapping intervals. \n\n1. **Time Complexity**: The algorithm runs in O(n) time, where n is the number of intervals. This is because we may need to traverse the entire list of intervals in the worst case.\n2. **Space Complexity**: The space complexity is O(n) in the worst case, as we may need to store all intervals in the result list if there are no overlaps.\n\nThe algorithm works by first adding all intervals that do not overlap with the new interval, then merging any overlapping intervals, and finally adding any remaining intervals. This ensures that the final list of intervals is both sorted and non-overlapping, as required by the problem statement."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpnwe_zfxo.py\", line 64\n    input_0_0 = [[1,3]\n                 ^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n"
  },
  "timestamp": "2025-04-01 18:00:30"
}