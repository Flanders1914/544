{
  "problem": {
    "id": "173",
    "frontend_id": "173",
    "title": "Binary Search Tree Iterator",
    "description": "Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\n\nBSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\nboolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\nint next() Moves the pointer to the right, then returns the number at the pointer.\n\nNotice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\nYou may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.\n \nExample 1:\n\n\nInput\n[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\nOutput\n[null, 3, 7, true, 9, true, 15, true, 20, false]\n\nExplanation\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // return 3\nbSTIterator.next();    // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 20\nbSTIterator.hasNext(); // return False\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [1, 105].\n0 <= Node.val <= 106\nAt most 105 calls will be made to hasNext, and next.\n\n \nFollow up:\n\nCould you implement next() and hasNext() to run in average O(1) time and use O(h) memory, where h is the height of the tree?\n\n",
    "difficulty": "Medium",
    "examples": [
      "[\"BSTIterator\",\"next\",\"next\",\"hasNext\",\"next\",\"hasNext\",\"next\",\"hasNext\",\"next\",\"hasNext\"]",
      "[[[7,3,15,null,null,9,20]],[],[],[],[],[],[],[],[],[]]"
    ],
    "structured_test_cases": [],
    "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator:\n\n    def __init__(self, root: Optional[TreeNode]):\n        \n\n    def next(self) -> int:\n        \n\n    def hasNext(self) -> bool:\n        \n\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()",
    "hints": [],
    "meta_data": {
      "classname": "BSTIterator",
      "maxbytesperline": 200000,
      "constructor": {
        "params": [
          {
            "type": "TreeNode",
            "name": "root"
          }
        ]
      },
      "methods": [
        {
          "params": [],
          "name": "next",
          "return": {
            "type": "integer"
          }
        },
        {
          "params": [],
          "name": "hasNext",
          "return": {
            "type": "boolean"
          }
        }
      ],
      "systemdesign": true,
      "params": [
        {
          "name": "inputs",
          "type": "integer[]"
        },
        {
          "name": "inputs",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer[]",
        "dealloc": true
      },
      "manual": false
    }
  },
  "solution": {
    "code": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass BSTIterator:\n\n    def __init__(self, root: Optional[TreeNode]):\n        self.stack = []\n        self._push_left(root)\n\n    def _push_left(self, node):\n        while node:\n            self.stack.append(node)\n            node = node.left\n\n    def next(self) -> int:\n        # Pop the top element from the stack\n        node = self.stack.pop()\n        # Push all the left children of the right child of the popped node\n        self._push_left(node.right)\n        return node.val\n\n    def hasNext(self) -> bool:\n        # If the stack is not empty, there are more elements to visit\n        return len(self.stack) > 0\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()",
    "explanation": "The `BSTIterator` class is designed to iterate over a binary search tree (BST) in in-order fashion. \n\n1. **Initialization**: The constructor initializes an empty stack and calls the helper method `_push_left()` to push all the left children of the root onto the stack. This ensures that the smallest element is accessible first.\n\n2. **Next Method**: The `next()` method retrieves the next smallest element:\n   - It pops the top node from the stack, which is the next smallest element.\n   - It then calls `_push_left()` on the right child of the popped node to ensure that all left children of the right subtree are added to the stack for future calls.\n\n3. **HasNext Method**: The `hasNext()` method checks if there are any nodes left in the stack. If the stack is not empty, it returns `True`, indicating that there are more elements to iterate over.\n\n**Time Complexity**:\n- `next()`: O(1) on average, since we are only popping from the stack and pushing left children.\n- `hasNext()`: O(1), as it only checks the length of the stack.\n\n**Space Complexity**: O(h), where h is the height of the tree, due to the stack storing nodes.\n\nThis implementation efficiently supports the required operations while adhering to the constraints provided in the problem statement."
  },
  "test_result": {
    "success": true,
    "output": "\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:40"
}