{
  "problem": {
    "id": "592",
    "frontend_id": "592",
    "title": "Fraction Addition and Subtraction",
    "description": "Given a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format.\nThe final result should be an irreducible fraction. If your final result is an integer, change it to the format of a fraction that has a denominator 1. So in this case, 2 should be converted to 2/1.\n \nExample 1:\n\nInput: expression = \"-1/2+1/2\"\nOutput: \"0/1\"\n\nExample 2:\n\nInput: expression = \"-1/2+1/2+1/3\"\nOutput: \"1/3\"\n\nExample 3:\n\nInput: expression = \"1/3-1/2\"\nOutput: \"-1/6\"\n\n \nConstraints:\n\nThe input string only contains '0' to '9', '/', '+' and '-'. So does the output.\nEach fraction (input and output) has the format ±numerator/denominator. If the first input fraction or the output is positive, then '+' will be omitted.\nThe input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range [1, 10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.\nThe number of given fractions will be in the range [1, 10].\nThe numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.\n\n",
    "difficulty": "Medium",
    "examples": [
      "\"-1/2+1/2\"",
      "\"-1/2+1/2+1/3\"",
      "\"1/3-1/2\""
    ],
    "structured_test_cases": [
      {
        "input": {
          "expression": "\"-1/2+1/2\""
        },
        "expected": "0/1"
      }
    ],
    "python_starter": "class Solution:\n    def fractionAddition(self, expression: str) -> str:\n        ",
    "hints": [],
    "meta_data": {
      "name": "fractionAddition",
      "params": [
        {
          "name": "expression",
          "type": "string"
        }
      ],
      "return": {
        "type": "string"
      }
    }
  },
  "solution": {
    "code": "from math import gcd\nfrom functools import reduce\n\nclass Solution:\n    def fractionAddition(self, expression: str) -> str:\n        # Helper function to find the least common multiple\n        def lcm(a, b):\n            return a * b // gcd(a, b)\n\n        # Initialize variables\n        numerator = 0\n        denominator = 1\n        i = 0\n        n = len(expression)\n\n        # Parse the expression\n        while i < n:\n            # Find the sign\n            sign = 1\n            if expression[i] == '-':\n                sign = -1\n                i += 1\n            elif expression[i] == '+':\n                i += 1\n            \n            # Read the numerator\n            num_start = i\n            while i < n and expression[i] != '/':\n                i += 1\n            numerator_part = int(expression[num_start:i])\n            \n            # Read the denominator\n            i += 1  # skip '/'\n            denom_start = i\n            while i < n and (expression[i].isdigit()):\n                i += 1\n            denominator_part = int(expression[denom_start:i])\n            \n            # Update the total fraction\n            current_denominator = lcm(denominator, denominator_part)\n            numerator = numerator * (current_denominator // denominator) + sign * numerator_part * (current_denominator // denominator_part)\n            denominator = current_denominator\n\n        # Reduce the fraction\n        if numerator == 0:\n            return \"0/1\"\n        \n        common_divisor = gcd(abs(numerator), denominator)\n        numerator //= common_divisor\n        denominator //= common_divisor\n        \n        return f\"{numerator}/{denominator}\"",
    "explanation": "The solution begins by defining a helper function `lcm` to compute the least common multiple of two numbers, which is essential for finding a common denominator for the fractions. \n\nWe initialize `numerator` and `denominator` to represent the cumulative result of the fractions. We then iterate through the input string `expression`, parsing each fraction and its sign. For each fraction, we extract the numerator and denominator, convert them to a common denominator using the LCM, and update the cumulative `numerator`.\n\nAfter processing all fractions, we check if the cumulative `numerator` is zero, in which case we return \"0/1\". If not, we reduce the fraction by dividing both the numerator and denominator by their greatest common divisor (GCD).\n\nThe time complexity of this solution is O(n), where n is the length of the input string, as we traverse the string once. The space complexity is O(1) since we are using a fixed amount of space for variables regardless of the input size."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:01:27"
}