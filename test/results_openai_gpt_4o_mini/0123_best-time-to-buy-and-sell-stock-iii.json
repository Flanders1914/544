{
  "problem": {
    "id": "123",
    "frontend_id": "123",
    "title": "Best Time to Buy and Sell Stock III",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\nFind the maximum profit you can achieve. You may complete at most two transactions.\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n \nExample 1:\n\nInput: prices = [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\nExample 2:\n\nInput: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n\nExample 3:\n\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n\n \nConstraints:\n\n1 <= prices.length <= 105\n0 <= prices[i] <= 105\n\n",
    "difficulty": "Hard",
    "examples": [
      "[3,3,5,0,0,3,1,4]",
      "[1,2,3,4,5]",
      "[7,6,4,3,1]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "prices": "[3,3,5,0,0,3,1,4]"
        },
        "expected": "6"
      },
      {
        "input": {
          "prices": "[1,2,3,4,5]"
        },
        "expected": "4"
      },
      {
        "input": {
          "prices": "[7,6,4,3,1]"
        },
        "expected": "0"
      }
    ],
    "python_starter": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "maxProfit",
      "params": [
        {
          "name": "prices",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        # Initialize variables for the two transactions\n        first_buy = float('inf')\n        first_sell = 0\n        second_buy = float('inf')\n        second_sell = 0\n        \n        for price in prices:\n            # Update the first buy and sell\n            first_buy = min(first_buy, price)\n            first_sell = max(first_sell, price - first_buy)\n            # Update the second buy and sell\n            second_buy = min(second_buy, first_sell - price)\n            second_sell = max(second_sell, price + second_buy)\n        \n        return second_sell",
    "explanation": "The provided solution uses a dynamic programming approach to track the maximum profit from at most two transactions. \n\n1. **Initialization**:\n   - `first_buy` is initialized to infinity to ensure that any price will be lower.\n   - `first_sell` starts at 0 since no profit is made before any transactions.\n   - `second_buy` is also initialized to infinity, and `second_sell` starts at 0.\n\n2. **Iterating through prices**:\n   - For each price in the list, we update our buy and sell states:\n     - `first_buy` is updated to the minimum of its current value and the current price, ensuring we always have the lowest price to buy for the first transaction.\n     - `first_sell` is updated to the maximum profit we can achieve after selling the stock for the first time.\n     - `second_buy` is updated based on the profit from the first sell minus the current price, allowing us to track the best price to buy for the second transaction.\n     - `second_sell` is updated to reflect the maximum profit after the second sell.\n\n3. **Final Output**:\n   - The function returns `second_sell`, which contains the maximum profit achievable with at most two transactions.\n\n**Time Complexity**: O(n), where n is the number of days (length of the prices array).  \n**Space Complexity**: O(1), as we are using a constant amount of space for the variables."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:36"
}