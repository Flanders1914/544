{
  "problem": {
    "id": "37",
    "frontend_id": "37",
    "title": "Sudoku Solver",
    "description": "Write a program to solve a Sudoku puzzle by filling the empty cells.\nA sudoku solution must satisfy all of the following rules:\n\nEach of the digits 1-9 must occur exactly once in each row.\nEach of the digits 1-9 must occur exactly once in each column.\nEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n\nThe '.' character indicates empty cells.\n \nExample 1:\n\n\nInput: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\nExplanation: The input board is shown above and the only valid solution is shown below:\n\n\n\n \nConstraints:\n\nboard.length == 9\nboard[i].length == 9\nboard[i][j] is a digit or '.'.\nIt is guaranteed that the input board has only one solution.\n\n",
    "difficulty": "Hard",
    "examples": [
      "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "board": "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]"
        },
        "expected": "[[5,3,4,6,7,8,9,1,2]"
      }
    ],
    "python_starter": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        ",
    "hints": [],
    "meta_data": {
      "name": "solveSudoku",
      "params": [
        {
          "name": "board",
          "type": "character[][]"
        }
      ],
      "return": {
        "type": "void"
      },
      "output": {
        "paramindex": 0
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        def is_valid(board, row, col, num):\n            # Check if num is not in the current row\n            for x in range(9):\n                if board[row][x] == num:\n                    return False\n            # Check if num is not in the current column\n            for x in range(9):\n                if board[x][col] == num:\n                    return False\n            # Check if num is not in the current 3x3 box\n            start_row, start_col = 3 * (row // 3), 3 * (col // 3)\n            for i in range(3):\n                for j in range(3):\n                    if board[start_row + i][start_col + j] == num:\n                        return False\n            return True\n\n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for num in '123456789':\n                            if is_valid(board, i, j, num):\n                                board[i][j] = num  # Place the number\n                                if solve(board):  # Recur\n                                    return True\n                                board[i][j] = '.'  # Backtrack\n                        return False  # Trigger backtracking\n            return True  # Solved\n\n        solve(board)",
    "explanation": "The provided solution uses a backtracking approach to solve the Sudoku puzzle. The `solveSudoku` method modifies the input `board` in place. \n\n1. **is_valid Function**: This helper function checks if placing a number in a specific cell is valid according to Sudoku rules. It checks the row, column, and the corresponding 3x3 sub-box for the presence of the number.\n\n2. **solve Function**: This recursive function attempts to fill the board. It iterates through each cell, looking for an empty cell ('.'). For each empty cell, it tries placing numbers from '1' to '9'. If a number is valid, it places the number and recursively calls itself to continue solving. If it finds a solution, it returns `True`. If it cannot place any number, it backtracks by resetting the cell to '.' and trying the next number.\n\n3. **Time Complexity**: The worst-case time complexity is O(9^(n*n)), where n is the size of the board (9 for a standard Sudoku). This is because, in the worst case, we may have to try all numbers for each empty cell.\n\n4. **Space Complexity**: The space complexity is O(n^2) for the recursion stack, where n is the size of the board (9). However, since we are modifying the board in place, the additional space used is minimal.\n\nOverall, this solution efficiently solves the Sudoku puzzle by exploring all possible configurations through backtracking."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmp3iosi6cm.py\", line 74\n    input_0_0 = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n"
  },
  "timestamp": "2025-04-01 18:00:28"
}