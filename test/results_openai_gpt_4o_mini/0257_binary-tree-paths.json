{
  "problem": {
    "id": "257",
    "frontend_id": "257",
    "title": "Binary Tree Paths",
    "description": "Given the root of a binary tree, return all root-to-leaf paths in any order.\nA leaf is a node with no children.\n \nExample 1:\n\n\nInput: root = [1,2,3,null,5]\nOutput: [\"1->2->5\",\"1->3\"]\n\nExample 2:\n\nInput: root = [1]\nOutput: [\"1\"]\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [1, 100].\n-100 <= Node.val <= 100\n\n",
    "difficulty": "Easy",
    "examples": [
      "[1,2,3,null,5]",
      "[1]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "root": "[1,2,3,null,5]"
        },
        "expected": "[1->2->5,1->3]"
      }
    ],
    "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "binaryTreePaths",
      "params": [
        {
          "name": "root",
          "type": "TreeNode"
        }
      ],
      "return": {
        "type": "list<string>",
        "dealloc": true
      }
    }
  },
  "solution": {
    "code": "from typing import List, Optional\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:\n        def dfs(node, path):\n            if node is not None:\n                # Append the current node's value to the path\n                path += str(node.val)\n                # If it's a leaf node, add the path to the result\n                if not node.left and not node.right:\n                    paths.append(path)\n                else:\n                    # Continue the path with '->' for non-leaf nodes\n                    path += '->'\n                    # Recur for left and right children\n                    dfs(node.left, path)\n                    dfs(node.right, path)\n\n        paths = []\n        dfs(root, \"\")\n        return paths",
    "explanation": "The solution uses a depth-first search (DFS) approach to traverse the binary tree. The `binaryTreePaths` function initializes an empty list `paths` to store the root-to-leaf paths. It then calls the helper function `dfs`, which performs the actual traversal.\n\n1. **DFS Function**: The `dfs` function takes two parameters: the current node and the current path string. It checks if the node is not `None`, appends the node's value to the path, and checks if the node is a leaf (both left and right children are `None`).\n   - If it is a leaf, the current path is added to the `paths` list.\n   - If it is not a leaf, the function appends '->' to the path and recursively calls itself for the left and right children.\n\n2. **Base Case**: The recursion stops when a leaf node is reached, ensuring that all paths from the root to each leaf are collected.\n\n3. **Time Complexity**: The time complexity of this solution is O(N), where N is the number of nodes in the binary tree. This is because we visit each node exactly once.\n\n4. **Space Complexity**: The space complexity is O(H), where H is the height of the tree. This accounts for the space used by the recursion stack. In the worst case (a skewed tree), H can be equal to N.\n\nOverall, this solution efficiently collects all root-to-leaf paths in the binary tree and returns them as a list of strings."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmp8bf_j789.py\", line 120\n    expected_0 = [1->2->5,1->3]\n                   ^^\nSyntaxError: invalid syntax\n"
  },
  "timestamp": "2025-04-01 18:00:45"
}