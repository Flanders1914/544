{
  "problem": {
    "id": "174",
    "frontend_id": "174",
    "title": "Dungeon Game",
    "description": "The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.\nSome of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\nTo reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\nReturn the knight's minimum initial health so that he can rescue the princess.\nNote that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n \nExample 1:\n\n\nInput: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]\nOutput: 7\nExplanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.\n\nExample 2:\n\nInput: dungeon = [[0]]\nOutput: 1\n\n \nConstraints:\n\nm == dungeon.length\nn == dungeon[i].length\n1 <= m, n <= 200\n-1000 <= dungeon[i][j] <= 1000\n\n",
    "difficulty": "Hard",
    "examples": [
      "[[-2,-3,3],[-5,-10,1],[10,30,-5]]",
      "[[0]]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "dungeon": "[[-2,-3,3]"
        },
        "expected": "7"
      },
      {
        "input": {
          "dungeon": "[[0]"
        },
        "expected": "1"
      }
    ],
    "python_starter": "class Solution:\n    def calculateMinimumHP(self, dungeon: List[List[int]]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "calculateMinimumHP",
      "params": [
        {
          "name": "dungeon",
          "type": "integer[][]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def calculateMinimumHP(self, dungeon: List[List[int]]) -> int:\n        m, n = len(dungeon), len(dungeon[0])\n        # Create a dp array with the same dimensions as dungeon\n        dp = [[0] * n for _ in range(m)]\n        \n        # Start from the princess's position\n        dp[m-1][n-1] = max(1, 1 - dungeon[m-1][n-1])\n        \n        # Fill the last row (can only come from the left)\n        for j in range(n-2, -1, -1):\n            dp[m-1][j] = max(1, dp[m-1][j+1] - dungeon[m-1][j])\n        \n        # Fill the last column (can only come from above)\n        for i in range(m-2, -1, -1):\n            dp[i][n-1] = max(1, dp[i+1][n-1] - dungeon[i][n-1])\n        \n        # Fill the rest of the dp table\n        for i in range(m-2, -1, -1):\n            for j in range(n-2, -1, -1):\n                min_health_on_exit = min(dp[i+1][j], dp[i][j+1])\n                dp[i][j] = max(1, min_health_on_exit - dungeon[i][j])\n        \n        return dp[0][0]",
    "explanation": "The solution uses dynamic programming to compute the minimum health required for the knight to reach the princess. The `dp` array is initialized to store the minimum health needed at each cell, starting from the princess's position. \n\n1. **Initialization**: The bottom-right cell is initialized based on the dungeon value at that position. If the value is negative, we need to ensure the knight has enough health to survive.\n2. **Filling the DP Table**: We fill the last row and last column first since they have only one way to be reached (from the left for the last row and from above for the last column). Then, we fill the rest of the table by considering the minimum health required from the cells to the right and below.\n3. **Final Result**: The value at `dp[0][0]` gives the minimum initial health required for the knight to safely reach the princess.\n\n**Time Complexity**: O(m * n), where m is the number of rows and n is the number of columns in the dungeon. We traverse each cell once.\n\n**Space Complexity**: O(m * n) for the `dp` array. However, we could optimize this to O(n) if we only keep track of the last row and the current row, but for clarity, we maintain the full `dp` array in this solution."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmp_zfpnecs.py\", line 62\n    input_0_0 = [[-2,-3,3]\n                 ^^^^^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n"
  },
  "timestamp": "2025-04-01 18:00:40"
}