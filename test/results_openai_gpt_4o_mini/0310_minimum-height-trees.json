{
  "problem": {
    "id": "310",
    "frontend_id": "310",
    "title": "Minimum Height Trees",
    "description": "A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.\nGiven a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))  are called minimum height trees (MHTs).\nReturn a list of all MHTs' root labels. You can return the answer in any order.\nThe height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.\n \nExample 1:\n\n\nInput: n = 4, edges = [[1,0],[1,2],[1,3]]\nOutput: [1]\nExplanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.\n\nExample 2:\n\n\nInput: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\nOutput: [3,4]\n\n \nConstraints:\n\n1 <= n <= 2 * 104\nedges.length == n - 1\n0 <= ai, bi < n\nai != bi\nAll the pairs (ai, bi) are distinct.\nThe given input is guaranteed to be a tree and there will be no repeated edges.\n\n",
    "difficulty": "Medium",
    "examples": [
      "4",
      "[[1,0],[1,2],[1,3]]",
      "6",
      "[[3,0],[3,1],[3,2],[3,4],[5,4]]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "n": "4",
          "edges": "[[1,0]"
        },
        "expected": "[1]"
      },
      {
        "input": {
          "n": "6",
          "edges": "[[3,0]"
        },
        "expected": "[3,4]"
      }
    ],
    "python_starter": "class Solution:\n    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:\n        ",
    "hints": [
      "How many MHTs can a graph have at most?"
    ],
    "meta_data": {
      "name": "findMinHeightTrees",
      "params": [
        {
          "name": "n",
          "type": "integer"
        },
        {
          "name": "edges",
          "type": "integer[][]"
        }
      ],
      "return": {
        "type": "list<integer>"
      }
    }
  },
  "solution": {
    "code": "from collections import defaultdict, deque\nfrom typing import List\n\nclass Solution:\n    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:\n        if n == 1:\n            return [0]  # The only node is the root itself\n        \n        # Build the graph\n        graph = defaultdict(list)\n        for a, b in edges:\n            graph[a].append(b)\n            graph[b].append(a)\n        \n        # Initialize leaves\n        leaves = deque()\n        for i in range(n):\n            if len(graph[i]) == 1:  # A leaf node\n                leaves.append(i)\n        \n        # Trim the leaves until we have 1 or 2 nodes left\n        remaining_nodes = n\n        while remaining_nodes > 2:\n            leaves_size = len(leaves)\n            remaining_nodes -= leaves_size\n            \n            for _ in range(leaves_size):\n                leaf = leaves.popleft()\n                # Remove the leaf from the graph\n                for neighbor in graph[leaf]:\n                    graph[neighbor].remove(leaf)\n                    if len(graph[neighbor]) == 1:  # If it becomes a leaf\n                        leaves.append(neighbor)\n        \n        # The remaining nodes are the roots of MHTs\n        return list(leaves)",
    "explanation": "The solution uses a breadth-first search (BFS) approach to iteratively trim the leaves of the tree until we are left with one or two nodes, which are the roots of the minimum height trees (MHTs).\n\n1. **Graph Construction**: We first construct an adjacency list representation of the tree using a dictionary. Each node points to a list of its connected nodes.\n\n2. **Identifying Leaves**: We identify all the initial leaves (nodes with only one connection) and store them in a queue.\n\n3. **Trimming Process**: We repeatedly remove the leaves from the tree:\n   - For each leaf, we remove it from its neighbor's list.\n   - If any neighbor becomes a leaf after this removal, we add it to the queue.\n   - We continue this process until only one or two nodes remain.\n\n4. **Returning Results**: The remaining nodes in the queue are the roots of the MHTs, which we return as a list.\n\n**Time Complexity**: O(n), where n is the number of nodes. Each node and edge is processed a limited number of times.\n\n**Space Complexity**: O(n) for storing the graph and the leaves in the queue.\n\nThis efficient approach ensures that we can handle the upper limits of the problem constraints effectively."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmprgpisqyv.py\", line 73\n    input_0_1 = [[1,0]\n                 ^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n"
  },
  "timestamp": "2025-04-01 18:00:48"
}