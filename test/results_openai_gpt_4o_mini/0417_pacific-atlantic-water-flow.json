{
  "problem": {
    "id": "417",
    "frontend_id": "417",
    "title": "Pacific Atlantic Water Flow",
    "description": "There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.\nThe island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).\nThe island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\nReturn a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n \nExample 1:\n\n\nInput: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\nOutput: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]\nExplanation: The following cells can flow to the Pacific and Atlantic oceans, as shown below:\n[0,4]: [0,4] -> Pacific Ocean \n       [0,4] -> Atlantic Ocean\n[1,3]: [1,3] -> [0,3] -> Pacific Ocean \n       [1,3] -> [1,4] -> Atlantic Ocean\n[1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean \n       [1,4] -> Atlantic Ocean\n[2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean \n       [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean\n[3,0]: [3,0] -> Pacific Ocean \n       [3,0] -> [4,0] -> Atlantic Ocean\n[3,1]: [3,1] -> [3,0] -> Pacific Ocean \n       [3,1] -> [4,1] -> Atlantic Ocean\n[4,0]: [4,0] -> Pacific Ocean \n       [4,0] -> Atlantic Ocean\nNote that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.\n\nExample 2:\n\nInput: heights = [[1]]\nOutput: [[0,0]]\nExplanation: The water can flow from the only cell to the Pacific and Atlantic oceans.\n\n \nConstraints:\n\nm == heights.length\nn == heights[r].length\n1 <= m, n <= 200\n0 <= heights[r][c] <= 105\n\n",
    "difficulty": "Medium",
    "examples": [
      "[[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]",
      "[[1]]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "heights": "[[1,2,2,3,5]"
        },
        "expected": "[[0,4]"
      },
      {
        "input": {
          "heights": "[[1]"
        },
        "expected": "[[0,0]"
      }
    ],
    "python_starter": "class Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "pacificAtlantic",
      "params": [
        {
          "name": "heights",
          "type": "integer[][]"
        }
      ],
      "return": {
        "type": "list<list<integer>>"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        if not heights:\n            return []\n        \n        m, n = len(heights), len(heights[0])\n        pacific_reachable = [[False] * n for _ in range(m)]\n        atlantic_reachable = [[False] * n for _ in range(m)]\n        \n        def dfs(r, c, reachable):\n            reachable[r][c] = True\n            for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < m and 0 <= nc < n and not reachable[nr][nc] and heights[nr][nc] >= heights[r][c]:\n                    dfs(nr, nc, reachable)\n        \n        # Start DFS from Pacific Ocean (top and left edges)\n        for i in range(m):\n            dfs(i, 0, pacific_reachable)\n        for j in range(n):\n            dfs(0, j, pacific_reachable)\n        \n        # Start DFS from Atlantic Ocean (bottom and right edges)\n        for i in range(m):\n            dfs(i, n - 1, atlantic_reachable)\n        for j in range(n):\n            dfs(m - 1, j, atlantic_reachable)\n        \n        # Collect results\n        result = []\n        for i in range(m):\n            for j in range(n):\n                if pacific_reachable[i][j] and atlantic_reachable[i][j]:\n                    result.append([i, j])\n        \n        return result",
    "explanation": "The solution uses a depth-first search (DFS) approach to explore the grid and determine which cells can flow to both the Pacific and Atlantic oceans. \n\n1. **Initialization**: We create two boolean matrices, `pacific_reachable` and `atlantic_reachable`, to track which cells can reach the respective oceans. The dimensions of these matrices match the input grid.\n\n2. **DFS Function**: The `dfs` function takes the current cell's coordinates and a reachable matrix. It marks the current cell as reachable and recursively explores its neighbors (up, down, left, right) if they are within bounds, not already marked as reachable, and have a height greater than or equal to the current cell.\n\n3. **Starting Points**: We initiate the DFS from the edges of the grid that are adjacent to the oceans. For the Pacific Ocean, we start from the first row and first column. For the Atlantic Ocean, we start from the last row and last column.\n\n4. **Collecting Results**: After both DFS traversals, we iterate through the grid and collect the coordinates of cells that are marked as reachable from both oceans.\n\n**Time Complexity**: The time complexity of this solution is O(m * n), where m is the number of rows and n is the number of columns in the grid. Each cell is visited at most once during the DFS.\n\n**Space Complexity**: The space complexity is also O(m * n) due to the storage of the two boolean matrices and the recursion stack used in the DFS.\n\nThis efficient approach ensures that we can handle the maximum constraints of the problem effectively."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpap390vgr.py\", line 74\n    input_0_0 = [[1,2,2,3,5]\n                 ^^^^^^^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n"
  },
  "timestamp": "2025-04-01 18:00:54"
}