{
  "problem": {
    "id": "523",
    "frontend_id": "523",
    "title": "Continuous Subarray Sum",
    "description": "Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.\nA good subarray is a subarray where:\n\nits length is at least two, and\nthe sum of the elements of the subarray is a multiple of k.\n\nNote that:\n\nA subarray is a contiguous part of the array.\nAn integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.\n\n \nExample 1:\n\nInput: nums = [23,2,4,6,7], k = 6\nOutput: true\nExplanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.\n\nExample 2:\n\nInput: nums = [23,2,6,4,7], k = 6\nOutput: true\nExplanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\n42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.\n\nExample 3:\n\nInput: nums = [23,2,6,4,7], k = 13\nOutput: false\n\n \nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] <= 109\n0 <= sum(nums[i]) <= 231 - 1\n1 <= k <= 231 - 1\n\n",
    "difficulty": "Medium",
    "examples": [
      "[23,2,4,6,7]",
      "6",
      "[23,2,6,4,7]",
      "6",
      "[23,2,6,4,7]",
      "13"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[23,2,4,6,7]",
          "k": "6"
        },
        "expected": "true"
      },
      {
        "input": {
          "nums": "[23,2,6,4,7]",
          "k": "6"
        },
        "expected": "true"
      },
      {
        "input": {
          "nums": "[23,2,6,4,7]",
          "k": "13"
        },
        "expected": "false"
      }
    ],
    "python_starter": "class Solution:\n    def checkSubarraySum(self, nums: List[int], k: int) -> bool:\n        ",
    "hints": [],
    "meta_data": {
      "name": "checkSubarraySum",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ],
      "return": {
        "type": "boolean"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def checkSubarraySum(self, nums: List[int], k: int) -> bool:\n        # Edge case: if k is 0, we need to check for consecutive zeros\n        if k == 0:\n            for i in range(len(nums) - 1):\n                if nums[i] == 0 and nums[i + 1] == 0:\n                    return True\n            return False\n        \n        # Dictionary to store the first occurrence of each modulo value\n        mod_map = {0: -1}  # Handle the case where the sum is exactly a multiple of k\n        cumulative_sum = 0\n        \n        for i in range(len(nums)):\n            cumulative_sum += nums[i]\n            mod = cumulative_sum % k\n            \n            # If mod is negative, convert it to a positive equivalent\n            if mod < 0:\n                mod += k\n            \n            # Check if this mod has been seen before\n            if mod in mod_map:\n                # Check the length of the subarray\n                if i - mod_map[mod] > 1:\n                    return True\n            else:\n                # Store the first occurrence of this mod\n                mod_map[mod] = i\n        \n        return False",
    "explanation": "The solution uses a single pass through the array to compute the cumulative sum and its modulo with respect to `k`. The key steps are:\n\n1. **Initialization**: We start by checking if `k` is zero. If it is, we look for consecutive zeros in the array. If found, we return `True`.\n2. **Cumulative Sum and Modulo Calculation**: As we iterate through the array, we maintain a cumulative sum and compute its modulo with `k`. We also handle negative mod values by converting them to their positive equivalents.\n3. **Checking for Previous Modulo Values**: We use a dictionary to track the first occurrence of each modulo value. If we encounter the same modulo value again, we check the distance between the current index and the stored index. If the distance is greater than 1, it indicates that we have found a valid subarray.\n4. **Return Result**: If we find such a subarray, we return `True`. If we finish iterating through the array without finding any, we return `False`.\n\n**Time Complexity**: O(n), where n is the length of the input array `nums`, since we only traverse the array once.\n\n**Space Complexity**: O(k), where k is the number of unique modulo values we might store in the dictionary."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: True\nTest case 2:\n[PASS] Test passed: True\nTest case 3:\n[PASS] Test passed: False\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:01:22"
}