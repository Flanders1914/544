{
  "problem": {
    "id": "55",
    "frontend_id": "55",
    "title": "Jump Game",
    "description": "You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\nReturn true if you can reach the last index, or false otherwise.\n \nExample 1:\n\nInput: nums = [2,3,1,1,4]\nOutput: true\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\nExample 2:\n\nInput: nums = [3,2,1,0,4]\nOutput: false\nExplanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n\n \nConstraints:\n\n1 <= nums.length <= 104\n0 <= nums[i] <= 105\n\n",
    "difficulty": "Medium",
    "examples": [
      "[2,3,1,1,4]",
      "[3,2,1,0,4]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[2,3,1,1,4]"
        },
        "expected": "true"
      },
      {
        "input": {
          "nums": "[3,2,1,0,4]"
        },
        "expected": "false"
      }
    ],
    "python_starter": "class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        ",
    "hints": [],
    "meta_data": {
      "name": "canJump",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "boolean"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        max_reachable = 0  # The farthest index we can reach\n        n = len(nums)\n        \n        for i in range(n):\n            if i > max_reachable:\n                return False  # We cannot reach this index\n            max_reachable = max(max_reachable, i + nums[i])  # Update the farthest index we can reach\n            \n            if max_reachable >= n - 1:\n                return True  # We can reach the last index\n        \n        return False  # If we finish the loop and haven't returned True",
    "explanation": "The solution uses a greedy algorithm to determine if the last index of the array can be reached. We maintain a variable `max_reachable` that keeps track of the farthest index we can reach at any point in the iteration. \n\n1. We iterate through each index `i` of the array:\n   - If `i` is greater than `max_reachable`, it means we cannot reach this index, and we return `False`.\n   - We update `max_reachable` to be the maximum of its current value and `i + nums[i]`, which represents the farthest index we can reach from the current index.\n   - If at any point `max_reachable` is greater than or equal to the last index (`n - 1`), we return `True`.\n\n2. If we finish the loop without returning `True`, it means we cannot reach the last index, and we return `False`.\n\nThe time complexity of this solution is O(n), where n is the length of the input array, as we only make a single pass through the array. The space complexity is O(1) since we are using a constant amount of extra space."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: True\nTest case 2:\n[PASS] Test passed: False\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:30"
}