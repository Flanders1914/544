{
  "problem": {
    "id": "432",
    "frontend_id": "432",
    "title": "All O`one Data Structure",
    "description": "Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.\nImplement the AllOne class:\n\nAllOne() Initializes the object of the data structure.\ninc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1.\ndec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement.\ngetMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string \"\".\ngetMinKey() Returns one of the keys with the minimum count. If no element exists, return an empty string \"\".\n\nNote that each function must run in O(1) average time complexity.\n \nExample 1:\n\nInput\n[\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]\n[[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]\nOutput\n[null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]\n\nExplanation\nAllOne allOne = new AllOne();\nallOne.inc(\"hello\");\nallOne.inc(\"hello\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"hello\"\nallOne.inc(\"leet\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"leet\"\n\n \nConstraints:\n\n1 <= key.length <= 10\nkey consists of lowercase English letters.\nIt is guaranteed that for each call to dec, key is existing in the data structure.\nAt most 5 * 104 calls will be made to inc, dec, getMaxKey, and getMinKey.\n\n",
    "difficulty": "Hard",
    "examples": [
      "[\"AllOne\",\"inc\",\"inc\",\"getMaxKey\",\"getMinKey\",\"inc\",\"getMaxKey\",\"getMinKey\"]",
      "[[],[\"hello\"],[\"hello\"],[],[],[\"leet\"],[],[]]"
    ],
    "structured_test_cases": [],
    "python_starter": "class AllOne:\n\n    def __init__(self):\n        \n\n    def inc(self, key: str) -> None:\n        \n\n    def dec(self, key: str) -> None:\n        \n\n    def getMaxKey(self) -> str:\n        \n\n    def getMinKey(self) -> str:\n        \n\n\n# Your AllOne object will be instantiated and called as such:\n# obj = AllOne()\n# obj.inc(key)\n# obj.dec(key)\n# param_3 = obj.getMaxKey()\n# param_4 = obj.getMinKey()",
    "hints": [],
    "meta_data": {
      "classname": "AllOne",
      "constructor": {
        "params": []
      },
      "methods": [
        {
          "params": [
            {
              "type": "string",
              "name": "key"
            }
          ],
          "return": {
            "type": "void"
          },
          "name": "inc"
        },
        {
          "params": [
            {
              "type": "string",
              "name": "key"
            }
          ],
          "return": {
            "type": "void"
          },
          "name": "dec"
        },
        {
          "params": [],
          "return": {
            "type": "string"
          },
          "name": "getMaxKey"
        },
        {
          "params": [],
          "return": {
            "type": "string"
          },
          "name": "getMinKey"
        }
      ],
      "return": {
        "type": "boolean"
      },
      "systemdesign": true
    }
  },
  "solution": {
    "code": "class Node:\n    def __init__(self, count):\n        self.count = count\n        self.keys = set()\n        self.prev = None\n        self.next = None\n\nclass AllOne:\n\n    def __init__(self):\n        self.key_count = {}\n        self.count_node_map = {}\n        self.head = Node(0)  # Dummy head\n        self.tail = Node(0)  # Dummy tail\n        self.head.next = self.tail\n        self.tail.prev = self.head\n\n    def _add_node_after(self, new_node, prev_node):\n        new_node.prev = prev_node\n        new_node.next = prev_node.next\n        prev_node.next.prev = new_node\n        prev_node.next = new_node\n\n    def _remove_node(self, node):\n        node.prev.next = node.next\n        node.next.prev = node.prev\n\n    def inc(self, key: str) -> None:\n        count = self.key_count.get(key, 0)\n        self.key_count[key] = count + 1\n        new_count = self.key_count[key]\n\n        # Remove the key from the old count node\n        if count > 0:\n            old_node = self.count_node_map[count]\n            old_node.keys.remove(key)\n            if not old_node.keys:\n                self._remove_node(old_node)\n\n        # Add the key to the new count node\n        if new_count not in self.count_node_map:\n            new_node = Node(new_count)\n            self.count_node_map[new_count] = new_node\n            # Insert new_node after the previous count node\n            prev_node = self.head if count == 0 else self.count_node_map[count]\n            self._add_node_after(new_node, prev_node)\n\n        self.count_node_map[new_count].keys.add(key)\n\n    def dec(self, key: str) -> None:\n        count = self.key_count[key]\n        old_node = self.count_node_map[count]\n        old_node.keys.remove(key)\n\n        if count == 1:\n            del self.key_count[key]\n        else:\n            self.key_count[key] = count - 1\n            new_count = count - 1\n            if new_count not in self.count_node_map:\n                new_node = Node(new_count)\n                self.count_node_map[new_count] = new_node\n                self._add_node_after(new_node, old_node.prev)\n\n            self.count_node_map[new_count].keys.add(key)\n\n        if not old_node.keys:\n            self._remove_node(old_node)\n            del self.count_node_map[count]\n\n    def getMaxKey(self) -> str:\n        if self.tail.prev == self.head:\n            return \"\"\n        return next(iter(self.tail.prev.keys))\n\n    def getMinKey(self) -> str:\n        if self.head.next == self.tail:\n            return \"\"\n        return next(iter(self.head.next.keys))",
    "explanation": "The `AllOne` class is designed to efficiently manage string counts using a combination of a hash map and a doubly linked list. \n\n1. **Initialization**: The constructor initializes the hash map (`key_count`) to store the counts of strings, a map (`count_node_map`) to link counts to their corresponding nodes in the linked list, and two dummy nodes (`head` and `tail`) to simplify the linked list operations.\n\n2. **Increment (`inc`)**: When a string is incremented:\n   - If it exists, we"
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\nTraceback (most recent call last):\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpdv51icdy.py\", line 106, in <module>\n    solution = Node()\n               ^^^^^^\nTypeError: Node.__init__() missing 1 required positional argument: 'count'\n"
  },
  "timestamp": "2025-04-01 18:00:55"
}