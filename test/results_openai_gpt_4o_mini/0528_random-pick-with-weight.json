{
  "problem": {
    "id": "912",
    "frontend_id": "528",
    "title": "Random Pick with Weight",
    "description": "You are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index.\nYou need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] / sum(w).\n\nFor example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%).\n\n \nExample 1:\n\nInput\n[\"Solution\",\"pickIndex\"]\n[[[1]],[]]\nOutput\n[null,0]\n\nExplanation\nSolution solution = new Solution([1]);\nsolution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.\n\nExample 2:\n\nInput\n[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]\n[[[1,3]],[],[],[],[],[]]\nOutput\n[null,1,1,1,1,0]\n\nExplanation\nSolution solution = new Solution([1, 3]);\nsolution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.\n\nSince this is a randomization problem, multiple answers are allowed.\nAll of the following outputs can be considered correct:\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\nand so on.\n\n \nConstraints:\n\n1 <= w.length <= 104\n1 <= w[i] <= 105\npickIndex will be called at most 104 times.\n\n",
    "difficulty": "Medium",
    "examples": [
      "[\"Solution\",\"pickIndex\"]",
      "[[[1]],[]]",
      "[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]",
      "[[[1,3]],[],[],[],[],[]]"
    ],
    "structured_test_cases": [],
    "python_starter": "class Solution:\n\n    def __init__(self, w: List[int]):\n        \n\n    def pickIndex(self) -> int:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(w)\n# param_1 = obj.pickIndex()",
    "hints": [],
    "meta_data": {
      "classname": "Solution",
      "maxbytesperline": 200000,
      "constructor": {
        "params": [
          {
            "name": "w",
            "type": "integer[]"
          },
          {
            "name": "wSize",
            "type": "integer",
            "lang": "c",
            "value": "size_1"
          }
        ]
      },
      "methods": [
        {
          "name": "pickIndex",
          "params": [],
          "return": {
            "type": "integer"
          }
        }
      ],
      "systemdesign": true,
      "params": [
        {
          "name": "inputs",
          "type": "integer[]"
        },
        {
          "name": "inputs",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "list<String>",
        "dealloc": true
      }
    }
  },
  "solution": {
    "code": "import random\nfrom typing import List\n\nclass Solution:\n\n    def __init__(self, w: List[int]):\n        # Create a prefix sum array\n        self.prefix_sum = []\n        total = 0\n        for weight in w:\n            total += weight\n            self.prefix_sum.append(total)\n        self.total_sum = total\n\n    def pickIndex(self) -> int:\n        # Generate a random number between 1 and total_sum\n        target = random.randint(1, self.total_sum)\n        \n        # Binary search to find the index\n        left, right = 0, len(self.prefix_sum) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if self.prefix_sum[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        return left",
    "explanation": "The solution involves two main components: the initialization of the prefix sum array and the implementation of the `pickIndex` method.\n\n1. **Initialization**:\n   - We create a prefix sum array that stores cumulative weights. For example, if the input weights are `[1, 3]`, the prefix sum will be `[1, 4]`. This means that the first index (0) corresponds to a cumulative weight of 1, and the second index (1) corresponds to a cumulative weight of 4.\n\n2. **Random Index Picking**:\n   - In the `pickIndex` method, we generate a random integer between `1` and the total sum of weights. We then perform a binary search on the prefix sum array to find the smallest index where the prefix sum is greater than or equal to the random number. This index is returned as the result.\n\n3. **Time Complexity**:\n   - The initialization of the prefix sum array takes O(n), where n is the length of the weights array.\n   - Each call to `pickIndex` takes O(log n) due to the binary search.\n\n4. **Space Complexity**:\n   - The space complexity is O(n) for storing the prefix sum array.\n\nThis solution efficiently handles the requirements of the problem while ensuring that the selection of indices is based on the specified weights."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\nTraceback (most recent call last):\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpooud9lc7.py\", line 54, in <module>\n    solution = Solution()\n               ^^^^^^^^^^\nTypeError: Solution.__init__() missing 1 required positional argument: 'w'\n"
  },
  "timestamp": "2025-04-01 18:01:22"
}