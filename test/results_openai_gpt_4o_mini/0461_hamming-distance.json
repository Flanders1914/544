{
  "problem": {
    "id": "461",
    "frontend_id": "461",
    "title": "Hamming Distance",
    "description": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\nGiven two integers x and y, return the Hamming distance between them.\n \nExample 1:\n\nInput: x = 1, y = 4\nOutput: 2\nExplanation:\n1   (0 0 0 1)\n4   (0 1 0 0)\n       ↑   ↑\nThe above arrows point to positions where the corresponding bits are different.\n\nExample 2:\n\nInput: x = 3, y = 1\nOutput: 1\n\n \nConstraints:\n\n0 <= x, y <= 231 - 1\n\n \nNote: This question is the same as  2220: Minimum Bit Flips to Convert Number.\n",
    "difficulty": "Easy",
    "examples": [
      "1",
      "4",
      "3",
      "1"
    ],
    "structured_test_cases": [
      {
        "input": {
          "x": "1",
          "y": "4"
        },
        "expected": "2"
      },
      {
        "input": {
          "x": "3",
          "y": "1"
        },
        "expected": "1"
      }
    ],
    "python_starter": "class Solution:\n    def hammingDistance(self, x: int, y: int) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "hammingDistance",
      "params": [
        {
          "name": "x",
          "type": "integer"
        },
        {
          "name": "y",
          "type": "integer"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def hammingDistance(self, x: int, y: int) -> int:\n        # Calculate the XOR of x and y\n        xor_result = x ^ y\n        \n        # Count the number of 1s in the binary representation of the XOR result\n        hamming_distance = bin(xor_result).count('1')\n        \n        return hamming_distance",
    "explanation": "The solution begins by calculating the XOR of the two integers `x` and `y`. The XOR operation will produce a new integer where each bit represents whether the corresponding bits of `x` and `y` are different (1) or the same (0). \n\nNext, we convert the result of the XOR operation into its binary representation using `bin()`, which returns a string prefixed with '0b'. We then use the `count('1')` method to count how many bits are set to 1 in this binary string, which directly gives us the Hamming distance.\n\nThe time complexity of this solution is O(log(max(x, y))) because the number of bits in the integers determines the number of operations needed to compute the binary representation and count the 1s. The space complexity is O(1) since we are only using a fixed amount of additional space regardless of the input size.\n\nOverall, this method is efficient and leverages Python's built-in capabilities to handle binary representations and string operations effectively."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 2\nTest case 2:\n[PASS] Test passed: 1\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:58"
}