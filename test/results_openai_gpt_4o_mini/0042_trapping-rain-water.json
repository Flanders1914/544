{
  "problem": {
    "id": "42",
    "frontend_id": "42",
    "title": "Trapping Rain Water",
    "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n \nExample 1:\n\n\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n\nExample 2:\n\nInput: height = [4,2,0,3,2,5]\nOutput: 9\n\n \nConstraints:\n\nn == height.length\n1 <= n <= 2 * 104\n0 <= height[i] <= 105\n\n",
    "difficulty": "Hard",
    "examples": [
      "[0,1,0,2,1,0,1,3,2,1,2,1]",
      "[4,2,0,3,2,5]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "height": "[0,1,0,2,1,0,1,3,2,1,2,1]"
        },
        "expected": "6"
      },
      {
        "input": {
          "height": "[4,2,0,3,2,5]"
        },
        "expected": "9"
      }
    ],
    "python_starter": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "trap",
      "params": [
        {
          "name": "height",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def trap(self, height: List[int]) -> int:\n        if not height:\n            return 0\n        \n        left, right = 0, len(height) - 1\n        left_max, right_max = 0, 0\n        water_trapped = 0\n        \n        while left <= right:\n            if height[left] <= height[right]:\n                if height[left] >= left_max:\n                    left_max = height[left]\n                else:\n                    water_trapped += left_max - height[left]\n                left += 1\n            else:\n                if height[right] >= right_max:\n                    right_max = height[right]\n                else:\n                    water_trapped += right_max - height[right]\n                right -= 1\n        \n        return water_trapped",
    "explanation": "The solution uses a two-pointer technique to efficiently calculate the amount of water that can be trapped between the bars represented by the `height` array. \n\n1. **Initialization**: We start with two pointers (`left` and `right`) and two variables (`left_max` and `right_max`) to track the maximum heights encountered from both ends of the array.\n\n2. **Two-pointer traversal**: We iterate through the array until the `left` pointer surpasses the `right` pointer. At each step, we compare the heights at the two pointers:\n   - If the height at the `left` pointer is less than or equal to that at the `right`, we check if it can trap water based on `left_max`. If it can, we calculate the trapped water and move the `left` pointer to the right.\n   - If the height at the `right` pointer is less, we perform a similar check and calculation for the `right` pointer and move it to the left.\n\n3. **Water calculation**: The water trapped at each position is determined by the difference between the maximum height seen so far from that side and the current height.\n\n4. **Complexity**: The time complexity is O(n) because we traverse the height array once, and the space complexity is O(1) since we only use a constant amount of extra space for the pointers and max height variables.\n\nThis method is efficient and works well within the problem's constraints, ensuring that we can handle the maximum input sizes effectively."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 6\nTest case 2:\n[PASS] Test passed: 9\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:29"
}