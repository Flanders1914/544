{
  "problem": {
    "id": "395",
    "frontend_id": "395",
    "title": "Longest Substring with At Least K Repeating Characters",
    "description": "Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.\nif no such substring exists, return 0.\n \nExample 1:\n\nInput: s = \"aaabb\", k = 3\nOutput: 3\nExplanation: The longest substring is \"aaa\", as 'a' is repeated 3 times.\n\nExample 2:\n\nInput: s = \"ababbc\", k = 2\nOutput: 5\nExplanation: The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.\n\n \nConstraints:\n\n1 <= s.length <= 104\ns consists of only lowercase English letters.\n1 <= k <= 105\n\n",
    "difficulty": "Medium",
    "examples": [
      "\"aaabb\"",
      "3",
      "\"ababbc\"",
      "2"
    ],
    "structured_test_cases": [
      {
        "input": {
          "s": "\"aaabb\"",
          "k": "3"
        },
        "expected": "3"
      },
      {
        "input": {
          "s": "\"ababbc\"",
          "k": "2"
        },
        "expected": "5"
      }
    ],
    "python_starter": "class Solution:\n    def longestSubstring(self, s: str, k: int) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "longestSubstring",
      "params": [
        {
          "name": "s",
          "type": "string"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def longestSubstring(self, s: str, k: int) -> int:\n        # Helper function to count the frequency of characters in the string\n        def count_frequency(s):\n            freq = {}\n            for char in s:\n                freq[char] = freq.get(char, 0) + 1\n            return freq\n        \n        # Main recursive function to find the longest valid substring\n        def longest_substring_helper(s, k):\n            # Base case: if the string is empty\n            if not s:\n                return 0\n            \n            # Count the frequency of each character in the string\n            freq = count_frequency(s)\n            \n            # Check if all characters meet the frequency requirement\n            for char in freq:\n                if freq[char] < k:\n                    # If a character does not meet the requirement, split the string\n                    # and check the substrings on either side of this character\n                    return max(longest_substring_helper(substring, k) for substring in s.split(char))\n            \n            # If all characters meet the requirement, return the length of the string\n            return len(s)\n        \n        # Call the helper function with the original string\n        return longest_substring_helper(s, k)",
    "explanation": "The solution uses a recursive approach to find the longest substring where each character appears at least `k` times. The `longestSubstring` method calls a helper function `longest_substring_helper`, which performs the following steps:\n\n1. **Base Case**: If the input string `s` is empty, it returns 0.\n2. **Frequency Count**: It counts the frequency of each character in the string using a helper function `count_frequency`.\n3. **Check Frequencies**: It checks if all characters in the frequency dictionary meet the requirement of appearing at least `k` times. If any character does not meet this requirement, the string is split at that character, and the function recursively checks the resulting substrings.\n4. **Return Length**: If all characters meet the requirement, it returns the length of the string.\n\nThe time complexity of this solution is O(N^2) in the worst case, where N is the length of the string, due to the recursive calls and the splitting of the string. The space complexity is O(N) for storing the frequency count and the recursive call stack.\n\nOverall, this approach efficiently finds the longest valid substring while adhering to the constraints provided."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 3\nTest case 2:\n[PASS] Test passed: 5\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:52"
}