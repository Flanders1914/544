{
  "problem": {
    "id": "343",
    "frontend_id": "343",
    "title": "Integer Break",
    "description": "Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.\nReturn the maximum product you can get.\n \nExample 1:\n\nInput: n = 2\nOutput: 1\nExplanation: 2 = 1 + 1, 1 × 1 = 1.\n\nExample 2:\n\nInput: n = 10\nOutput: 36\nExplanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.\n\n \nConstraints:\n\n2 <= n <= 58\n\n",
    "difficulty": "Medium",
    "examples": [
      "2",
      "10"
    ],
    "structured_test_cases": [
      {
        "input": {
          "n": "2"
        },
        "expected": "1"
      },
      {
        "input": {
          "n": "10"
        },
        "expected": "36"
      }
    ],
    "python_starter": "class Solution:\n    def integerBreak(self, n: int) -> int:\n        ",
    "hints": [
      "There is a simple O(n) solution to this problem.",
      "You may check the breaking results of <i>n</i> ranging from 7 to 10 to discover the regularities."
    ],
    "meta_data": {
      "name": "integerBreak",
      "params": [
        {
          "name": "n",
          "type": "integer"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def integerBreak(self, n: int) -> int:\n        if n == 2:\n            return 1  # 1 + 1 = 2, product = 1\n        if n == 3:\n            return 2  # 1 + 2 = 3, product = 2\n        \n        product = 1\n        \n        # While n is greater than 4, keep breaking it into 3s\n        while n > 4:\n            product *= 3\n            n -= 3\n        \n        # Multiply the remaining n (which will be 2, 3, or 4)\n        product *= n\n        \n        return product",
    "explanation": "The solution works by iteratively breaking down the integer `n` into parts of 3 until `n` is less than or equal to 4. This is because the product of numbers is maximized when they are close to each other, and using 3s achieves this for larger values of `n`. \n\n1. **Base Cases**: \n   - For `n = 2`, the only split is `1 + 1`, giving a product of `1`.\n   - For `n = 3`, the split is `1 + 2`, giving a product of `2`.\n\n2. **Loop**: \n   - For `n > 4`, we keep subtracting 3 from `n` and multiplying the product by 3. This continues until `n` is reduced to 4 or less.\n\n3. **Final Multiplication**: \n   - Once `n` is 4 or less, we multiply the product by the remaining `n`, which can be 2, 3, or 4.\n\n**Time Complexity**: O(n/3) in the worst case, which simplifies to O(n). However, since we are only iterating until `n` is reduced to 4, it is effectively O(1) for practical input sizes.\n\n**Space Complexity**: O(1) since we are using a constant amount of space for the product and the loop variable.\n\nThis approach efficiently computes the maximum product for any valid input `n` within the constraints provided."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 1\nTest case 2:\n[PASS] Test passed: 36\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:49"
}