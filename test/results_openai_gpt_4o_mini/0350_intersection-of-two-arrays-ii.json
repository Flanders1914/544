{
  "problem": {
    "id": "350",
    "frontend_id": "350",
    "title": "Intersection of Two Arrays II",
    "description": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.\n \nExample 1:\n\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2,2]\n\nExample 2:\n\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [4,9]\nExplanation: [9,4] is also accepted.\n\n \nConstraints:\n\n1 <= nums1.length, nums2.length <= 1000\n0 <= nums1[i], nums2[i] <= 1000\n\n \nFollow up:\n\nWhat if the given array is already sorted? How would you optimize your algorithm?\nWhat if nums1's size is small compared to nums2's size? Which algorithm is better?\nWhat if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?\n\n",
    "difficulty": "Easy",
    "examples": [
      "[1,2,2,1]",
      "[2,2]",
      "[4,9,5]",
      "[9,4,9,8,4]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums1": "[1,2,2,1]",
          "nums2": "[2,2]"
        },
        "expected": "[2,2]"
      }
    ],
    "python_starter": "class Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "intersect",
      "params": [
        {
          "name": "nums1",
          "type": "integer[]"
        },
        {
          "name": "nums2",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer[]"
      }
    }
  },
  "solution": {
    "code": "from typing import List\nfrom collections import Counter\n\nclass Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        # Count the occurrences of each number in nums1\n        count = Counter(nums1)\n        intersection = []\n        \n        # Iterate through nums2 and check for intersections\n        for num in nums2:\n            if count[num] > 0:  # If the number is in nums1\n                intersection.append(num)  # Add to the result\n                count[num] -= 1  # Decrease the count\n        \n        return intersection",
    "explanation": "The solution uses the `Counter` class from the `collections` module to create a frequency map of the elements in `nums1`. This allows us to efficiently check how many times each element appears in `nums1`. \n\n1. We first create a `Counter` object called `count` that holds the frequency of each element in `nums1`.\n2. We then initialize an empty list called `intersection` to store the result.\n3. We iterate through each element in `nums2`. For each element, we check if it exists in the `count` dictionary and if its count is greater than zero.\n4. If it does, we append the element to the `intersection` list and decrement its count in the `count` dictionary to ensure we only include it as many times as it appears in both arrays.\n5. Finally, we return the `intersection` list.\n\nThe overall time complexity is O(n + m) due to the two passes through the arrays, and the space complexity is O(min(n, m)) for the `Counter` storage. This solution is efficient and works well within the given constraints."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: [2, 2]\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:50"
}