{
  "problem": {
    "id": "476",
    "frontend_id": "476",
    "title": "Number Complement",
    "description": "The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.\n\nFor example, The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2.\n\nGiven an integer num, return its complement.\n \nExample 1:\n\nInput: num = 5\nOutput: 2\nExplanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\n\nExample 2:\n\nInput: num = 1\nOutput: 0\nExplanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\n\n \nConstraints:\n\n1 <= num < 231\n\n \nNote: This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n",
    "difficulty": "Easy",
    "examples": [
      "5",
      "1"
    ],
    "structured_test_cases": [
      {
        "input": {
          "num": "5"
        },
        "expected": "2"
      },
      {
        "input": {
          "num": "1"
        },
        "expected": "0"
      }
    ],
    "python_starter": "class Solution:\n    def findComplement(self, num: int) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "findComplement",
      "params": [
        {
          "name": "num",
          "type": "integer"
        }
      ],
      "return": {
        "type": "integer"
      },
      "manual": false
    }
  },
  "solution": {
    "code": "class Solution:\n    def findComplement(self, num: int) -> int:\n        # Step 1: Get the number of bits in the binary representation of num\n        num_bits = num.bit_length()\n        \n        # Step 2: Create a mask with all bits set to 1 for the length of num\n        mask = (1 << num_bits) - 1\n        \n        # Step 3: Calculate the complement using XOR\n        complement = num ^ mask\n        \n        return complement",
    "explanation": "The solution uses the properties of binary numbers to compute the complement efficiently. \n\n1. **bit_length()**: This method returns the number of bits necessary to represent the integer in binary, excluding the sign and leading zeros. For example, `5` has a binary representation of `101`, which requires 3 bits.\n  \n2. **Mask Creation**: The mask is created by left-shifting `1` by `num_bits` positions and then subtracting `1`. For `num = 5`, the mask would be `111` in binary (which is `7` in decimal).\n\n3. **XOR Operation**: The XOR operation between `num` and the mask flips all the bits. For `num = 5` (which is `101`), the operation `5 ^ 7` results in `2` (which is `010`).\n\nThe time complexity of this solution is O(1) since the operations performed do not depend on the size of the input but rather on the fixed number of bits in the integer. The space complexity is also O(1) as we are using a constant amount of space for the variables.\n\nOverall, this solution is efficient and straightforward, leveraging bit manipulation to achieve the desired result."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 2\nTest case 2:\n[PASS] Test passed: 0\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:59"
}