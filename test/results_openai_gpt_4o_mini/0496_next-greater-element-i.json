{
  "problem": {
    "id": "496",
    "frontend_id": "496",
    "title": "Next Greater Element I",
    "description": "The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.\nYou are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.\nFor each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.\nReturn an array ans of length nums1.length such that ans[i] is the next greater element as described above.\n \nExample 1:\n\nInput: nums1 = [4,1,2], nums2 = [1,3,4,2]\nOutput: [-1,3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.\n- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n\nExample 2:\n\nInput: nums1 = [2,4], nums2 = [1,2,3,4]\nOutput: [3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.\n- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.\n\n \nConstraints:\n\n1 <= nums1.length <= nums2.length <= 1000\n0 <= nums1[i], nums2[i] <= 104\nAll integers in nums1 and nums2 are unique.\nAll the integers of nums1 also appear in nums2.\n\n \nFollow up: Could you find an O(nums1.length + nums2.length) solution?",
    "difficulty": "Easy",
    "examples": [
      "[4,1,2]",
      "[1,3,4,2]",
      "[2,4]",
      "[1,2,3,4]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums1": "[4,1,2]",
          "nums2": "[1,3,4,2]"
        },
        "expected": "[-1,3,-1]"
      },
      {
        "input": {
          "nums1": "[2,4]",
          "nums2": "[1,2,3,4]"
        },
        "expected": "[3,-1]"
      }
    ],
    "python_starter": "class Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "nextGreaterElement",
      "params": [
        {
          "name": "nums1",
          "type": "integer[]"
        },
        {
          "name": "nums2",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer[]"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        # Dictionary to hold the next greater element for each number in nums2\n        next_greater = {}\n        # Stack to keep track of elements for which we need to find the next greater element\n        stack = []\n        \n        # Traverse nums2 from right to left\n        for num in reversed(nums2):\n            # Maintain the stack to find the next greater element\n            while stack and stack[-1] <= num:\n                stack.pop()\n            # If stack is not empty, the top element is the next greater element\n            next_greater[num] = stack[-1] if stack else -1\n            # Push the current number onto the stack\n            stack.append(num)\n        \n        # Build the result for nums1 using the next_greater mapping\n        result = [next_greater[num] for num in nums1]\n        return result",
    "explanation": "The solution uses a stack to efficiently find the next greater element for each number in `nums2`. Here’s a step-by-step breakdown of the approach:\n\n1. **Initialization**: We create a dictionary `next_greater` to store the next greater element for each number in `nums2`. We also initialize an empty stack.\n\n2. **Reverse Traversal**: We iterate through `nums2` in reverse order. For each number:\n   - We pop elements from the stack until we find an element that is greater than the current number. This ensures that the stack only contains potential candidates for the next greater element.\n   - If the stack is not empty after this process, the top of the stack is the next greater element for the current number. If the stack is empty, it means there is no greater element, and we store -1.\n\n3. **Result Construction**: After processing all elements in `nums2`, we construct the result for `nums1` by looking up each element in the `next_greater` dictionary.\n\n**Time Complexity**: O(n), where n is the length of `nums2`. Each element is pushed and popped from the stack at most once.\n\n**Space Complexity**: O(n) for the `next_greater` dictionary and the stack.\n\nThis efficient approach meets the problem's requirements and handles the constraints effectively."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: [-1, 3, -1]\nTest case 2:\n[PASS] Test passed: [3, -1]\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:01:20"
}