{
  "problem": {
    "id": "403",
    "frontend_id": "403",
    "title": "Frog Jump",
    "description": "A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.\nGiven a list of stones positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be 1 unit.\nIf the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction.\n \nExample 1:\n\nInput: stones = [0,1,3,5,6,8,12,17]\nOutput: true\nExplanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.\n\nExample 2:\n\nInput: stones = [0,1,2,3,4,8,9,11]\nOutput: false\nExplanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.\n\n \nConstraints:\n\n2 <= stones.length <= 2000\n0 <= stones[i] <= 231 - 1\nstones[0] == 0\nstones is sorted in a strictly increasing order.\n\n",
    "difficulty": "Hard",
    "examples": [
      "[0,1,3,5,6,8,12,17]",
      "[0,1,2,3,4,8,9,11]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "stones": "[0,1,3,5,6,8,12,17]"
        },
        "expected": "true"
      },
      {
        "input": {
          "stones": "[0,1,2,3,4,8,9,11]"
        },
        "expected": "false"
      }
    ],
    "python_starter": "class Solution:\n    def canCross(self, stones: List[int]) -> bool:\n        ",
    "hints": [],
    "meta_data": {
      "name": "canCross",
      "params": [
        {
          "name": "stones",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "boolean"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def canCross(self, stones: List[int]) -> bool:\n        stone_set = set(stones)\n        memo = {}\n\n        def can_jump(index: int, last_jump: int) -> bool:\n            # If we reached the last stone\n            if index == len(stones) - 1:\n                return True\n            \n            # Check if this state has been computed before\n            if (index, last_jump) in memo:\n                return memo[(index, last_jump)]\n            \n            # Try jumps of last_jump - 1, last_jump, last_jump + 1\n            for jump in (last_jump - 1, last_jump, last_jump + 1):\n                if jump > 0:  # The jump must be positive\n                    next_stone = stones[index] + jump\n                    if next_stone in stone_set:\n                        next_index = stones.index(next_stone)\n                        if can_jump(next_index, jump):\n                            memo[(index, last_jump)] = True\n                            return True\n            \n            # If no valid jump was found\n            memo[(index, last_jump)] = False\n            return False\n        \n        # Start the jump from the first stone with an initial jump of 1\n        return can_jump(0, 1)",
    "explanation": "The solution uses a recursive function `can_jump` to explore all possible jumps the frog can make from the current stone. The function checks three possible jump distances: `last_jump - 1`, `last_jump`, and `last_jump + 1`. \n\n1. **Base Case**: If the frog reaches the last stone (i.e., the index is the last stone's index), it returns `True`.\n2. **Memoization**: We store results in a dictionary `memo` to avoid redundant calculations for the same state defined by the current stone index and the last jump distance.\n3. **Jump Logic**: For each possible jump distance, we calculate the next stone's position. If this position exists in the set of stones, we recursively call `can_jump` for the next stone and the current jump distance.\n4. **Return Value**: If any of the recursive calls return `True`, we memoize and return `True`. If all possibilities are exhausted without reaching the last stone, we memoize and return `False`.\n\n**Time Complexity**: The time complexity is O(n^2) in the worst case, where n is the number of stones, due to the nested recursive calls and the potential for each stone to be checked multiple times.\n\n**Space Complexity**: The space complexity is O(n) for the memoization dictionary and the set of stones.\n\nOverall, this approach efficiently determines if the frog can cross the river by leveraging recursion and memoization."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: True\nTest case 2:\n[PASS] Test passed: False\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:53"
}