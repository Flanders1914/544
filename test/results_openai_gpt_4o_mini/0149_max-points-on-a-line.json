{
  "problem": {
    "id": "149",
    "frontend_id": "149",
    "title": "Max Points on a Line",
    "description": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\n \nExample 1:\n\n\nInput: points = [[1,1],[2,2],[3,3]]\nOutput: 3\n\nExample 2:\n\n\nInput: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\nOutput: 4\n\n \nConstraints:\n\n1 <= points.length <= 300\npoints[i].length == 2\n-104 <= xi, yi <= 104\nAll the points are unique.\n\n",
    "difficulty": "Hard",
    "examples": [
      "[[1,1],[2,2],[3,3]]",
      "[[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "points": "[[1,1]"
        },
        "expected": "3"
      }
    ],
    "python_starter": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "maxPoints",
      "params": [
        {
          "name": "points",
          "type": "integer[][]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from collections import defaultdict\nfrom math import gcd\nfrom typing import List\n\nclass Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        if len(points) < 2:\n            return len(points)\n        \n        max_points = 1\n        \n        for i in range(len(points)):\n            slopes = defaultdict(int)\n            for j in range(len(points)):\n                if i != j:\n                    dy = points[j][1] - points[i][1]\n                    dx = points[j][0] - points[i][0]\n                    if dx == 0:  # vertical line\n                        slope = ('inf', 0)\n                    else:\n                        g = gcd(dy, dx)\n                        slope = (dy // g, dx // g)  # reduce slope to simplest form\n                    slopes[slope] += 1\n            \n            current_max = max(slopes.values(), default=0) + 1  # +1 for the reference point\n            max_points = max(max_points, current_max)\n        \n        return max_points",
    "explanation": "The solution iterates through each point in the list and calculates the slope to every other point. The slope is represented as a reduced fraction (dy, dx) to avoid floating-point inaccuracies and to handle vertical lines. \n\n1. **Outer Loop**: For each point `i`, we initialize a dictionary `slopes` to count occurrences of each slope.\n2. **Inner Loop**: For each point `j` (where j ≠ i), we calculate the difference in y-coordinates (dy) and x-coordinates (dx). We then compute the GCD of dy and dx to reduce the slope to its simplest form.\n3. **Counting Slopes**: We store the count of each slope in the `slopes` dictionary. The maximum value in this dictionary (plus one for the reference point) gives the number of points on the same line through point `i`.\n4. **Final Result**: We keep track of the maximum number of points found across all reference points.\n\n**Time Complexity**: O(n^2) due to the nested loops iterating through the points.\n\n**Space Complexity**: O(n) for the dictionary storing slopes for each reference point.\n\nThis approach efficiently finds the maximum number of points that lie on the same straight line in the given set of points."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpx6xhyic1.py\", line 64\n    input_0_0 = [[1,1]\n                ^\nSyntaxError: '[' was never closed\n"
  },
  "timestamp": "2025-04-01 18:00:39"
}