{
  "problem": {
    "id": "148",
    "frontend_id": "148",
    "title": "Sort List",
    "description": "Given the head of a linked list, return the list after sorting it in ascending order.\n \nExample 1:\n\n\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n\nExample 2:\n\n\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n\nExample 3:\n\nInput: head = []\nOutput: []\n\n \nConstraints:\n\nThe number of nodes in the list is in the range [0, 5 * 104].\n-105 <= Node.val <= 105\n\n \nFollow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?\n",
    "difficulty": "Medium",
    "examples": [
      "[4,2,1,3]",
      "[-1,5,3,4,0]",
      "[]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "head": "[4,2,1,3]"
        },
        "expected": "[1,2,3,4]"
      }
    ],
    "python_starter": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "sortList",
      "params": [
        {
          "name": "head",
          "type": "ListNode",
          "dealloc": false
        }
      ],
      "return": {
        "type": "ListNode",
        "dealloc": true
      }
    }
  },
  "solution": {
    "code": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        # Base case: if the list is empty or has only one node\n        if not head or not head.next:\n            return head\n        \n        # Function to split the linked list into two halves\n        def split(head):\n            slow = head\n            fast = head.next\n            while fast and fast.next:\n                slow = slow.next\n                fast = fast.next.next\n            mid = slow.next\n            slow.next = None  # Split the list into two halves\n            return head, mid\n        \n        # Function to merge two sorted linked lists\n        def merge(l1, l2):\n            dummy = ListNode(0)\n            tail = dummy\n            while l1 and l2:\n                if l1.val < l2.val:\n                    tail.next = l1\n                    l1 = l1.next\n                else:\n                    tail.next = l2\n                    l2 = l2.next\n                tail = tail.next\n            tail.next = l1 if l1 else l2  # Append the remaining elements\n            return dummy.next\n        \n        # Split the list into two halves\n        left, right = split(head)\n        # Recursively sort both halves\n        left = self.sortList(left)\n        right = self.sortList(right)\n        # Merge the sorted halves\n        return merge(left, right)",
    "explanation": "The provided solution implements the Merge Sort algorithm to sort a linked list. Here's a detailed breakdown of the solution:\n\n1. **Base Case**: The function first checks if the list is empty or has only one node. If so, it returns the head as it is already sorted.\n\n2. **Splitting the List**: The `split` function uses the fast and slow pointer technique to find the middle of the linked list. The slow pointer moves one step at a time, while the fast pointer moves two steps. When the fast pointer reaches the end, the slow pointer will be at the middle. The list is then split into two halves.\n\n3. **Recursive Sorting**: The `sortList` function is called recursively on both halves of the list until the base case is reached.\n\n4. **Merging**: The `merge` function takes two sorted linked lists and merges them into a single sorted linked list. It uses a dummy node to simplify the merging process.\n\n**Time Complexity**: The time complexity of this solution is O(n log n) because the list is repeatedly split in half (log n splits), and merging takes O(n) time.\n\n**Space Complexity**: The space complexity is O(1) for the merging process since we are not using any additional data structures for the nodes, only a few pointers.\n\nOverall, this solution efficiently sorts the linked list while adhering to the constraints provided in the problem statement."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:39"
}