{
  "problem": {
    "id": "24",
    "frontend_id": "24",
    "title": "Swap Nodes in Pairs",
    "description": "Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n \nExample 1:\n\nInput: head = [1,2,3,4]\nOutput: [2,1,4,3]\nExplanation:\n\n\nExample 2:\n\nInput: head = []\nOutput: []\n\nExample 3:\n\nInput: head = [1]\nOutput: [1]\n\nExample 4:\n\nInput: head = [1,2,3]\nOutput: [2,1,3]\n\n \nConstraints:\n\nThe number of nodes in the list is in the range [0, 100].\n0 <= Node.val <= 100\n\n",
    "difficulty": "Medium",
    "examples": [
      "[1,2,3,4]",
      "[]",
      "[1]",
      "[1,2,3]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "head": "[1,2,3,4]"
        },
        "expected": "[2,1,4,3]"
      },
      {
        "input": {
          "head": "[]"
        },
        "expected": "[]"
      }
    ],
    "python_starter": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "swapPairs",
      "params": [
        {
          "name": "head",
          "type": "ListNode"
        }
      ],
      "return": {
        "type": "ListNode"
      }
    }
  },
  "solution": {
    "code": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        # Create a dummy node that points to the head\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        \n        # Iterate through the list in pairs\n        while prev.next and prev.next.next:\n            # Nodes to be swapped\n            first = prev.next\n            second = prev.next.next\n            \n            # Swapping\n            first.next = second.next\n            second.next = first\n            prev.next = second\n            \n            # Move prev two nodes ahead\n            prev = first\n        \n        # Return the new head\n        return dummy.next",
    "explanation": "The solution uses a dummy node to handle edge cases and simplify the swapping logic. The `prev` pointer starts at the dummy node and helps in connecting the swapped pairs back to the list.\n\n1. **Initialization**: We create a dummy node that points to the head of the list. This allows us to easily return the new head after swaps.\n2. **Swapping Logic**: We check if there are at least two nodes to swap. If so, we identify the two nodes (`first` and `second`) to be swapped. We then adjust their `next` pointers to perform the swap.\n3. **Pointer Movement**: After swapping, we move the `prev` pointer to the `first` node (which is now the second node in the swapped pair) to prepare for the next iteration.\n4. **Termination**: The loop continues until there are no more pairs to swap.\n\n**Time Complexity**: O(n), where n is the number of nodes in the linked list. We traverse the list once.\n\n**Space Complexity**: O(1), as we are using a constant amount of extra space (the dummy node and a few pointers).\n\nThis approach efficiently swaps adjacent nodes without modifying the values in the nodes, adhering to the problem's constraints."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:27"
}