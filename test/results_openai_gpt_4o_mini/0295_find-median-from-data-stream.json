{
  "problem": {
    "id": "295",
    "frontend_id": "295",
    "title": "Find Median from Data Stream",
    "description": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\n\nFor example, for arr = [2,3,4], the median is 3.\nFor example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.\n\nImplement the MedianFinder class:\n\nMedianFinder() initializes the MedianFinder object.\nvoid addNum(int num) adds the integer num from the data stream to the data structure.\ndouble findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.\n\n \nExample 1:\n\nInput\n[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n[[], [1], [2], [], [3], []]\nOutput\n[null, null, null, 1.5, null, 2.0]\n\nExplanation\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0\n\n \nConstraints:\n\n-105 <= num <= 105\nThere will be at least one element in the data structure before calling findMedian.\nAt most 5 * 104 calls will be made to addNum and findMedian.\n\n \nFollow up:\n\nIf all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?\nIf 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?\n\n",
    "difficulty": "Hard",
    "examples": [
      "[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]",
      "[[],[1],[2],[],[3],[]]"
    ],
    "structured_test_cases": [],
    "python_starter": "class MedianFinder:\n\n    def __init__(self):\n        \n\n    def addNum(self, num: int) -> None:\n        \n\n    def findMedian(self) -> float:\n        \n\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder()\n# obj.addNum(num)\n# param_2 = obj.findMedian()",
    "hints": [],
    "meta_data": {
      "classname": "MedianFinder",
      "constructor": {
        "params": []
      },
      "methods": [
        {
          "params": [
            {
              "type": "integer",
              "name": "num"
            }
          ],
          "name": "addNum",
          "return": {
            "type": "void"
          }
        },
        {
          "params": [],
          "name": "findMedian",
          "return": {
            "type": "double"
          }
        }
      ],
      "return": {
        "type": "boolean"
      },
      "systemdesign": true
    }
  },
  "solution": {
    "code": "import heapq\n\nclass MedianFinder:\n\n    def __init__(self):\n        # Max-heap for the lower half\n        self.max_heap = []\n        # Min-heap for the upper half\n        self.min_heap = []\n\n    def addNum(self, num: int) -> None:\n        # Add to max-heap (lower half)\n        heapq.heappush(self.max_heap, -num)\n        \n        # Ensure the largest of the lower half is less than the smallest of the upper half\n        if (self.max_heap and self.min_heap and \n            (-self.max_heap[0] > self.min_heap[0])):\n            # Move the largest from max_heap to min_heap\n            heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))\n        \n        # Balance the sizes of the heaps\n        if len(self.max_heap) > len(self.min_heap) + 1:\n            # Move the largest from max_heap to min_heap\n            heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))\n        elif len(self.min_heap) > len(self.max_heap):\n            # Move the smallest from min_heap to max_heap\n            heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))\n\n    def findMedian(self) -> float:\n        if len(self.max_heap) > len(self.min_heap):\n            return float(-self.max_heap[0])\n        return (-self.max_heap[0] + self.min_heap[0]) / 2.0",
    "explanation": "The `MedianFinder` class uses two heaps to maintain the order of numbers and efficiently compute the median. \n\n1. **Initialization**: We initialize two heaps: `max_heap` for the lower half (simulated as a max-heap using negative values) and `min_heap` for the upper half.\n\n2. **Adding a Number**: \n   - We first push the number into the `max_heap` (the lower half).\n   - We then check if the largest number in the `max_heap` is greater than the smallest number in the `min_heap`. If it is, we move the largest from `max_heap` to `min_heap` to maintain the order.\n   - Finally, we balance the heaps to ensure that the size difference is at most 1.\n\n3. **Finding the Median**: \n   - If `max_heap` has more elements, the median is the root of `max_heap`.\n   - If both heaps are of equal size, the median is the average of the roots of both heaps.\n\n**Time Complexity**:\n- `addNum`: O(log n) due to the heap operations.\n- `findMedian`: O(1) since we are just accessing the roots of the heaps.\n\n**Space Complexity**: O(n) for storing the numbers in the heaps.\n\nThis solution is efficient and meets the problem's constraints, allowing for up to 50,000 calls to `addNum` and `findMedian`."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\nTraceback (most recent call last):\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmp7iivmkw_.py\", line 67, in <module>\n    expected_0 = safe_eval('[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]')\n                 ^^^^^^^^^\nNameError: name 'safe_eval' is not defined\n"
  },
  "timestamp": "2025-04-01 18:00:46"
}