{
  "problem": {
    "id": "122",
    "frontend_id": "122",
    "title": "Best Time to Buy and Sell Stock II",
    "description": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\nOn each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\nFind and return the maximum profit you can achieve.\n \nExample 1:\n\nInput: prices = [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7.\n\nExample 2:\n\nInput: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nTotal profit is 4.\n\nExample 3:\n\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\n\n \nConstraints:\n\n1 <= prices.length <= 3 * 104\n0 <= prices[i] <= 104\n\n",
    "difficulty": "Medium",
    "examples": [
      "[7,1,5,3,6,4]",
      "[1,2,3,4,5]",
      "[7,6,4,3,1]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "prices": "[7,1,5,3,6,4]"
        },
        "expected": "7"
      },
      {
        "input": {
          "prices": "[1,2,3,4,5]"
        },
        "expected": "4"
      },
      {
        "input": {
          "prices": "[7,6,4,3,1]"
        },
        "expected": "0"
      }
    ],
    "python_starter": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "maxProfit",
      "params": [
        {
          "name": "prices",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        total_profit = 0\n        \n        # Iterate through the prices\n        for i in range(1, len(prices)):\n            # If the price today is greater than the price yesterday\n            if prices[i] > prices[i - 1]:\n                # Add the difference to total profit\n                total_profit += prices[i] - prices[i - 1]\n        \n        return total_profit",
    "explanation": "The solution iterates through the list of stock prices starting from the second day. For each day, it checks if the price is higher than the previous day's price. If it is, the difference (profit) is added to the total profit. This way, we effectively capture all the profits from every upward price movement.\n\n### Time Complexity\nThe time complexity of this solution is O(n), where n is the number of days (length of the prices array). This is because we make a single pass through the list of prices.\n\n### Space Complexity\nThe space complexity is O(1) since we are using a constant amount of space for the `total_profit` variable, regardless of the input size.\n\nThis approach is efficient and straightforward, ensuring that we maximize our profit by taking advantage of every opportunity to buy low and sell high on consecutive days."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 7\nTest case 2:\n[PASS] Test passed: 4\nTest case 3:\n[PASS] Test passed: 0\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:36"
}