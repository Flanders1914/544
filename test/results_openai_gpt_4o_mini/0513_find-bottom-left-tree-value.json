{
  "problem": {
    "id": "513",
    "frontend_id": "513",
    "title": "Find Bottom Left Tree Value",
    "description": "Given the root of a binary tree, return the leftmost value in the last row of the tree.\n \nExample 1:\n\n\nInput: root = [2,1,3]\nOutput: 1\n\nExample 2:\n\n\nInput: root = [1,2,3,4,null,5,6,null,null,7]\nOutput: 7\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [1, 104].\n-231 <= Node.val <= 231 - 1\n\n",
    "difficulty": "Medium",
    "examples": [
      "[2,1,3]",
      "[1,2,3,4,null,5,6,null,null,7]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "root": "[2,1,3]"
        },
        "expected": "1"
      }
    ],
    "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "findBottomLeftValue",
      "params": [
        {
          "name": "root",
          "type": "TreeNode"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from collections import deque\nfrom typing import Optional\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:\n        # Initialize a queue for level order traversal\n        queue = deque([root])\n        leftmost_value = root.val  # Start with the root value\n        \n        while queue:\n            # Number of nodes at the current level\n            level_length = len(queue)\n            # Iterate through the current level\n            for i in range(level_length):\n                node = queue.popleft()\n                # If it's the first node of this level, update leftmost_value\n                if i == 0:\n                    leftmost_value = node.val\n                # Add the left child to the queue if it exists\n                if node.left:\n                    queue.append(node.left)\n                # Add the right child to the queue if it exists\n                if node.right:\n                    queue.append(node.right)\n        \n        return leftmost_value",
    "explanation": "The solution uses a breadth-first search (BFS) approach to traverse the binary tree level by level. We utilize a queue to keep track of the nodes at the current level. \n\n1. **Initialization**: We start by initializing a queue with the root node and set the `leftmost_value` to the root's value.\n\n2. **Level Order Traversal**: We enter a while loop that continues until the queue is empty. For each level, we determine the number of nodes (`level_length`) and iterate through each node at that level:\n   - For the first node of each level (when `i == 0`), we update `leftmost_value` to the current node's value.\n   - We enqueue the left and right children of the current node if they exist.\n\n3. **Return Value**: After processing all levels, the `leftmost_value` will contain the leftmost value of the last row of the tree, which we return.\n\n**Time Complexity**: O(N), where N is the number of nodes in the tree. We visit each node exactly once.\n\n**Space Complexity**: O(W), where W is the maximum width of the tree. In the worst case, the queue can hold all nodes at the last level, which is proportional to the width of the tree."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:01:21"
}