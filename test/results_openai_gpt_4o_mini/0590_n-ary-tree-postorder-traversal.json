{
  "problem": {
    "id": "776",
    "frontend_id": "590",
    "title": "N-ary Tree Postorder Traversal",
    "description": "Given the root of an n-ary tree, return the postorder traversal of its nodes' values.\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)\n \nExample 1:\n\n\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: [5,6,3,2,4,1]\n\nExample 2:\n\n\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [2,6,14,11,7,3,12,8,4,13,9,10,5,1]\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 104].\n0 <= Node.val <= 104\nThe height of the n-ary tree is less than or equal to 1000.\n\n \nFollow up: Recursive solution is trivial, could you do it iteratively?\n",
    "difficulty": "Easy",
    "examples": [
      "[1,null,3,2,4,null,5,6]",
      "[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "root": "[1,null,3,2,4,null,5,6]"
        },
        "expected": "[5,6,3,2,4,1]"
      }
    ],
    "python_starter": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val: Optional[int] = None, children: Optional[List['Node']] = None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution:\n    def postorder(self, root: 'Node') -> List[int]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "postorder",
      "params": [
        {
          "name": "root",
          "type": "integer"
        }
      ],
      "return": {
        "type": "list<integer>"
      },
      "languages": [
        "cpp",
        "java",
        "python",
        "csharp",
        "javascript",
        "python3",
        "golang",
        "ruby",
        "c",
        "kotlin",
        "scala",
        "php",
        "swift",
        "typescript"
      ],
      "manual": true,
      "typescriptCustomType": "class _Node {\n    val: number\n    children: _Node[]\n    \n    constructor(v: number) {\n        this.val = v;\n        this.children = [];\n    }\n}"
    }
  },
  "solution": {
    "code": "# Definition for a Node.\nclass Node:\n    def __init__(self, val: Optional[int] = None, children: Optional[List['Node']] = None):\n        self.val = val\n        self.children = children if children is not None else []\n\nclass Solution:\n    def postorder(self, root: 'Node') -> List[int]:\n        if not root:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)  # Add the node's value to the result\n            # Push all children to the stack\n            for child in node.children:\n                stack.append(child)\n        \n        # Reverse the result to get postorder\n        return result[::-1]",
    "explanation": "The provided solution implements an iterative postorder traversal of an N-ary tree using a stack. \n\n1. **Initialization**: We check if the root is `None`. If it is, we return an empty list. Otherwise, we initialize a stack with the root node and an empty result list.\n\n2. **Traversal**: We enter a loop that continues until the stack is empty. In each iteration, we:\n   - Pop the top node from the stack.\n   - Append its value to the result list.\n   - Push all of its children onto the stack. This ensures that we will process the children before the parent node.\n\n3. **Postorder Adjustment**: Since we are adding nodes to the result list in a pre-order manner (parent before children), we reverse the result list at the end to achieve the correct postorder sequence.\n\n**Time Complexity**: The time complexity of this solution is O(N), where N is the number of nodes in the tree. Each node is processed exactly once.\n\n**Space Complexity**: The space complexity is O(H) for the stack, where H is the height of the tree. In the worst case (a skewed tree), this could be O(N), but in a balanced tree, it would be O(log N).\n\nThis solution efficiently handles the constraints provided and adheres to the requirements of the problem."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:01:27"
}