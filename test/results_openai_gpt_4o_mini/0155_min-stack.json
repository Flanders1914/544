{
  "problem": {
    "id": "155",
    "frontend_id": "155",
    "title": "Min Stack",
    "description": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\nImplement the MinStack class:\n\nMinStack() initializes the stack object.\nvoid push(int val) pushes the element val onto the stack.\nvoid pop() removes the element on the top of the stack.\nint top() gets the top element of the stack.\nint getMin() retrieves the minimum element in the stack.\n\nYou must implement a solution with O(1) time complexity for each function.\n \nExample 1:\n\nInput\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]\n\nOutput\n[null,null,null,null,-3,null,0,-2]\n\nExplanation\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n\n \nConstraints:\n\n-231 <= val <= 231 - 1\nMethods pop, top and getMin operations will always be called on non-empty stacks.\nAt most 3 * 104 calls will be made to push, pop, top, and getMin.\n\n",
    "difficulty": "Medium",
    "examples": [
      "[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]",
      "[[],[-2],[0],[-3],[],[],[],[]]"
    ],
    "structured_test_cases": [],
    "python_starter": "class MinStack:\n\n    def __init__(self):\n        \n\n    def push(self, val: int) -> None:\n        \n\n    def pop(self) -> None:\n        \n\n    def top(self) -> int:\n        \n\n    def getMin(self) -> int:\n        \n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()",
    "hints": [
      "Consider each node in the stack having a minimum value. (Credits to @aakarshmadhavan)"
    ],
    "meta_data": {
      "classname": "MinStack",
      "constructor": {
        "params": []
      },
      "methods": [
        {
          "params": [
            {
              "type": "integer",
              "name": "val"
            }
          ],
          "return": {
            "type": "void"
          },
          "name": "push"
        },
        {
          "params": [],
          "return": {
            "type": "void"
          },
          "name": "pop"
        },
        {
          "params": [],
          "return": {
            "type": "integer"
          },
          "name": "top"
        },
        {
          "params": [],
          "return": {
            "type": "integer"
          },
          "name": "getMin"
        }
      ],
      "return": {
        "type": "boolean"
      },
      "systemdesign": true
    }
  },
  "solution": {
    "code": "class MinStack:\n\n    def __init__(self):\n        # Initialize the main stack and the min stack\n        self.stack = []\n        self.min_stack = []\n\n    def push(self, val: int) -> None:\n        # Push the value onto the main stack\n        self.stack.append(val)\n        # If the min stack is empty or the new value is less than or equal to the current minimum, push it onto the min stack\n        if not self.min_stack or val <= self.min_stack[-1]:\n            self.min_stack.append(val)\n\n    def pop(self) -> None:\n        # Pop the value from the main stack\n        if self.stack:\n            val = self.stack.pop()\n            # If the popped value is the same as the current minimum, pop it from the min stack as well\n            if val == self.min_stack[-1]:\n                self.min_stack.pop()\n\n    def top(self) -> int:\n        # Return the top element of the main stack\n        return self.stack[-1] if self.stack else None\n\n    def getMin(self) -> int:\n        # Return the top element of the min stack, which is the minimum value\n        return self.min_stack[-1] if self.min_stack else None\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()",
    "explanation": "The `MinStack` class is designed to efficiently manage a stack while keeping track of the minimum value at all times. \n\n1. **Initialization**: We create two lists, `stack` for storing the actual values and `min_stack` for tracking the minimum values.\n\n2. **Push Operation**: When we push a value, we add it to `stack`. If `min_stack` is empty or the new value is less than or equal to the current minimum (the last element of `min_stack`), we also push it onto `min_stack`.\n\n3. **Pop Operation**: When we pop a value, we remove it from `stack`. If this value is equal to the top of `min_stack`, we also pop from `min_stack`, ensuring that the minimum value is always correctly updated.\n\n4. **Top Operation**: This simply returns the last element of `stack`, which is the top of the stack.\n\n5. **GetMin Operation**: This returns the last element of `min_stack`, which is the minimum value in the stack.\n\n**Time Complexity**: All operations (push, pop, top, getMin) run in O(1) time.\n\n**Space Complexity**: The space complexity is O(n) in the worst case, where n is the number of elements in the stack, as we may need to store all elements in both stacks.\n\nThis implementation efficiently meets the problem's requirements and constraints."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\nTraceback (most recent call last):\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmp14p22uuo.py\", line 71, in <module>\n    expected_0 = safe_eval('[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]')\n                 ^^^^^^^^^\nNameError: name 'safe_eval' is not defined\n"
  },
  "timestamp": "2025-04-01 18:00:39"
}