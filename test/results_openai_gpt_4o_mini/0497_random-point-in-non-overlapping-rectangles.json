{
  "problem": {
    "id": "914",
    "frontend_id": "497",
    "title": "Random Point in Non-overlapping Rectangles",
    "description": "You are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.\nAny integer point inside the space covered by one of the given rectangles should be equally likely to be returned.\nNote that an integer point is a point that has integer coordinates.\nImplement the Solution class:\n\nSolution(int[][] rects) Initializes the object with the given rectangles rects.\nint[] pick() Returns a random integer point [u, v] inside the space covered by one of the given rectangles.\n\n \nExample 1:\n\n\nInput\n[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]\nOutput\n[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]\n\nExplanation\nSolution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);\nsolution.pick(); // return [1, -2]\nsolution.pick(); // return [1, -1]\nsolution.pick(); // return [-1, -2]\nsolution.pick(); // return [-2, -2]\nsolution.pick(); // return [0, 0]\n\n \nConstraints:\n\n1 <= rects.length <= 100\nrects[i].length == 4\n-109 <= ai < xi <= 109\n-109 <= bi < yi <= 109\nxi - ai <= 2000\nyi - bi <= 2000\nAll the rectangles do not overlap.\nAt most 104 calls will be made to pick.\n\n",
    "difficulty": "Medium",
    "examples": [
      "[\"Solution\",\"pick\",\"pick\",\"pick\",\"pick\",\"pick\"]",
      "[[[[-2,-2,1,1],[2,2,4,6]]],[],[],[],[],[]]"
    ],
    "structured_test_cases": [],
    "python_starter": "class Solution:\n\n    def __init__(self, rects: List[List[int]]):\n        \n\n    def pick(self) -> List[int]:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(rects)\n# param_1 = obj.pick()",
    "hints": [],
    "meta_data": {
      "classname": "Solution",
      "maxbytesperline": 200000,
      "constructor": {
        "params": [
          {
            "name": "rects",
            "type": "integer[][]"
          },
          {
            "type": "integer",
            "name": "rectsSize",
            "lang": "c",
            "value": "size_1"
          }
        ]
      },
      "methods": [
        {
          "name": "pick",
          "params": [],
          "return": {
            "type": "integer[]"
          }
        }
      ],
      "systemdesign": true,
      "params": [
        {
          "name": "inputs",
          "type": "integer[]"
        },
        {
          "name": "inputs",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "list<String>",
        "dealloc": true
      }
    }
  },
  "solution": {
    "code": "import random\nfrom typing import List\n\nclass Solution:\n\n    def __init__(self, rects: List[List[int]]):\n        self.rects = rects\n        self.prefix_sum = []\n        total_area = 0\n        \n        # Calculate areas and prefix sums\n        for rect in rects:\n            a, b, x, y = rect\n            area = (x - a) * (y - b)\n            total_area += area\n            self.prefix_sum.append(total_area)\n\n        self.total_area = total_area\n\n    def pick(self) -> List[int]:\n        # Pick a random point in the total area\n        target = random.randint(0, self.total_area - 1)\n        \n        # Binary search to find the rectangle\n        low, high = 0, len(self.prefix_sum) - 1\n        while low < high:\n            mid = (low + high) // 2\n            if self.prefix_sum[mid] <= target:\n                low = mid + 1\n            else:\n                high = mid\n        \n        # Now low is the index of the rectangle to pick from\n        rect = self.rects[low]\n        a, b, x, y = rect\n        \n        # Generate a random point within the selected rectangle\n        random_x = random.randint(a, x)\n        random_y = random.randint(b, y)\n        \n        return [random_x, random_y]",
    "explanation": "The solution involves several key steps:\n\n1. **Initialization**: In the `__init__` method, we calculate the area of each rectangle and maintain a prefix sum array that allows us to quickly determine the cumulative area up to each rectangle. This helps in efficiently selecting a rectangle based on a random number.\n\n2. **Random Point Selection**: The `pick` method generates a random integer within the total area of all rectangles. It then uses binary search on the prefix sum array to find out which rectangle corresponds to this random number. \n\n3. **Point Generation**: Once the rectangle is identified, we generate a random integer for both x and y coordinates within the bounds of that rectangle. The `random.randint(a, x)` function ensures that the point can be on the perimeter as well.\n\n**Time Complexity**: The initialization takes O(n) time to compute areas and prefix sums, where n is the number of rectangles. The `pick` method runs in O(log n) time due to the binary search, making it efficient for multiple calls.\n\n**Space Complexity**: The space complexity is O(n) for storing the prefix sums.\n\nThis approach is efficient and meets the problem's constraints, allowing for up to 10,000 calls to `pick` without performance issues."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\nTraceback (most recent call last):\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmp5nyvg163.py\", line 68, in <module>\n    solution = Solution()\n               ^^^^^^^^^^\nTypeError: Solution.__init__() missing 1 required positional argument: 'rects'\n"
  },
  "timestamp": "2025-04-01 18:01:20"
}