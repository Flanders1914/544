{
  "problem": {
    "id": "153",
    "frontend_id": "153",
    "title": "Find Minimum in Rotated Sorted Array",
    "description": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n\n[4,5,6,7,0,1,2] if it was rotated 4 times.\n[0,1,2,4,5,6,7] if it was rotated 7 times.\n\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\nGiven the sorted rotated array nums of unique elements, return the minimum element of this array.\nYou must write an algorithm that runs in O(log n) time.\n \nExample 1:\n\nInput: nums = [3,4,5,1,2]\nOutput: 1\nExplanation: The original array was [1,2,3,4,5] rotated 3 times.\n\nExample 2:\n\nInput: nums = [4,5,6,7,0,1,2]\nOutput: 0\nExplanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n\nExample 3:\n\nInput: nums = [11,13,15,17]\nOutput: 11\nExplanation: The original array was [11,13,15,17] and it was rotated 4 times. \n\n \nConstraints:\n\nn == nums.length\n1 <= n <= 5000\n-5000 <= nums[i] <= 5000\nAll the integers of nums are unique.\nnums is sorted and rotated between 1 and n times.\n\n",
    "difficulty": "Medium",
    "examples": [
      "[3,4,5,1,2]",
      "[4,5,6,7,0,1,2]",
      "[11,13,15,17]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[3,4,5,1,2]"
        },
        "expected": "1"
      },
      {
        "input": {
          "nums": "[4,5,6,7,0,1,2]"
        },
        "expected": "0"
      },
      {
        "input": {
          "nums": "[11,13,15,17]"
        },
        "expected": "11"
      }
    ],
    "python_starter": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        ",
    "hints": [
      "Array was originally in ascending order. Now that the array is rotated, there would be a point in the array where there is a small deflection from the increasing sequence. eg. The array would be something like [4, 5, 6, 7, 0, 1, 2].",
      "You can divide the search space into two and see which direction to go.\r\nCan you think of an algorithm which has O(logN) search complexity?",
      "<ol>\r\n<li>All the elements to the left of inflection point > first element of the array.</li>\r\n<li>All the elements to the right of inflection point < first element of the array.</li>\r\n<ol>"
    ],
    "meta_data": {
      "name": "findMin",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            # If mid element is greater than rightmost element,\n            # the minimum must be in the right half.\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                # Otherwise, the minimum is in the left half (including mid).\n                right = mid\n        \n        # When left == right, we have found the minimum element.\n        return nums[left]",
    "explanation": "The provided solution uses a binary search algorithm to efficiently find the minimum element in a rotated sorted array. The algorithm operates as follows:\n\n1. **Initialization**: We set two pointers, `left` and `right`, to the start and end of the array, respectively.\n\n2. **Binary Search Loop**: We enter a loop that continues until `left` is no longer less than `right`. Inside the loop:\n   - We calculate the middle index `mid`.\n   - We compare the middle element `nums[mid]` with the rightmost element `nums[right]`.\n     - If `nums[mid]` is greater than `nums[right]`, it indicates that the minimum element must be in the right half of the array (since the left half is sorted and cannot contain the minimum). Therefore, we move the `left` pointer to `mid + 1`.\n     - If `nums[mid]` is less than or equal to `nums[right]`, it indicates that the minimum element is in the left half (including `mid`). Thus, we move the `right` pointer to `mid`.\n\n3. **Termination**: The loop continues until `left` equals `right`, at which point we have narrowed down to the minimum element, which is `nums[left]`.\n\n**Time Complexity**: O(log n) due to the binary search approach, which halves the search space with each iteration.\n\n**Space Complexity**: O(1) since we are using a constant amount of space for the pointers and do not require any additional data structures.\n\nThis solution is efficient and meets the problem's constraints, ensuring that we can handle the maximum input size effectively."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 1\nTest case 2:\n[PASS] Test passed: 0\nTest case 3:\n[PASS] Test passed: 11\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:39"
}