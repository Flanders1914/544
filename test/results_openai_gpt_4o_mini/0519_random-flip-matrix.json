{
  "problem": {
    "id": "913",
    "frontend_id": "519",
    "title": "Random Flip Matrix",
    "description": "There is an m x n binary grid matrix with all the values set 0 initially. Design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. All the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned.\nOptimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity.\nImplement the Solution class:\n\nSolution(int m, int n) Initializes the object with the size of the binary matrix m and n.\nint[] flip() Returns a random index [i, j] of the matrix where matrix[i][j] == 0 and flips it to 1.\nvoid reset() Resets all the values of the matrix to be 0.\n\n \nExample 1:\n\nInput\n[\"Solution\", \"flip\", \"flip\", \"flip\", \"reset\", \"flip\"]\n[[3, 1], [], [], [], [], []]\nOutput\n[null, [1, 0], [2, 0], [0, 0], null, [2, 0]]\n\nExplanation\nSolution solution = new Solution(3, 1);\nsolution.flip();  // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\nsolution.flip();  // return [2, 0], Since [1,0] was returned, [2,0] and [0,0]\nsolution.flip();  // return [0, 0], Based on the previously returned indices, only [0,0] can be returned.\nsolution.reset(); // All the values are reset to 0 and can be returned.\nsolution.flip();  // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\n\n \nConstraints:\n\n1 <= m, n <= 104\nThere will be at least one free cell for each call to flip.\nAt most 1000 calls will be made to flip and reset.\n\n",
    "difficulty": "Medium",
    "examples": [
      "[\"Solution\",\"flip\",\"flip\",\"flip\",\"reset\",\"flip\"]",
      "[[3,1],[],[],[],[],[]]"
    ],
    "structured_test_cases": [],
    "python_starter": "class Solution:\n\n    def __init__(self, m: int, n: int):\n        \n\n    def flip(self) -> List[int]:\n        \n\n    def reset(self) -> None:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(m, n)\n# param_1 = obj.flip()\n# obj.reset()",
    "hints": [],
    "meta_data": {
      "classname": "Solution",
      "maxbytesperline": 200000,
      "constructor": {
        "params": [
          {
            "name": "m",
            "type": "integer"
          },
          {
            "name": "n",
            "type": "integer"
          }
        ]
      },
      "methods": [
        {
          "name": "flip",
          "params": [],
          "return": {
            "type": "integer[]"
          }
        },
        {
          "name": "reset",
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "systemdesign": true,
      "params": [
        {
          "name": "inputs",
          "type": "integer[]"
        },
        {
          "name": "inputs",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "list<String>",
        "dealloc": true
      }
    }
  },
  "solution": {
    "code": "import random\nfrom typing import List\n\nclass Solution:\n\n    def __init__(self, m: int, n: int):\n        self.m = m\n        self.n = n\n        self.available = [(i, j) for i in range(m) for j in range(n)]\n        self.flipped = set()\n\n    def flip(self) -> List[int]:\n        # Select a random index from the available list\n        index = random.randint(0, len(self.available) - 1)\n        # Get the cell to flip\n        cell = self.available[index]\n        # Remove the cell from available cells\n        self.available[index] = self.available[-1]  # Move the last element to the index\n        self.available.pop()  # Remove the last element\n        self.flipped.add(cell)  # Mark this cell as flipped\n        return list(cell)\n\n    def reset(self) -> None:\n        # Reset the available cells and flipped set\n        self.available = [(i, j) for i in range(self.m) for j in range(self.n)]\n        self.flipped.clear()",
    "explanation": "The solution implements a class `Solution` that manages a binary matrix of size `m x n`. \n\n1. **Initialization**: The constructor initializes the matrix dimensions and creates a list of all possible cell indices. It also initializes a set to keep track of flipped cells.\n\n2. **Flipping a Cell**: The `flip` method randomly selects an index from the `available` list, retrieves the corresponding cell, and then removes that cell from the list to ensure it cannot be selected again. The selected cell is added to the `flipped` set.\n\n3. **Resetting the Matrix**: The `reset` method reinitializes the `available` list to include all cells again and clears the `flipped` set.\n\n**Time Complexity**:\n- `__init__`: O(m * n) for creating the list of available cells.\n- `flip`: O(1) on average for selecting and removing a cell.\n- `reset`: O(m * n) for reinitializing the available cells.\n\n**Space Complexity**: O(m * n) for storing the list of available cells.\n\nThis solution efficiently handles the requirements of the problem while ensuring that all operations are performed in a timely manner."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\nTraceback (most recent call last):\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpxvsi6enk.py\", line 53, in <module>\n    solution = Solution()\n               ^^^^^^^^^^\nTypeError: Solution.__init__() missing 2 required positional arguments: 'm' and 'n'\n"
  },
  "timestamp": "2025-04-01 18:01:22"
}