{
  "problem": {
    "id": "33",
    "frontend_id": "33",
    "title": "Search in Rotated Sorted Array",
    "description": "There is an integer array nums sorted in ascending order (with distinct values).\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\nYou must write an algorithm with O(log n) runtime complexity.\n \nExample 1:\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\nExample 2:\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\nExample 3:\nInput: nums = [1], target = 0\nOutput: -1\n\n \nConstraints:\n\n1 <= nums.length <= 5000\n-104 <= nums[i] <= 104\nAll values of nums are unique.\nnums is an ascending array that is possibly rotated.\n-104 <= target <= 104\n\n",
    "difficulty": "Medium",
    "examples": [
      "[4,5,6,7,0,1,2]",
      "0",
      "[4,5,6,7,0,1,2]",
      "3",
      "[1]",
      "0"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[4,5,6,7,0,1,2]",
          "target": "0"
        },
        "expected": "4"
      }
    ],
    "python_starter": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "search",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "target",
          "type": "integer"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        left, right = 0, len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            # Check if we found the target\n            if nums[mid] == target:\n                return mid\n            \n            # Determine which side is sorted\n            if nums[left] <= nums[mid]:  # Left side is sorted\n                if nums[left] <= target < nums[mid]:  # Target is in the left side\n                    right = mid - 1\n                else:  # Target is in the right side\n                    left = mid + 1\n            else:  # Right side is sorted\n                if nums[mid] < target <= nums[right]:  # Target is in the right side\n                    left = mid + 1\n                else:  # Target is in the left side\n                    right = mid - 1\n        \n        return -1  # Target not found",
    "explanation": "The solution uses a binary search approach to efficiently find the target in a rotated sorted array. \n\n1. **Initialization**: We start with two pointers, `left` and `right`, which represent the current search boundaries.\n\n2. **Binary Search Loop**: We continue the search while `left` is less than or equal to `right`. In each iteration, we calculate the middle index `mid`.\n\n3. **Target Check**: If the element at `mid` is equal to the target, we return `mid`.\n\n4. **Identifying Sorted Halves**: We check if the left half (from `left` to `mid`) is sorted. If it is, we check if the target lies within this range. If it does, we adjust the `right` pointer to search in the left half; otherwise, we search in the right half. If the left half is not sorted, then the right half must be sorted, and we perform similar checks.\n\n5. **Return Value**: If the target is not found after the loop, we return -1.\n\n**Time Complexity**: O(log n) due to the binary search approach.\n\n**Space Complexity**: O(1) since we are using a constant amount of space for pointers.\n\nThis method efficiently narrows down the search space, making it suitable for large arrays up to the maximum constraint of 5000 elements."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 4\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:28"
}