{
  "problem": {
    "id": "389",
    "frontend_id": "389",
    "title": "Find the Difference",
    "description": "You are given two strings s and t.\nString t is generated by random shuffling string s and then add one more letter at a random position.\nReturn the letter that was added to t.\n \nExample 1:\n\nInput: s = \"abcd\", t = \"abcde\"\nOutput: \"e\"\nExplanation: 'e' is the letter that was added.\n\nExample 2:\n\nInput: s = \"\", t = \"y\"\nOutput: \"y\"\n\n \nConstraints:\n\n0 <= s.length <= 1000\nt.length == s.length + 1\ns and t consist of lowercase English letters.\n\n",
    "difficulty": "Easy",
    "examples": [
      "\"abcd\"",
      "\"abcde\"",
      "\"\"",
      "\"y\""
    ],
    "structured_test_cases": [
      {
        "input": {
          "s": "\"abcd\"",
          "t": "\"abcde\""
        },
        "expected": "e"
      },
      {
        "input": {
          "s": "\"\"",
          "t": "\"y\""
        },
        "expected": "y"
      }
    ],
    "python_starter": "class Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n        ",
    "hints": [],
    "meta_data": {
      "name": "findTheDifference",
      "params": [
        {
          "name": "s",
          "type": "string"
        },
        {
          "name": "t",
          "type": "string"
        }
      ],
      "return": {
        "type": "character"
      }
    }
  },
  "solution": {
    "code": "from collections import Counter\n\nclass Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n        # Count the frequency of each character in both strings\n        count_s = Counter(s)\n        count_t = Counter(t)\n        \n        # Find the character that has a different count in t compared to s\n        for char in count_t:\n            if count_t[char] != count_s.get(char, 0):\n                return char",
    "explanation": "The solution uses the `Counter` from the `collections` module to count the occurrences of each character in both strings `s` and `t`. \n\n1. We create two counters: `count_s` for string `s` and `count_t` for string `t`.\n2. We then iterate through each character in `count_t`. For each character, we check if its count in `count_t` is different from its count in `count_s`. \n3. Since `t` has one additional character, there will be exactly one character in `count_t` that has a count greater than in `count_s`. This character is returned as the result.\n\nThe time complexity of this solution is O(n), where n is the length of string `s`, because we are counting characters in both strings. The space complexity is O(1) since the maximum number of unique characters (lowercase English letters) is constant (26)."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: e\nTest case 2:\n[PASS] Test passed: y\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:52"
}