{
  "problem": {
    "id": "47",
    "frontend_id": "47",
    "title": "Permutations II",
    "description": "Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\n \nExample 1:\n\nInput: nums = [1,1,2]\nOutput:\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n\nExample 2:\n\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n\n \nConstraints:\n\n1 <= nums.length <= 8\n-10 <= nums[i] <= 10\n\n",
    "difficulty": "Medium",
    "examples": [
      "[1,1,2]",
      "[1,2,3]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[1,1,2]"
        },
        "expected": "[[1,1,2]"
      }
    ],
    "python_starter": "class Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "permuteUnique",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "list<list<integer>>",
        "colsize": "size_1",
        "dealloc": true
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        # Sort the numbers to handle duplicates\n        nums.sort()\n        result = []\n        used = [False] * len(nums)\n        \n        def backtrack(current_permutation):\n            # If the current permutation is the same length as nums, we found a valid permutation\n            if len(current_permutation) == len(nums):\n                result.append(current_permutation[:])  # Append a copy of the current permutation\n                return\n            \n            for i in range(len(nums)):\n                # Skip used elements\n                if used[i]:\n                    continue\n                # Skip duplicates\n                if i > 0 and nums[i] == nums[i - 1] and not used[i - 1]:\n                    continue\n                \n                # Include nums[i] in the current permutation\n                used[i] = True\n                current_permutation.append(nums[i])\n                \n                # Recurse\n                backtrack(current_permutation)\n                \n                # Backtrack\n                used[i] = False\n                current_permutation.pop()\n        \n        backtrack([])\n        return result",
    "explanation": "The provided solution uses a backtracking algorithm to generate all unique permutations of the input list `nums`. Here's a breakdown of how it works:\n\n1. **Sorting**: The input list is sorted to facilitate the skipping of duplicates. This is crucial because it allows us to easily identify when we encounter a duplicate number.\n\n2. **Backtracking Function**: The `backtrack` function is defined to build permutations recursively. It takes the current permutation as an argument.\n\n3. **Base Case**: When the length of the current permutation matches the length of `nums`, it indicates that a complete permutation has been formed, and we add a copy of it to the results.\n\n4. **Looping Through Elements**: For each element in `nums`, we check if it has already been used in the current permutation. If it has, we skip it. If it is a duplicate (i.e., the same as the previous element) and the previous element was not used, we also skip it to avoid generating duplicate permutations.\n\n5. **Recursive Calls**: If the current element is valid to use, we mark it as used, add it to the current permutation, and make a recursive call to continue building the permutation.\n\n6. **Backtracking**: After the recursive call, we backtrack by marking the element as unused and removing it from the current permutation.\n\n**Time Complexity**: The time complexity is O(n * n!), where n is the length of the input list. This is because we generate n! permutations, and each permutation takes O(n) time to construct.\n\n**Space Complexity**: The space complexity is O(n) for the recursion stack and the space used to store the result.\n\nOverall, this approach efficiently generates all unique permutations while handling duplicates correctly."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpyu95po86.py\", line 74\n    expected_0 = [[1,1,2]\n                 ^\nSyntaxError: '[' was never closed\n"
  },
  "timestamp": "2025-04-01 18:00:29"
}