{
  "problem": {
    "id": "202",
    "frontend_id": "202",
    "title": "Happy Number",
    "description": "Write an algorithm to determine if a number n is happy.\nA happy number is a number defined by the following process:\n\nStarting with any positive integer, replace the number by the sum of the squares of its digits.\nRepeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\nThose numbers for which this process ends in 1 are happy.\n\nReturn true if n is a happy number, and false if not.\n \nExample 1:\n\nInput: n = 19\nOutput: true\nExplanation:\n12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1\n\nExample 2:\n\nInput: n = 2\nOutput: false\n\n \nConstraints:\n\n1 <= n <= 231 - 1\n\n",
    "difficulty": "Easy",
    "examples": [
      "19",
      "2"
    ],
    "structured_test_cases": [
      {
        "input": {
          "n": "19"
        },
        "expected": "true"
      },
      {
        "input": {
          "n": "2"
        },
        "expected": "false"
      }
    ],
    "python_starter": "class Solution:\n    def isHappy(self, n: int) -> bool:\n        ",
    "hints": [],
    "meta_data": {
      "name": "isHappy",
      "params": [
        {
          "name": "n",
          "type": "integer"
        }
      ],
      "return": {
        "type": "boolean"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def isHappy(self, n: int) -> bool:\n        def get_next(number):\n            total_sum = 0\n            while number > 0:\n                digit = number % 10\n                total_sum += digit ** 2\n                number //= 10\n            return total_sum\n        \n        seen = set()\n        while n != 1 and n not in seen:\n            seen.add(n)\n            n = get_next(n)\n        \n        return n == 1",
    "explanation": "The solution uses a helper function `get_next` to compute the sum of the squares of the digits of a given number. The main function `isHappy` maintains a set called `seen` to track numbers that have already been processed. \n\n1. We start with the input number `n`.\n2. In a loop, we check if `n` is equal to 1 (in which case we return `True`) or if `n` has already been seen (in which case we return `False`).\n3. If neither condition is met, we add `n` to the `seen` set and update `n` to the result of `get_next(n)`.\n4. The loop continues until we either find that `n` is 1 or we detect a cycle.\n\nThe time complexity of this solution is O(log n) for each iteration of the loop, where n is the number of digits in the number. Since the maximum number of digits in the worst case is limited, the overall complexity can be considered O(k), where k is the number of unique numbers we can encounter before either reaching 1 or entering a cycle. The space complexity is O(k) as well, due to the storage of seen numbers in the set."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: True\nTest case 2:\n[PASS] Test passed: False\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:41"
}