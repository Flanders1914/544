{
  "problem": {
    "id": "138",
    "frontend_id": "138",
    "title": "Copy List with Random Pointer",
    "description": "A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\nConstruct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\nFor example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\nReturn the head of the copied linked list.\nThe linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\n\nval: an integer representing Node.val\nrandom_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.\n\nYour code will only be given the head of the original linked list.\n \nExample 1:\n\n\nInput: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\nOutput: [[7,null],[13,0],[11,4],[10,2],[1,0]]\n\nExample 2:\n\n\nInput: head = [[1,1],[2,1]]\nOutput: [[1,1],[2,1]]\n\nExample 3:\n\n\nInput: head = [[3,null],[3,0],[3,null]]\nOutput: [[3,null],[3,0],[3,null]]\n\n \nConstraints:\n\n0 <= n <= 1000\n-104 <= Node.val <= 104\nNode.random is null or is pointing to some node in the linked list.\n\n",
    "difficulty": "Medium",
    "examples": [
      "[[7,null],[13,0],[11,4],[10,2],[1,0]]",
      "[[1,1],[2,1]]",
      "[[3,null],[3,0],[3,null]]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "head": "[[7,null]"
        },
        "expected": "[[7,null]"
      }
    ],
    "python_starter": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n\"\"\"\n\nclass Solution:\n    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':\n        ",
    "hints": [
      "Just iterate the linked list and create copies of the nodes on the go. Since a node can be referenced from multiple nodes due to the random pointers, ensure you are not making multiple copies of the same node.",
      "You may want to use extra space to keep old_node ---> new_node mapping to prevent creating multiple copies of the same node.",
      "We can avoid using extra space for old_node ---> new_node mapping by tweaking the original linked list. Simply interweave the nodes of the old and copied list. For example:\r\nOld List: A --> B --> C --> D\r\nInterWeaved List: A --> A' --> B --> B' --> C --> C' --> D --> D'",
      "The interweaving is done using next</b> pointers and we can make use of interweaved structure to get the correct reference nodes for random</b> pointers."
    ],
    "meta_data": {
      "name": "copyRandomList",
      "params": [
        {
          "name": "head",
          "type": "ListNode"
        }
      ],
      "return": {
        "type": "ListNode"
      },
      "languages": [
        "cpp",
        "java",
        "python",
        "csharp",
        "javascript",
        "python3",
        "golang",
        "swift",
        "kotlin",
        "ruby",
        "c",
        "scala",
        "php",
        "typescript"
      ],
      "manual": true,
      "typescriptCustomType": "class _Node {\n    val: number\n    next: _Node | null\n    random: _Node | null\n\n    constructor(val?: number, next?: _Node, random?: _Node) {\n        this.val = (val===undefined ? 0 : val)\n        this.next = (next===undefined ? null : next)\n        this.random = (random===undefined ? null : random)\n    }\n}\n"
    }
  },
  "solution": {
    "code": "# Definition for a Node.\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n\nclass Solution:\n    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':\n        if not head:\n            return None\n        \n        # Step 1: Clone nodes and insert them into the original list\n        current = head\n        while current:\n            new_node = Node(current.val)\n            new_node.next = current.next\n            current.next = new_node\n            current = new_node.next\n        \n        # Step 2: Set the random pointers for the new nodes\n        current = head\n        while current:\n            if current.random:\n                current.next.random = current.random.next\n            current = current.next.next\n        \n        # Step 3: Separate the original list and the copied list\n        current = head\n        new_head = head.next\n        copy_current = new_head\n        \n        while current:\n            current.next = copy_current.next\n            current = current.next\n            if copy_current.next:\n                copy_current.next = current.next\n                copy_current = copy_current.next\n        \n        return new_head",
    "explanation": "The solution involves three main steps, as outlined in the reasoning:\n\n1. **Cloning Nodes**: We iterate through the original linked list. For each node, we create a new node with the same value and insert it right after the original node. This allows us to maintain the order of nodes while also making it easy to set up the `next` pointers later.\n\n2. **Setting Random Pointers**: In the second pass, we set the `random` pointers for the newly created nodes. Since each new node is directly after its corresponding original node, we can access the new node corresponding to an original node's `random` pointer by using `current.random.next`.\n\n3. **Separating the Lists**: In the final step, we restore the original list by adjusting the `next` pointers of the original nodes and simultaneously build the new list by linking the copied nodes together.\n\n**Time Complexity**: The algorithm runs in O(n) time, where n is the number of nodes in the linked list, as we traverse the list a constant number of times.\n\n**Space Complexity**: The space complexity is O(1) if we disregard the space used by the new nodes, as we are only using a few pointers for traversal. The new nodes themselves take O(n) space, which is necessary for the deep copy.\n\nOverall, this approach efficiently creates a deep copy of the linked list with random pointers while maintaining the structure and relationships of the original list."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpe4w6ozqs.py\", line 76\n    input_0_0 = [[7,null]\n                 ^^^^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n"
  },
  "timestamp": "2025-04-01 18:00:37"
}