{
  "problem": {
    "id": "561",
    "frontend_id": "561",
    "title": "Array Partition",
    "description": "Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.\n \nExample 1:\n\nInput: nums = [1,4,3,2]\nOutput: 4\nExplanation: All possible pairings (ignoring the ordering of elements) are:\n1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3\n2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3\n3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4\nSo the maximum possible sum is 4.\nExample 2:\n\nInput: nums = [6,2,6,5,1,2]\nOutput: 9\nExplanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.\n\n \nConstraints:\n\n1 <= n <= 104\nnums.length == 2 * n\n-104 <= nums[i] <= 104\n\n",
    "difficulty": "Easy",
    "examples": [
      "[1,4,3,2]",
      "[6,2,6,5,1,2]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[1,4,3,2]"
        },
        "expected": "4"
      },
      {
        "input": {
          "nums": "[6,2,6,5,1,2]"
        },
        "expected": "9"
      }
    ],
    "python_starter": "class Solution:\n    def arrayPairSum(self, nums: List[int]) -> int:\n        ",
    "hints": [
      "Obviously, brute force won't help here. Think of something else, take some example like 1,2,3,4.",
      "How will you make pairs to get the result? There must be some pattern.",
      "Did you observe that- Minimum element gets add into the result in sacrifice of maximum element.",
      "Still won't able to find pairs? Sort the array and try to find the pattern."
    ],
    "meta_data": {
      "name": "arrayPairSum",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def arrayPairSum(self, nums: List[int]) -> int:\n        # Sort the array\n        nums.sort()\n        # Initialize the sum\n        max_sum = 0\n        # Sum every second element starting from the first\n        for i in range(0, len(nums), 2):\n            max_sum += nums[i]\n        return max_sum",
    "explanation": "The solution involves sorting the input array `nums`, which takes O(n log n) time, where n is the number of elements in the array. After sorting, we iterate through the array, taking every second element starting from the first (i.e., indices 0, 2, 4, ...). This ensures that we are summing the minimums of the pairs formed by the sorted elements.\n\nThe time complexity of the solution is dominated by the sorting step, which is O(n log n). The space complexity is O(1) if we consider the sorting in-place, or O(n) if we consider the space used by the sorting algorithm in a non-in-place scenario.\n\nOverall, this approach efficiently maximizes the sum of the minimums of the pairs formed from the input array."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 4\nTest case 2:\n[PASS] Test passed: 9\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:01:24"
}