{
  "problem": {
    "id": "773",
    "frontend_id": "558",
    "title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
    "description": "A Binary Matrix is a matrix in which all the elements are either 0 or 1.\nGiven quadTree1 and quadTree2. quadTree1 represents a n * n binary matrix and quadTree2 represents another n * n binary matrix.\nReturn a Quad-Tree representing the n * n binary matrix which is the result of logical bitwise OR of the two binary matrixes represented by quadTree1 and quadTree2.\nNotice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n\nval: True if the node represents a grid of 1's or False if the node represents a grid of 0's.\nisLeaf: True if the node is leaf node on the tree or False if the node has the four children.\n\n\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\n\nIf the current grid has the same value (i.e all 1's or all 0's) set isLeaf True and set val to the value of the grid and set the four children to Null and stop.\nIf the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo.\nRecurse for each of the children with the proper sub-grid.\n\n\nIf you want to know more about the Quad-Tree, you can refer to the wiki.\nQuad-Tree format:\nThe input/output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].\nIf the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.\n \nExample 1:\n \n\nInput: quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]\n, quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\nOutput: [[0,0],[1,1],[1,1],[1,1],[1,0]]\nExplanation: quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.\nIf we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.\nNotice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree.\n\n\nExample 2:\n\nInput: quadTree1 = [[1,0]], quadTree2 = [[1,0]]\nOutput: [[1,0]]\nExplanation: Each tree represents a binary matrix of size 1*1. Each matrix contains only zero.\nThe resulting matrix is of size 1*1 with also zero.\n\n \nConstraints:\n\nquadTree1 and quadTree2 are both valid Quad-Trees each representing a n * n grid.\nn == 2x where 0 <= x <= 9.\n\n",
    "difficulty": "Medium",
    "examples": [
      "[[0,1],[1,1],[1,1],[1,0],[1,0]]",
      "[[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]",
      "[[1,0]]",
      "[[1,0]]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "quadTree1": "[[0,1]",
          "quadTree2": "[[0,1]"
        },
        "expected": "[[0,0]"
      },
      {
        "input": {
          "quadTree1": "[[1,0]",
          "quadTree2": "[[1,0]"
        },
        "expected": "[[1,0]"
      }
    ],
    "python_starter": "\"\"\"\n# Definition for a QuadTree node.\nclass Node:\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n\"\"\"\n\nclass Solution:\n    def intersect(self, quadTree1: 'Node', quadTree2: 'Node') -> 'Node':\n        ",
    "hints": [],
    "meta_data": {
      "name": "intersect",
      "params": [
        {
          "name": "quadTree1",
          "type": "integer[][]"
        },
        {
          "name": "quadTree2",
          "type": "integer[][]"
        }
      ],
      "return": {
        "type": "integer[][]"
      },
      "languages": [
        "cpp",
        "java",
        "python",
        "csharp",
        "javascript",
        "python3",
        "kotlin",
        "ruby",
        "scala",
        "swift",
        "golang",
        "php",
        "typescript"
      ],
      "manual": true,
      "typescriptCustomType": "class _Node {\n    val: boolean\n    isLeaf: boolean\n    topLeft: _Node | null\n\ttopRight: _Node | null\n\tbottomLeft: _Node | null\n\tbottomRight: _Node | null\n\tconstructor(val?: boolean, isLeaf?: boolean, topLeft?: _Node, topRight?: _Node, bottomLeft?: _Node, bottomRight?: _Node) {\n        this.val = (val===undefined ? false : val)\n        this.isLeaf = (isLeaf===undefined ? false : isLeaf)\n        this.topLeft = (topLeft===undefined ? null : topLeft)\n        this.topRight = (topRight===undefined ? null : topRight)\n        this.bottomLeft = (bottomLeft===undefined ? null : bottomLeft)\n        this.bottomRight = (bottomRight===undefined ? null : bottomRight)\n  }\n}\n"
    }
  },
  "solution": {
    "code": "# Definition for a QuadTree node.\nclass Node:\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n\nclass Solution:\n    def intersect(self, quadTree1: 'Node', quadTree2: 'Node') -> 'Node':\n        # If both nodes are leaves\n        if quadTree1.isLeaf:\n            return Node(quadTree1.val or quadTree2.val, True, None, None, None, None)\n        if quadTree2.isLeaf:\n            return Node(quadTree1.val or quadTree2.val, True, None, None, None, None)\n\n        # Both nodes are not leaves, we need to merge their children\n        topLeft = self.intersect(quadTree1.topLeft, quadTree2.topLeft)\n        topRight = self.intersect(quadTree1.topRight, quadTree2.topRight)\n        bottomLeft = self.intersect(quadTree1.bottomLeft, quadTree2.bottomLeft)\n        bottomRight = self.intersect(quadTree1.bottomRight, quadTree2.bottomRight)\n\n        # If all children are leaves and have the same value, we can merge them into a single leaf\n        if (topLeft.isLeaf and topRight.isLeaf and bottomLeft.isLeaf and bottomRight.isLeaf and\n            topLeft.val == topRight.val == bottomLeft.val == bottomRight.val):\n            return Node(topLeft.val, True, None, None, None, None)\n\n        # Otherwise, return a non-leaf node\n        return Node(False, False, topLeft, topRight, bottomLeft, bottomRight)",
    "explanation": "The solution uses a recursive approach to merge two Quad-Trees. The function `intersect` checks the properties of the nodes being processed:\n\n1. **Leaf Nodes**: If either of the nodes is a leaf, we can directly return a new leaf node with the logical OR of their values.\n2. **Internal Nodes**: If both nodes are internal, we recursively call `intersect` on their four children. This allows us to build the resulting Quad-Tree from the merged results of the quadrants.\n3. **Merging Logic**: After merging the children, if all four children are leaves and have the same value, we can simplify the result to a single leaf node. Otherwise, we return a new internal node with the merged children.\n\n### Time Complexity\nThe time complexity is O(n), where n is the number of nodes in the Quad-Trees. In the worst case, we may need to visit all nodes.\n\n### Space Complexity\nThe space complexity is O(h), where h is the height of the Quad-Tree, due to the recursion stack. In the worst case, this can be O(log n) for balanced trees, but can be O(n) for skewed trees."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpqzkgus3r.py\", line 67\n    input_0_0 = [[0,1]\n                 ^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n"
  },
  "timestamp": "2025-04-01 18:01:24"
}