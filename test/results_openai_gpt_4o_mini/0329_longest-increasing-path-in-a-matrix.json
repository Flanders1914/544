{
  "problem": {
    "id": "329",
    "frontend_id": "329",
    "title": "Longest Increasing Path in a Matrix",
    "description": "Given an m x n integers matrix, return the length of the longest increasing path in matrix.\nFrom each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).\n \nExample 1:\n\n\nInput: matrix = [[9,9,4],[6,6,8],[2,1,1]]\nOutput: 4\nExplanation: The longest increasing path is [1, 2, 6, 9].\n\nExample 2:\n\n\nInput: matrix = [[3,4,5],[3,2,6],[2,2,1]]\nOutput: 4\nExplanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\n\nExample 3:\n\nInput: matrix = [[1]]\nOutput: 1\n\n \nConstraints:\n\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 200\n0 <= matrix[i][j] <= 231 - 1\n\n",
    "difficulty": "Hard",
    "examples": [
      "[[9,9,4],[6,6,8],[2,1,1]]",
      "[[3,4,5],[3,2,6],[2,2,1]]",
      "[[1]]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "matrix": "[[9,9,4]"
        },
        "expected": "4"
      },
      {
        "input": {
          "matrix": "[[3,4,5]"
        },
        "expected": "4"
      },
      {
        "input": {
          "matrix": "[[1]"
        },
        "expected": "1"
      }
    ],
    "python_starter": "class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "longestIncreasingPath",
      "params": [
        {
          "name": "matrix",
          "type": "integer[][]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        if not matrix or not matrix[0]:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        memo = [[-1] * n for _ in range(m)]\n        \n        def dfs(x: int, y: int) -> int:\n            if memo[x][y] != -1:\n                return memo[x][y]\n            \n            # Directions for moving up, down, left, right\n            directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n            max_length = 1  # At least the cell itself\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n and matrix[nx][ny] > matrix[x][y]:\n                    max_length = max(max_length, 1 + dfs(nx, ny))\n            \n            memo[x][y] = max_length\n            return max_length\n        \n        longest_path = 0\n        for i in range(m):\n            for j in range(n):\n                longest_path = max(longest_path, dfs(i, j))\n        \n        return longest_path",
    "explanation": "The solution uses a depth-first search (DFS) approach with memoization to efficiently find the longest increasing path in a given matrix. \n\n1. **Initialization**: We first check if the matrix is empty. If it is, we return 0. We then initialize the dimensions of the matrix and create a memoization table filled with -1, indicating that no cell has been processed yet.\n\n2. **DFS Function**: The `dfs` function takes the current cell's coordinates (x, y) and checks if we have already computed the longest path starting from that cell. If we have, we return the stored value. Otherwise, we initialize `max_length` to 1 (the cell itself) and explore all four possible directions. For each valid neighbor that has a greater value, we recursively call `dfs` and update `max_length` accordingly.\n\n3. **Main Loop**: We iterate through each cell in the matrix, calling the `dfs` function and updating the `longest_path` variable with the maximum length found.\n\n4. **Return Value**: Finally, we return the length of the longest increasing path found.\n\n**Time Complexity**: O(m * n) - Each cell is processed once.\n\n**Space Complexity**: O(m * n) - For the memoization table.\n\nThis approach ensures that we efficiently compute the longest increasing path without redundant calculations, making it suitable for the problem's constraints."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpozxdkjti.py\", line 68\n    input_0_0 = [[9,9,4]\n                 ^^^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n"
  },
  "timestamp": "2025-04-01 18:00:49"
}