{
  "problem": {
    "id": "402",
    "frontend_id": "402",
    "title": "Remove K Digits",
    "description": "Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.\n \nExample 1:\n\nInput: num = \"1432219\", k = 3\nOutput: \"1219\"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n\nExample 2:\n\nInput: num = \"10200\", k = 1\nOutput: \"200\"\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n\nExample 3:\n\nInput: num = \"10\", k = 2\nOutput: \"0\"\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.\n\n \nConstraints:\n\n1 <= k <= num.length <= 105\nnum consists of only digits.\nnum does not have any leading zeros except for the zero itself.\n\n",
    "difficulty": "Medium",
    "examples": [
      "\"1432219\"",
      "3",
      "\"10200\"",
      "1",
      "\"10\"",
      "2"
    ],
    "structured_test_cases": [
      {
        "input": {
          "num": "\"1432219\"",
          "k": "3"
        },
        "expected": "1219"
      },
      {
        "input": {
          "num": "\"10200\"",
          "k": "1"
        },
        "expected": "200"
      },
      {
        "input": {
          "num": "\"10\"",
          "k": "2"
        },
        "expected": "0"
      }
    ],
    "python_starter": "class Solution:\n    def removeKdigits(self, num: str, k: int) -> str:\n        ",
    "hints": [],
    "meta_data": {
      "name": "removeKdigits",
      "params": [
        {
          "name": "num",
          "type": "string"
        },
        {
          "name": "k",
          "type": "integer"
        }
      ],
      "return": {
        "type": "string"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def removeKdigits(self, num: str, k: int) -> str:\n        stack = []\n        \n        for digit in num:\n            # While we can remove digits and the last digit in the stack is greater than the current digit\n            while k > 0 and stack and stack[-1] > digit:\n                stack.pop()\n                k -= 1\n            stack.append(digit)\n        \n        # If we still have digits to remove, remove from the end\n        while k > 0:\n            stack.pop()\n            k -= 1\n        \n        # Convert stack to string and remove leading zeros\n        result = ''.join(stack).lstrip('0')\n        \n        # Return \"0\" if the result is empty\n        return result if result else \"0\"",
    "explanation": "The provided solution uses a stack to efficiently build the smallest possible number after removing k digits from the input string. \n\n1. **Iterating through Digits**: We loop through each digit in the input string. For each digit, we check if we can remove the last digit in the stack (which represents the current smallest number we are building) if the current digit is smaller. This is done while we still have digits left to remove (k > 0).\n\n2. **Building the Result**: After processing all digits, if we still have k digits left to remove, we pop them from the end of the stack. This ensures that we are left with the smallest possible number.\n\n3. **Finalizing the Result**: We join the digits in the stack to form the final number and use `lstrip('0')` to remove any leading zeros. If the result is empty after this operation, we return \"0\".\n\nThe time complexity of the solution is O(n), where n is the length of the input string, as we process each digit at most twice. The space complexity is O(n) in the worst case, where we might store all digits in the stack."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:53"
}