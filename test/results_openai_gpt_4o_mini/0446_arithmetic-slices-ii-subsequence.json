{
  "problem": {
    "id": "446",
    "frontend_id": "446",
    "title": "Arithmetic Slices II - Subsequence",
    "description": "Given an integer array nums, return the number of all the arithmetic subsequences of nums.\nA sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\n\nFor example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.\nFor example, [1, 1, 2, 5, 7] is not an arithmetic sequence.\n\nA subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\n\nFor example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].\n\nThe test cases are generated so that the answer fits in 32-bit integer.\n \nExample 1:\n\nInput: nums = [2,4,6,8,10]\nOutput: 7\nExplanation: All arithmetic subsequence slices are:\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]\n\nExample 2:\n\nInput: nums = [7,7,7,7,7]\nOutput: 16\nExplanation: Any subsequence of this array is arithmetic.\n\n \nConstraints:\n\n1  <= nums.length <= 1000\n-231 <= nums[i] <= 231 - 1\n\n",
    "difficulty": "Hard",
    "examples": [
      "[2,4,6,8,10]",
      "[7,7,7,7,7]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[2,4,6,8,10]"
        },
        "expected": "7"
      },
      {
        "input": {
          "nums": "[7,7,7,7,7]"
        },
        "expected": "16"
      }
    ],
    "python_starter": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "numberOfArithmeticSlices",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 3:\n            return 0\n        \n        # This will hold the count of arithmetic subsequences ending at each index\n        dp = [defaultdict(int) for _ in range(n)]\n        total_count = 0\n        \n        for j in range(n):\n            for i in range(j):\n                d = nums[j] - nums[i]  # Calculate the common difference\n                count_at_i = dp[i][d]  # Get the count of subsequences ending at i with difference d\n                \n                # Update the count for j\n                dp[j][d] += count_at_i + 1  # +1 for the new pair (nums[i], nums[j])\n                \n                # Add to total count the number of subsequences of length >= 3\n                total_count += count_at_i\n        \n        return total_count",
    "explanation": "The solution uses a dynamic programming approach to count the number of arithmetic subsequences in the given array. We maintain a list of dictionaries (`dp`), where each dictionary corresponds to an index in the array and maps a common difference to the count of arithmetic subsequences that can be formed with that difference ending at that index.\n\n1. **Initialization**: We initialize `dp` with a list of empty dictionaries and a variable `total_count` to keep track of the total number of valid subsequences.\n\n2. **Nested Loop**: We iterate through each pair of indices `(i, j)` where `i < j`. For each pair, we calculate the common difference `d`. We then check how many subsequences can be formed that end at index `i` with this difference.\n\n3. **Updating Counts**: For each valid subsequence ending at `i`, we can form new subsequences ending at `j`. We update the count in `dp[j][d]` and also increment the `total_count` by the number of subsequences that can be extended to include `nums[j]`.\n\n4. **Final Count**: The final result is returned as `total_count`, which represents the total number of arithmetic subsequences of length at least 3.\n\n**Time Complexity**: O(n^2) due to the nested loops iterating through pairs of indices.\n\n**Space Complexity**: O(n) for storing the counts in the dictionaries."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 7\nTest case 2:\n[PASS] Test passed: 16\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:56"
}