{
  "problem": {
    "id": "199",
    "frontend_id": "199",
    "title": "Binary Tree Right Side View",
    "description": "Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\n \nExample 1:\n\nInput: root = [1,2,3,null,5,null,4]\nOutput: [1,3,4]\nExplanation:\n\n\nExample 2:\n\nInput: root = [1,2,3,4,null,null,null,5]\nOutput: [1,3,4,5]\nExplanation:\n\n\nExample 3:\n\nInput: root = [1,null,3]\nOutput: [1,3]\n\nExample 4:\n\nInput: root = []\nOutput: []\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\n\n",
    "difficulty": "Medium",
    "examples": [
      "[1,2,3,null,5,null,4]",
      "[1,2,3,4,null,null,null,5]",
      "[1,null,3]",
      "[]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "root": "[1,2,3,null,5,null,4]"
        },
        "expected": "[1,3,4]"
      },
      {
        "input": {
          "root": "[1,2,3,4,null,null,null,5]"
        },
        "expected": "[1,3,4,5]"
      },
      {
        "input": {
          "root": "[1,null,3]"
        },
        "expected": "[1,3]"
      }
    ],
    "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "rightSideView",
      "params": [
        {
          "name": "root",
          "type": "TreeNode"
        }
      ],
      "return": {
        "type": "list<integer>",
        "dealloc": true
      }
    }
  },
  "solution": {
    "code": "from collections import deque\nfrom typing import List, Optional\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        if not root:\n            return []\n        \n        result = []\n        queue = deque([root])\n        \n        while queue:\n            level_length = len(queue)\n            for i in range(level_length):\n                node = queue.popleft()\n                \n                # If it's the last node in the current level, add to result\n                if i == level_length - 1:\n                    result.append(node.val)\n                \n                # Add left and right children to the queue\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n        \n        return result",
    "explanation": "The provided solution uses a breadth-first search (BFS) approach to traverse the binary tree level by level. Here's a breakdown of the solution:\n\n1. **Initialization**: We start by checking if the root is `None`. If it is, we return an empty list since there are no nodes to view. We initialize a result list to store the visible nodes and a queue to facilitate the BFS.\n\n2. **Level Order Traversal**: We enter a while loop that continues until the queue is empty. For each iteration, we determine the number of nodes at the current level (`level_length`).\n\n3. **Processing Nodes**: We iterate through each node at the current level:\n   - We dequeue a node from the front of the queue.\n   - If this node is the last one processed at this level (i.e., `i == level_length - 1`), we append its value to the result list.\n   - We enqueue the left and right children of the current node, if they exist.\n\n4. **Return Result**: After processing all levels, we return the result list containing the values of the nodes visible from the right side.\n\n**Time Complexity**: O(N), where N is the number of nodes in the tree. Each node is processed exactly once.\n\n**Space Complexity**: O(W), where W is the maximum width of the tree. In the worst case, the queue can hold all nodes at the last level of the tree.\n\nThis solution efficiently captures the right side view of the binary tree as required by the problem statement."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:41"
}