{
  "problem": {
    "id": "89",
    "frontend_id": "89",
    "title": "Gray Code",
    "description": "An n-bit gray code sequence is a sequence of 2n integers where:\n\nEvery integer is in the inclusive range [0, 2n - 1],\nThe first integer is 0,\nAn integer appears no more than once in the sequence,\nThe binary representation of every pair of adjacent integers differs by exactly one bit, and\nThe binary representation of the first and last integers differs by exactly one bit.\n\nGiven an integer n, return any valid n-bit gray code sequence.\n \nExample 1:\n\nInput: n = 2\nOutput: [0,1,3,2]\nExplanation:\nThe binary representation of [0,1,3,2] is [00,01,11,10].\n- 00 and 01 differ by one bit\n- 01 and 11 differ by one bit\n- 11 and 10 differ by one bit\n- 10 and 00 differ by one bit\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n- 00 and 10 differ by one bit\n- 10 and 11 differ by one bit\n- 11 and 01 differ by one bit\n- 01 and 00 differ by one bit\n\nExample 2:\n\nInput: n = 1\nOutput: [0,1]\n\n \nConstraints:\n\n1 <= n <= 16\n\n",
    "difficulty": "Medium",
    "examples": [
      "2",
      "1"
    ],
    "structured_test_cases": [
      {
        "input": {
          "n": "2"
        },
        "expected": "[0,1,3,2]"
      },
      {
        "input": {
          "n": "1"
        },
        "expected": "[0,1]"
      }
    ],
    "python_starter": "class Solution:\n    def grayCode(self, n: int) -> List[int]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "grayCode",
      "params": [
        {
          "name": "n",
          "type": "integer"
        }
      ],
      "return": {
        "type": "list<integer>"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def grayCode(self, n: int) -> List[int]:\n        # Initialize the result list with the first element 0\n        result = []\n        \n        # Generate the Gray code sequence\n        for i in range(1 << n):  # 1 << n is equivalent to 2^n\n            gray_code_number = i ^ (i >> 1)  # Calculate the Gray code\n            result.append(gray_code_number)  # Append the Gray code to the result\n        \n        return result",
    "explanation": "The solution uses the property of Gray codes where each number can be generated using the formula `G(i) = i ^ (i >> 1)`, where `G(i)` is the i-th Gray code number. The `^` operator is the bitwise XOR, and `>>` is the right shift operator. \n\n1. **Time Complexity**: The time complexity of this solution is O(2^n) because we generate 2^n Gray code numbers for n bits.\n2. **Space Complexity**: The space complexity is also O(2^n) due to the storage of the result list containing all the Gray code numbers.\n\nThis approach efficiently generates the required Gray code sequence for any valid input n (1 <= n <= 16) as specified in the problem constraints."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: [0, 1, 3, 2]\nTest case 2:\n[PASS] Test passed: [0, 1]\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:33"
}