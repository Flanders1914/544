{
  "problem": {
    "id": "502",
    "frontend_id": "502",
    "title": "IPO",
    "description": "Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects.\nYou are given n projects where the ith project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it.\nInitially, you have w capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.\nPick a list of at most k distinct projects from given projects to maximize your final capital, and return the final maximized capital.\nThe answer is guaranteed to fit in a 32-bit signed integer.\n \nExample 1:\n\nInput: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]\nOutput: 4\nExplanation: Since your initial capital is 0, you can only start the project indexed 0.\nAfter finishing it you will obtain profit 1 and your capital becomes 1.\nWith capital 1, you can either start the project indexed 1 or the project indexed 2.\nSince you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\nTherefore, output the final maximized capital, which is 0 + 1 + 3 = 4.\n\nExample 2:\n\nInput: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]\nOutput: 6\n\n \nConstraints:\n\n1 <= k <= 105\n0 <= w <= 109\nn == profits.length\nn == capital.length\n1 <= n <= 105\n0 <= profits[i] <= 104\n0 <= capital[i] <= 109\n\n",
    "difficulty": "Hard",
    "examples": [
      "2",
      "0",
      "[1,2,3]",
      "[0,1,1]",
      "3",
      "0",
      "[1,2,3]",
      "[0,1,2]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "k": "2",
          "w": "0",
          "profits": "[1,2,3]",
          "capital": "[0,1,1]"
        },
        "expected": "4"
      },
      {
        "input": {
          "k": "3",
          "w": "0",
          "profits": "[1,2,3]",
          "capital": "[0,1,2]"
        },
        "expected": "6"
      }
    ],
    "python_starter": "class Solution:\n    def findMaximizedCapital(self, k: int, w: int, profits: List[int], capital: List[int]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "findMaximizedCapital",
      "params": [
        {
          "name": "k",
          "type": "integer"
        },
        {
          "name": "w",
          "type": "integer"
        },
        {
          "name": "profits",
          "type": "integer[]"
        },
        {
          "name": "capital",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\nimport heapq\n\nclass Solution:\n    def findMaximizedCapital(self, k: int, w: int, profits: List[int], capital: List[int]) -> int:\n        # Pair profits with their corresponding capital requirements\n        projects = sorted(zip(capital, profits))\n        \n        max_heap = []\n        current_index = 0\n        n = len(projects)\n        \n        for _ in range(k):\n            # Add all projects that can be started with current capital w\n            while current_index < n and projects[current_index][0] <= w:\n                # Push the profit into the max-heap (using negative to simulate max-heap)\n                heapq.heappush(max_heap, -projects[current_index][1])\n                current_index += 1\n            \n            # If there are projects available, take the one with the maximum profit\n            if max_heap:\n                w -= heapq.heappop(max_heap)  # Pop the max profit (negated)\n        \n        return w",
    "explanation": "The solution uses a greedy algorithm with a max-heap to efficiently select the most profitable projects that can be completed within the given capital constraints. \n\n1. **Time Complexity**: The overall time complexity is O(n log n) due to the sorting of the projects, and O(k log n) for the k iterations where we may push and pop from the heap. Thus, the total complexity is dominated by O(n log n).\n2. **Space Complexity**: The space complexity is O(n) for storing the projects and the max-heap.\n\nThis approach ensures that we maximize the capital by always selecting the most profitable projects that can be started with the available capital, iterating up to `k` times to complete the projects. The solution is efficient and works well within the problem's constraints."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 4\nTest case 2:\n[PASS] Test passed: 6\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:01:20"
}