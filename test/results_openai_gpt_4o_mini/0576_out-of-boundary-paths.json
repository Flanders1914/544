{
  "problem": {
    "id": "576",
    "frontend_id": "576",
    "title": "Out of Boundary Paths",
    "description": "There is an m x n grid with a ball. The ball is initially at the position [startRow, startColumn]. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply at most maxMove moves to the ball.\nGiven the five integers m, n, maxMove, startRow, startColumn, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it modulo 109 + 7.\n \nExample 1:\n\n\nInput: m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0\nOutput: 6\n\nExample 2:\n\n\nInput: m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1\nOutput: 12\n\n \nConstraints:\n\n1 <= m, n <= 50\n0 <= maxMove <= 50\n0 <= startRow < m\n0 <= startColumn < n\n\n",
    "difficulty": "Medium",
    "examples": [
      "2",
      "2",
      "2",
      "0",
      "0",
      "1",
      "3",
      "3",
      "0",
      "1"
    ],
    "structured_test_cases": [
      {
        "input": {
          "m": "2",
          "n": "2",
          "maxMove": "2",
          "startRow": "0",
          "startColumn": "0"
        },
        "expected": "6"
      }
    ],
    "python_starter": "class Solution:\n    def findPaths(self, m: int, n: int, maxMove: int, startRow: int, startColumn: int) -> int:\n        ",
    "hints": [
      "Is traversing every path feasible? There are many possible paths for a small matrix. Try to optimize it.",
      "Can we use some space to store the number of paths and update them after every move?",
      "One obvious thing: the ball will go out of the boundary only by crossing it. Also, there is only one possible way the ball can go out of the boundary from the boundary cell except for corner cells. From the corner cell, the ball can go out in two different ways.\r\n\r\nCan you use this thing to solve the problem?"
    ],
    "meta_data": {
      "name": "findPaths",
      "params": [
        {
          "name": "m",
          "type": "integer"
        },
        {
          "name": "n",
          "type": "integer"
        },
        {
          "name": "maxMove",
          "type": "integer"
        },
        {
          "name": "startRow",
          "type": "integer"
        },
        {
          "name": "startColumn",
          "type": "integer"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def findPaths(self, m: int, n: int, maxMove: int, startRow: int, startColumn: int) -> int:\n        MOD = 10**9 + 7\n        \n        # Memoization table\n        memo = {}\n        \n        def dfs(row, col, remainingMoves):\n            # Base case: if out of bounds\n            if row < 0 or row >= m or col < 0 or col >= n:\n                return 1\n            # Base case: if no remaining moves\n            if remainingMoves == 0:\n                return 0\n            # Check if already computed\n            if (row, col, remainingMoves) in memo:\n                return memo[(row, col, remainingMoves)]\n            \n            # Explore all four directions\n            paths = (dfs(row - 1, col, remainingMoves - 1) +  # Up\n                     dfs(row + 1, col, remainingMoves - 1) +  # Down\n                     dfs(row, col - 1, remainingMoves - 1) +  # Left\n                     dfs(row, col + 1, remainingMoves - 1))    # Right\n            \n            # Store the result in memo\n            memo[(row, col, remainingMoves)] = paths % MOD\n            return memo[(row, col, remainingMoves)]\n        \n        return dfs(startRow, startColumn, maxMove)",
    "explanation": "The solution uses a depth-first search (DFS) approach with memoization to efficiently count the number of paths that lead the ball out of the grid. The `dfs` function is defined to explore all possible moves from the current position `(row, col)` with a given number of `remainingMoves`.\n\n1. **Base Cases**:\n   - If the ball is out of bounds, we return 1, indicating a successful path.\n   - If there are no remaining moves, we return 0, as we cannot move anymore.\n\n2. **Memoization**:\n   - We store the results of previously computed states in a dictionary `memo` to avoid redundant calculations.\n\n3. **Recursive Exploration**:\n   - We recursively call `dfs` for each of the four possible directions (up, down, left, right) and sum the results.\n\n4. **Modulo Operation**:\n   - We ensure that the result is returned modulo \\(10^9 + 7\\) to handle large numbers.\n\nThe overall time complexity is \\(O(m \\times n \\times \\text{maxMove})\\) due to the nested exploration of grid cells and moves, and the space complexity is also \\(O(m \\times n \\times \\text{maxMove})\\) for the memoization storage."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 6\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:01:25"
}