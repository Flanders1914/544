{
  "problem": {
    "id": "209",
    "frontend_id": "209",
    "title": "Minimum Size Subarray Sum",
    "description": "Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.\n \nExample 1:\n\nInput: target = 7, nums = [2,3,1,2,4,3]\nOutput: 2\nExplanation: The subarray [4,3] has the minimal length under the problem constraint.\n\nExample 2:\n\nInput: target = 4, nums = [1,4,4]\nOutput: 1\n\nExample 3:\n\nInput: target = 11, nums = [1,1,1,1,1,1,1,1]\nOutput: 0\n\n \nConstraints:\n\n1 <= target <= 109\n1 <= nums.length <= 105\n1 <= nums[i] <= 104\n\n \nFollow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).",
    "difficulty": "Medium",
    "examples": [
      "7",
      "[2,3,1,2,4,3]",
      "4",
      "[1,4,4]",
      "11",
      "[1,1,1,1,1,1,1,1]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "target": "7",
          "nums": "[2,3,1,2,4,3]"
        },
        "expected": "2"
      },
      {
        "input": {
          "target": "4",
          "nums": "[1,4,4]"
        },
        "expected": "1"
      }
    ],
    "python_starter": "class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "minSubArrayLen",
      "params": [
        {
          "name": "target",
          "type": "integer"
        },
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        left = 0\n        current_sum = 0\n        min_length = float('inf')  # Initialize to infinity\n        \n        for right in range(len(nums)):\n            current_sum += nums[right]  # Expand the window by adding the right element\n            \n            # While the current sum is greater than or equal to the target\n            while current_sum >= target:\n                # Update the minimum length\n                min_length = min(min_length, right - left + 1)\n                current_sum -= nums[left]  # Shrink the window from the left\n                left += 1  # Move the left pointer to the right\n        \n        return min_length if min_length != float('inf') else 0  # Return 0 if no valid subarray found",
    "explanation": "The provided solution uses the sliding window technique to efficiently find the minimal length of a subarray whose sum is at least equal to the target. \n\n1. **Initialization**: We start with two pointers (`left` and `right`) and a variable `current_sum` to track the sum of the current window. We also initialize `min_length` to infinity to ensure any valid length found will be smaller.\n\n2. **Expanding the Window**: We iterate through the array using the `right` pointer. For each element, we add it to `current_sum`.\n\n3. **Validating the Window**: Whenever `current_sum` meets or exceeds the target, we check if the current window length (`right - left + 1`) is the smallest found so far. If it is, we update `min_length`.\n\n4. **Shrinking the Window**: After finding a valid window, we attempt to shrink it by moving the `left` pointer to the right, subtracting the element at `left` from `current_sum` until `current_sum` is less than the target.\n\n5. **Final Result**: After processing all elements, if `min_length` remains infinity, it means no valid subarray was found, and we return 0. Otherwise, we return the smallest length found.\n\n**Time Complexity**: O(n), where n is the length of the input array, since each element is processed at most twice.\n\n**Space Complexity**: O(1), as we are using a constant amount of extra space regardless of the input size."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 2\nTest case 2:\n[PASS] Test passed: 1\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:42"
}