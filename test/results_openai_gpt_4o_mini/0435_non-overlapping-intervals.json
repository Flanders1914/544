{
  "problem": {
    "id": "435",
    "frontend_id": "435",
    "title": "Non-overlapping Intervals",
    "description": "Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\nNote that intervals which only touch at a point are non-overlapping. For example, [1, 2] and [2, 3] are non-overlapping.\n \nExample 1:\n\nInput: intervals = [[1,2],[2,3],[3,4],[1,3]]\nOutput: 1\nExplanation: [1,3] can be removed and the rest of the intervals are non-overlapping.\n\nExample 2:\n\nInput: intervals = [[1,2],[1,2],[1,2]]\nOutput: 2\nExplanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.\n\nExample 3:\n\nInput: intervals = [[1,2],[2,3]]\nOutput: 0\nExplanation: You don't need to remove any of the intervals since they're already non-overlapping.\n\n \nConstraints:\n\n1 <= intervals.length <= 105\nintervals[i].length == 2\n-5 * 104 <= starti < endi <= 5 * 104\n\n",
    "difficulty": "Medium",
    "examples": [
      "[[1,2],[2,3],[3,4],[1,3]]",
      "[[1,2],[1,2],[1,2]]",
      "[[1,2],[2,3]]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "intervals": "[[1,2]"
        },
        "expected": "1"
      },
      {
        "input": {
          "intervals": "[[1,2]"
        },
        "expected": "2"
      },
      {
        "input": {
          "intervals": "[[1,2]"
        },
        "expected": "0"
      }
    ],
    "python_starter": "class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "eraseOverlapIntervals",
      "params": [
        {
          "name": "intervals",
          "type": "integer[][]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        # If there are no intervals, return 0\n        if not intervals:\n            return 0\n        \n        # Sort the intervals based on their end times\n        intervals.sort(key=lambda x: x[1])\n        \n        # Initialize the count of non-overlapping intervals\n        non_overlapping_count = 1\n        # The end time of the last added interval\n        last_end = intervals[0][1]\n        \n        # Iterate through the sorted intervals starting from the second one\n        for i in range(1, len(intervals)):\n            # If the current interval starts after or when the last added interval ends\n            if intervals[i][0] >= last_end:\n                non_overlapping_count += 1\n                last_end = intervals[i][1]  # Update the end time to the current interval's end\n        \n        # The number of intervals to remove is the total intervals minus the non-overlapping count\n        return len(intervals) - non_overlapping_count",
    "explanation": "The solution begins by checking if the input list of intervals is empty. If it is, we return 0 since there are no intervals to process. Next, we sort the intervals based on their end times using the `sort` method with a custom key. This sorting step is crucial as it allows us to efficiently determine which intervals can be kept without overlapping.\n\nWe initialize a counter for non-overlapping intervals and set the end time of the first interval as the last end time. We then iterate through the sorted intervals starting from the second one. For each interval, we check if its start time is greater than or equal to the last end time. If it is, we can include this interval in our non-overlapping set, incrementing our counter and updating the last end time.\n\nFinally, we calculate the number of intervals to remove by subtracting the count of non-overlapping intervals from the total number of intervals. \n\nThe time complexity of this solution is O(n log n) due to the sorting step, and the space complexity is O(1) since we are using a constant amount of extra space regardless of the input size."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpjtcsq811.py\", line 61\n    input_0_0 = [[1,2]\n                 ^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n"
  },
  "timestamp": "2025-04-01 18:00:55"
}