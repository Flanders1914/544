{
  "problem": {
    "id": "583",
    "frontend_id": "583",
    "title": "Delete Operation for Two Strings",
    "description": "Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.\nIn one step, you can delete exactly one character in either string.\n \nExample 1:\n\nInput: word1 = \"sea\", word2 = \"eat\"\nOutput: 2\nExplanation: You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\".\n\nExample 2:\n\nInput: word1 = \"leetcode\", word2 = \"etco\"\nOutput: 4\n\n \nConstraints:\n\n1 <= word1.length, word2.length <= 500\nword1 and word2 consist of only lowercase English letters.\n\n",
    "difficulty": "Medium",
    "examples": [
      "\"sea\"",
      "\"eat\"",
      "\"leetcode\"",
      "\"etco\""
    ],
    "structured_test_cases": [
      {
        "input": {
          "word1": "\"sea\"",
          "word2": "\"eat\""
        },
        "expected": "2"
      },
      {
        "input": {
          "word1": "\"leetcode\"",
          "word2": "\"etco\""
        },
        "expected": "4"
      }
    ],
    "python_starter": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "minDistance",
      "params": [
        {
          "name": "word1",
          "type": "string"
        },
        {
          "name": "word2",
          "type": "string"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        # Lengths of the input strings\n        m, n = len(word1), len(word2)\n        \n        # Create a 2D DP array initialized to 0\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        # Fill the DP table\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1  # Characters match\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])  # Characters do not match\n        \n        # Length of the longest common subsequence\n        lcs_length = dp[m][n]\n        \n        # Calculate the minimum number of deletions\n        min_deletions = (m - lcs_length) + (n - lcs_length)\n        \n        return min_deletions",
    "explanation": "The solution uses dynamic programming to find the longest common subsequence (LCS) of the two input strings. The LCS is computed using a 2D array `dp`, where `dp[i][j]` holds the length of the LCS of the first `i` characters of `word1` and the first `j` characters of `word2`.\n\n1. **Initialization**: The `dp` array is initialized with dimensions `(m+1) x (n+1)` filled with zeros, where `m` and `n` are the lengths of `word1` and `word2`, respectively.\n\n2. **Filling the DP Table**: We iterate through each character of both strings. If the characters match, we increment the LCS length from the previous indices. If they do not match, we take the maximum LCS length possible by either ignoring the current character of `word1` or `word2`.\n\n3. **Calculating Minimum Deletions**: Once we have the length of the LCS, the minimum number of deletions required to make the two strings the same is calculated using the formula mentioned earlier.\n\n**Time Complexity**: The time complexity of this solution is \\(O(m \\times n)\\), where \\(m\\) and \\(n\\) are the lengths of `word1` and `word2`. This is due to the nested loops filling the DP table.\n\n**Space Complexity**: The space complexity is \\(O(m \\times n)\\) for the DP table. However, it can be optimized to \\(O(\\min(m, n))\\) by using only two rows of the DP table at a time."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 2\nTest case 2:\n[PASS] Test passed: 4\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:01:25"
}