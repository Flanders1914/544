{
  "problem": {
    "id": "315",
    "frontend_id": "315",
    "title": "Count of Smaller Numbers After Self",
    "description": "Given an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].\n \nExample 1:\n\nInput: nums = [5,2,6,1]\nOutput: [2,1,1,0]\nExplanation:\nTo the right of 5 there are 2 smaller elements (2 and 1).\nTo the right of 2 there is only 1 smaller element (1).\nTo the right of 6 there is 1 smaller element (1).\nTo the right of 1 there is 0 smaller element.\n\nExample 2:\n\nInput: nums = [-1]\nOutput: [0]\n\nExample 3:\n\nInput: nums = [-1,-1]\nOutput: [0,0]\n\n \nConstraints:\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n\n",
    "difficulty": "Hard",
    "examples": [
      "[5,2,6,1]",
      "[-1]",
      "[-1,-1]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[5,2,6,1]"
        },
        "expected": "[2,1,1,0]"
      },
      {
        "input": {
          "nums": "[-1]"
        },
        "expected": "[0]"
      }
    ],
    "python_starter": "class Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "countSmaller",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "list<integer>",
        "dealloc": true
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:\n        # This will hold the counts of smaller elements\n        counts = [0] * len(nums)\n        # Pair each number with its index\n        indexed_nums = [(num, i) for i, num in enumerate(nums)]\n        \n        # Helper function to perform merge sort and count smaller elements\n        def merge_sort(start, end):\n            if end - start <= 1:\n                return\n            \n            mid = (start + end) // 2\n            merge_sort(start, mid)\n            merge_sort(mid, end)\n            \n            # Merge step\n            left = indexed_nums[start:mid]\n            right = indexed_nums[mid:end]\n            j = 0  # Pointer for right array\n            \n            for i in range(len(left)):\n                # Count how many elements in the right array are smaller than left[i]\n                while j < len(right) and right[j][0] < left[i][0]:\n                    j += 1\n                # Update the counts for the original index of left[i]\n                counts[left[i][1]] += j\n            \n            # Merge the two halves back into indexed_nums\n            indexed_nums[start:end] = sorted(left + right)\n\n        merge_sort(0, len(nums))\n        return counts",
    "explanation": "The solution uses a modified merge sort algorithm to count the number of smaller elements to the right of each element in the input array. Here's a breakdown of the approach:\n\n1. **Initialization**: We create an array `counts` initialized to zero, which will store the result. We also create a list of tuples `indexed_nums` that pairs each number with its original index.\n\n2. **Merge Sort**: We define a recursive function `merge_sort` that sorts the array and counts the smaller elements:\n   - If the segment has one or no elements, it returns immediately.\n   - It divides the array into two halves and recursively sorts each half.\n   - During the merge step, we compare elements from the left half with those in the right half. For each element in the left half, we count how many elements in the right half are smaller and update the `counts` array accordingly.\n\n3. **Merging**: After counting, we merge the two halves back together in sorted order.\n\n4. **Time Complexity**: The overall time complexity of this approach is O(n log n) due to the merge sort, which is efficient for the input size constraints.\n\n5. **Space Complexity**: The space complexity is O(n) for the auxiliary arrays used during the sorting process.\n\nThis method efficiently counts the smaller elements to the right for each element in the input array while maintaining the required performance for large inputs."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: [2, 1, 1, 0]\nTest case 2:\n[PASS] Test passed: [0]\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:48"
}