{
  "problem": {
    "id": "20",
    "frontend_id": "20",
    "title": "Valid Parentheses",
    "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nAn input string is valid if:\n\nOpen brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.\nEvery close bracket has a corresponding open bracket of the same type.\n\n \nExample 1:\n\nInput: s = \"()\"\nOutput: true\n\nExample 2:\n\nInput: s = \"()[]{}\"\nOutput: true\n\nExample 3:\n\nInput: s = \"(]\"\nOutput: false\n\nExample 4:\n\nInput: s = \"([])\"\nOutput: true\n\n \nConstraints:\n\n1 <= s.length <= 104\ns consists of parentheses only '()[]{}'.\n\n",
    "difficulty": "Easy",
    "examples": [
      "\"()\"",
      "\"()[]{}\"",
      "\"(]\"",
      "\"([])\""
    ],
    "structured_test_cases": [
      {
        "input": {
          "s": "\"()\""
        },
        "expected": "true"
      }
    ],
    "python_starter": "class Solution:\n    def isValid(self, s: str) -> bool:\n        ",
    "hints": [
      "Use a stack of characters.",
      "When you encounter an opening bracket, push it to the top of the stack.",
      "When you encounter a closing bracket, check if the top of the stack was the opening for it. If yes, pop it from the stack. Otherwise, return false."
    ],
    "meta_data": {
      "name": "isValid",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ],
      "return": {
        "type": "boolean"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def isValid(self, s: str) -> bool:\n        # Dictionary to hold matching pairs of brackets\n        bracket_map = {')': '(', '}': '{', ']': '['}\n        # Stack to keep track of opening brackets\n        stack = []\n        \n        # Iterate through each character in the string\n        for char in s:\n            # If the character is a closing bracket\n            if char in bracket_map:\n                # Pop the topmost element from the stack if it's not empty, else assign a dummy value\n                top_element = stack.pop() if stack else '#'\n                # Check if the popped element matches the corresponding opening bracket\n                if bracket_map[char] != top_element:\n                    return False\n            else:\n                # If it's an opening bracket, push onto the stack\n                stack.append(char)\n        \n        # If the stack is empty, all brackets were matched; otherwise, it's invalid\n        return not stack",
    "explanation": "The solution uses a stack to keep track of the opening brackets. As we iterate through the string, we perform the following steps:\n\n1. We define a dictionary `bracket_map` that maps each closing bracket to its corresponding opening bracket.\n2. We initialize an empty list `stack` to serve as our stack.\n3. We loop through each character in the input string `s`:\n   - If the character is a closing bracket (i.e., it exists in `bracket_map`), we check the top of the stack:\n     - If the stack is not empty, we pop the top element; if it is empty, we assign a dummy value (e.g., '#').\n     - We then check if the popped element matches the expected opening bracket from `bracket_map`. If it does not match, we return `False`.\n   - If the character is an opening bracket, we simply push it onto the stack.\n4. After processing all characters, we check if the stack is empty. If it is, it means all opening brackets were matched correctly, and we return `True`. If not, we return `False`.\n\nThe time complexity of this solution is O(n), where n is the length of the string, as we traverse the string once. The space complexity is O(n) in the worst case, where all characters are opening brackets and are stored in the stack."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:27"
}