{
  "problem": {
    "id": "91",
    "frontend_id": "91",
    "title": "Decode Ways",
    "description": "You have intercepted a secret message encoded as a string of numbers. The message is decoded via the following mapping:\n\"1\" -> 'A'\n\"2\" -> 'B'\n...\n\"25\" -> 'Y'\n\"26\" -> 'Z'\nHowever, while decoding the message, you realize that there are many different ways you can decode the message because some codes are contained in other codes (\"2\" and \"5\" vs \"25\").\nFor example, \"11106\" can be decoded into:\n\n\"AAJF\" with the grouping (1, 1, 10, 6)\n\"KJF\" with the grouping (11, 10, 6)\nThe grouping (1, 11, 06) is invalid because \"06\" is not a valid code (only \"6\" is valid).\n\nNote: there may be strings that are impossible to decode.\n\nGiven a string s containing only digits, return the number of ways to decode it. If the entire string cannot be decoded in any valid way, return 0.\nThe test cases are generated so that the answer fits in a 32-bit integer.\n \nExample 1:\n\nInput: s = \"12\"\nOutput: 2\nExplanation:\n\"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\n\nExample 2:\n\nInput: s = \"226\"\nOutput: 3\nExplanation:\n\"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\n\nExample 3:\n\nInput: s = \"06\"\nOutput: 0\nExplanation:\n\"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\"). In this case, the string is not a valid encoding, so return 0.\n\n \nConstraints:\n\n1 <= s.length <= 100\ns contains only digits and may contain leading zero(s).\n\n",
    "difficulty": "Medium",
    "examples": [
      "\"12\"",
      "\"226\"",
      "\"06\""
    ],
    "structured_test_cases": [
      {
        "input": {
          "s": "\"12\""
        },
        "expected": "2"
      },
      {
        "input": {
          "s": "\"226\""
        },
        "expected": "3"
      },
      {
        "input": {
          "s": "\"06\""
        },
        "expected": "0"
      }
    ],
    "python_starter": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "numDecodings",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        # Edge case: if the string is empty or starts with '0'\n        if not s or s[0] == '0':\n            return 0\n        \n        n = len(s)\n        # dp[i] will hold the number of ways to decode s[0:i]\n        dp = [0] * (n + 1)\n        dp[0] = 1  # Base case: empty string\n        dp[1] = 1  # Base case: single character (not '0')\n        \n        for i in range(2, n + 1):\n            # Check if the single digit is valid\n            if s[i-1] != '0':\n                dp[i] += dp[i-1]\n            # Check if the two digits form a valid number\n            two_digit = int(s[i-2:i])\n            if 10 <= two_digit <= 26:\n                dp[i] += dp[i-2]\n        \n        return dp[n]",
    "explanation": "The solution uses dynamic programming to efficiently count the number of ways to decode the string. The `dp` array is initialized with base cases, where `dp[0]` is 1 (representing the empty string) and `dp[1]` is also 1 (if the first character is not '0').\n\nAs we iterate through the string from the second character to the end:\n- We check if the current character can be decoded as a single digit. If it is not '0', we add the number of ways to decode the substring up to the previous character (`dp[i-1]`).\n- We also check if the last two characters form a valid two-digit number (between 10 and 26). If they do, we add the number of ways to decode the substring up to two characters before (`dp[i-2]`).\n\nFinally, `dp[n]` gives the total number of ways to decode the entire string.\n\n**Time Complexity**: O(n), where n is the length of the string, since we are iterating through the string once.\n\n**Space Complexity**: O(n) for the `dp` array. However, we can optimize this to O(1) by only keeping track of the last two values since each state only depends on the previous two states."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:33"
}