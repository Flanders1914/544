{
  "problem": {
    "id": "575",
    "frontend_id": "575",
    "title": "Distribute Candies",
    "description": "Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor.\nThe doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.\nGiven the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.\n \nExample 1:\n\nInput: candyType = [1,1,2,2,3,3]\nOutput: 3\nExplanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.\n\nExample 2:\n\nInput: candyType = [1,1,2,3]\nOutput: 2\nExplanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.\n\nExample 3:\n\nInput: candyType = [6,6,6,6]\nOutput: 1\nExplanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.\n\n \nConstraints:\n\nn == candyType.length\n2 <= n <= 104\nn is even.\n-105 <= candyType[i] <= 105\n\n",
    "difficulty": "Easy",
    "examples": [
      "[1,1,2,2,3,3]",
      "[1,1,2,3]",
      "[6,6,6,6]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "candyType": "[1,1,2,2,3,3]"
        },
        "expected": "3"
      },
      {
        "input": {
          "candyType": "[1,1,2,3]"
        },
        "expected": "2"
      },
      {
        "input": {
          "candyType": "[6,6,6,6]"
        },
        "expected": "1"
      }
    ],
    "python_starter": "class Solution:\n    def distributeCandies(self, candyType: List[int]) -> int:\n        ",
    "hints": [
      "To maximize the number of kinds of candies, we should try to distribute candies such that Alice will gain all kinds.",
      "What is the upper limit of the number of kinds of candies Alice will gain? Remember candies are to distributed equally.",
      "Which data structure is the most suitable for finding the number of kinds of candies?",
      "Will hashset solves the problem? Inserting all candies kind in the hashset and then checking its size with upper limit."
    ],
    "meta_data": {
      "name": "distributeCandies",
      "params": [
        {
          "name": "candyType",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def distributeCandies(self, candyType: List[int]) -> int:\n        # Use a set to find unique candy types\n        unique_candies = set(candyType)\n        \n        # Calculate the maximum number of different types Alice can eat\n        max_types = len(unique_candies)\n        max_eatable = len(candyType) // 2\n        \n        # The result is the minimum of unique types and the maximum she can eat\n        return min(max_types, max_eatable)",
    "explanation": "The solution begins by importing the necessary type from the `typing` module. The `distributeCandies` method takes a list of integers, `candyType`, which represents the types of candies Alice has.\n\n1. **Counting Unique Types**: We create a set from `candyType`, which automatically filters out duplicates, allowing us to count the unique types of candies.\n\n2. **Calculating Limits**: We calculate `max_types` as the length of the set (number of unique candy types) and `max_eatable` as half the length of the `candyType` list (since Alice can only eat n / 2 candies).\n\n3. **Final Result**: The final result is determined by taking the minimum of `max_types` and `max_eatable`, ensuring that Alice does not exceed the number of candies she is allowed to eat.\n\n**Time Complexity**: The time complexity of this solution is O(n), where n is the number of candies. This is due to the need to iterate through the list to create the set of unique candy types.\n\n**Space Complexity**: The space complexity is O(k), where k is the number of unique candy types, as we store these in a set.\n\nThis approach efficiently determines the maximum number of different types of candies Alice can eat while adhering to the doctor's advice."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 3\nTest case 2:\n[PASS] Test passed: 2\nTest case 3:\n[PASS] Test passed: 1\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:01:25"
}