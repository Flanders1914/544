{
  "problem": {
    "id": "404",
    "frontend_id": "404",
    "title": "Sum of Left Leaves",
    "description": "Given the root of a binary tree, return the sum of all left leaves.\nA leaf is a node with no children. A left leaf is a leaf that is the left child of another node.\n \nExample 1:\n\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: 24\nExplanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.\n\nExample 2:\n\nInput: root = [1]\nOutput: 0\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [1, 1000].\n-1000 <= Node.val <= 1000\n\n",
    "difficulty": "Easy",
    "examples": [
      "[3,9,20,null,null,15,7]",
      "[1]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "root": "[3,9,20,null,null,15,7]"
        },
        "expected": "24"
      },
      {
        "input": {
          "root": "[1]"
        },
        "expected": "0"
      }
    ],
    "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sumOfLeftLeaves(self, root: Optional[TreeNode]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "sumOfLeftLeaves",
      "params": [
        {
          "name": "root",
          "type": "TreeNode"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def sumOfLeftLeaves(self, root: Optional[TreeNode]) -> int:\n        # Helper function to perform the recursive traversal\n        def dfs(node, is_left):\n            if not node:\n                return 0\n            # Check if the current node is a left leaf\n            if is_left and not node.left and not node.right:\n                return node.val\n            # Recur for left and right children\n            return dfs(node.left, True) + dfs(node.right, False)\n        \n        # Start the DFS from the root, which is not a left child\n        return dfs(root, False)",
    "explanation": "The provided solution uses a depth-first search (DFS) approach to traverse the binary tree. The `dfs` function takes two parameters: the current node and a boolean indicating whether the current node is a left child. \n\n1. **Base Case**: If the current node is `None`, we return 0, as there are no leaves to sum.\n2. **Left Leaf Check**: If the current node is a left child and is a leaf (both children are `None`), we return its value.\n3. **Recursive Calls**: We recursively call `dfs` for the left child (marking it as a left child) and the right child (marking it as not a left child). The results of these calls are summed up to get the total sum of left leaves.\n\nThe time complexity of this solution is O(n) because we visit each node exactly once. The space complexity is O(h), where h is the height of the tree, due to the recursion stack. In the worst case (a skewed tree), this could be O(n), but in a balanced tree, it would be O(log n).\n\nOverall, this solution efficiently computes the sum of all left leaves in the binary tree."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:53"
}