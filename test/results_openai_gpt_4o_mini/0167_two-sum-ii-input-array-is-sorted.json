{
  "problem": {
    "id": "167",
    "frontend_id": "167",
    "title": "Two Sum II - Input Array Is Sorted",
    "description": "Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.\nReturn the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.\nThe tests are generated such that there is exactly one solution. You may not use the same element twice.\nYour solution must use only constant extra space.\n \nExample 1:\n\nInput: numbers = [2,7,11,15], target = 9\nOutput: [1,2]\nExplanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].\n\nExample 2:\n\nInput: numbers = [2,3,4], target = 6\nOutput: [1,3]\nExplanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].\n\nExample 3:\n\nInput: numbers = [-1,0], target = -1\nOutput: [1,2]\nExplanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].\n\n \nConstraints:\n\n2 <= numbers.length <= 3 * 104\n-1000 <= numbers[i] <= 1000\nnumbers is sorted in non-decreasing order.\n-1000 <= target <= 1000\nThe tests are generated such that there is exactly one solution.\n\n",
    "difficulty": "Medium",
    "examples": [
      "[2,7,11,15]",
      "9",
      "[2,3,4]",
      "6",
      "[-1,0]",
      "-1"
    ],
    "structured_test_cases": [
      {
        "input": {
          "numbers": "[2,7,11,15]",
          "target": "9"
        },
        "expected": "[1,2]"
      },
      {
        "input": {
          "numbers": "[2,3,4]",
          "target": "6"
        },
        "expected": "[1,3]"
      },
      {
        "input": {
          "numbers": "[-1,0]",
          "target": "-1"
        },
        "expected": "[1,2]"
      }
    ],
    "python_starter": "class Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "twoSum",
      "params": [
        {
          "name": "numbers",
          "type": "integer[]"
        },
        {
          "name": "target",
          "type": "integer"
        }
      ],
      "return": {
        "type": "integer[]"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        left, right = 0, len(numbers) - 1\n        \n        while left < right:\n            current_sum = numbers[left] + numbers[right]\n            if current_sum == target:\n                return [left + 1, right + 1]  # Return 1-based indices\n            elif current_sum < target:\n                left += 1  # Move left pointer to the right\n            else:\n                right -= 1  # Move right pointer to the left",
    "explanation": "The solution uses the two-pointer technique to efficiently find the indices of the two numbers that sum up to the target. Here's a step-by-step breakdown of the approach:\n\n1. **Initialization**: We start with two pointers, `left` at the beginning (index 0) and `right` at the end (index `len(numbers) - 1`) of the array.\n\n2. **Looping**: We enter a while loop that continues as long as `left` is less than `right`. Inside the loop:\n   - We calculate the sum of the elements at the `left` and `right` pointers.\n   - If the sum equals the target, we return the indices of these elements, adjusted for 1-based indexing.\n   - If the sum is less than the target, we increment the `left` pointer to increase the sum.\n   - If the sum is greater than the target, we decrement the `right` pointer to decrease the sum.\n\n3. **Termination**: The loop will terminate when we find the correct pair, as the problem guarantees that there is exactly one solution.\n\n**Time Complexity**: O(n), where n is the number of elements in the input array. We only traverse the array once.\n\n**Space Complexity**: O(1), as we are using a constant amount of space for the two pointers.\n\nThis solution is optimal for the given problem constraints and efficiently finds the required indices."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: [1, 2]\nTest case 2:\n[PASS] Test passed: [1, 3]\nTest case 3:\n[PASS] Test passed: [1, 2]\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:40"
}