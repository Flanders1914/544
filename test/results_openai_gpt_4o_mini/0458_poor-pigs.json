{
  "problem": {
    "id": "458",
    "frontend_id": "458",
    "title": "Poor Pigs",
    "description": "There are buckets buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous.\nYou can feed the pigs according to these steps:\n\nChoose some live pigs to feed.\nFor each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs.\nWait for minutesToDie minutes. You may not feed any other pigs during this time.\nAfter minutesToDie minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.\nRepeat this process until you run out of time.\n\nGiven buckets, minutesToDie, and minutesToTest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.\n \nExample 1:\n\nInput: buckets = 4, minutesToDie = 15, minutesToTest = 15\nOutput: 2\nExplanation: We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3.\nAt time 15, there are 4 possible outcomes:\n- If only the first pig dies, then bucket 1 must be poisonous.\n- If only the second pig dies, then bucket 3 must be poisonous.\n- If both pigs die, then bucket 2 must be poisonous.\n- If neither pig dies, then bucket 4 must be poisonous.\n\nExample 2:\n\nInput: buckets = 4, minutesToDie = 15, minutesToTest = 30\nOutput: 2\nExplanation: We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig bucket 1, and feed the second pig bucket 2.\nAt time 15, there are 2 possible outcomes:\n- If either pig dies, then the poisonous bucket is the one it was fed.\n- If neither pig dies, then feed the first pig bucket 3, and feed the second pig bucket 4.\nAt time 30, one of the two pigs must die, and the poisonous bucket is the one it was fed.\n\n \nConstraints:\n\n1 <= buckets <= 1000\n1 <= minutesToDie <= minutesToTest <= 100\n\n",
    "difficulty": "Hard",
    "examples": [
      "4",
      "15",
      "15",
      "4",
      "15",
      "30"
    ],
    "structured_test_cases": [
      {
        "input": {
          "buckets": "4",
          "minutesToDie": "15",
          "minutesToTest": "15"
        },
        "expected": "2"
      },
      {
        "input": {
          "buckets": "4",
          "minutesToDie": "15",
          "minutesToTest": "30"
        },
        "expected": "2"
      }
    ],
    "python_starter": "class Solution:\n    def poorPigs(self, buckets: int, minutesToDie: int, minutesToTest: int) -> int:\n        ",
    "hints": [
      "What if you only have one shot? Eg. 4 buckets, 15 mins to die, and 15 mins to test.",
      "How many states can we generate with x pigs and T tests?",
      "Find minimum <code>x</code> such that <code>(T+1)^x >= N</code>"
    ],
    "meta_data": {
      "name": "poorPigs",
      "params": [
        {
          "name": "buckets",
          "type": "integer"
        },
        {
          "name": "minutesToDie",
          "type": "integer"
        },
        {
          "name": "minutesToTest",
          "type": "integer"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def poorPigs(self, buckets: int, minutesToDie: int, minutesToTest: int) -> int:\n        # Calculate the total number of tests we can perform\n        total_tests = minutesToTest // minutesToDie\n        \n        # Initialize the number of pigs needed\n        pigs = 0\n        \n        # Calculate the number of outcomes we can distinguish with pigs\n        while (total_tests + 1) ** pigs < buckets:\n            pigs += 1\n        \n        return pigs",
    "explanation": "The solution begins by calculating how many tests can be performed within the given time frame using the formula `total_tests = minutesToTest // minutesToDie`. This gives us the number of times we can test the pigs.\n\nNext, we initialize a counter `pigs` to zero, which will keep track of the number of pigs we need. We then enter a loop where we check if the number of distinguishable outcomes `(total_tests + 1) ** pigs` is less than the number of buckets. If it is, we increment the number of pigs and check again.\n\nThe loop continues until we find the minimum number of pigs such that the number of outcomes is at least equal to the number of buckets. Finally, we return the count of pigs.\n\n### Time Complexity\nThe time complexity of this solution is O(log(buckets)), as we are effectively doubling the number of outcomes with each additional pig, leading to a logarithmic growth in the number of iterations needed to satisfy the condition.\n\n### Space Complexity\nThe space complexity is O(1) since we are using a constant amount of space regardless of the input size."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 2\nTest case 2:\n[PASS] Test passed: 2\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:57"
}