{
  "problem": {
    "id": "210",
    "frontend_id": "210",
    "title": "Course Schedule II",
    "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n\nFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\n\nReturn the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.\n \nExample 1:\n\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: [0,1]\nExplanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\n\nExample 2:\n\nInput: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\nOutput: [0,2,1,3]\nExplanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\n\nExample 3:\n\nInput: numCourses = 1, prerequisites = []\nOutput: [0]\n\n \nConstraints:\n\n1 <= numCourses <= 2000\n0 <= prerequisites.length <= numCourses * (numCourses - 1)\nprerequisites[i].length == 2\n0 <= ai, bi < numCourses\nai != bi\nAll the pairs [ai, bi] are distinct.\n\n",
    "difficulty": "Medium",
    "examples": [
      "2",
      "[[1,0]]",
      "4",
      "[[1,0],[2,0],[3,1],[3,2]]",
      "1",
      "[]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "numCourses": "2",
          "prerequisites": "[[1,0]"
        },
        "expected": "[0,1]"
      },
      {
        "input": {
          "numCourses": "4",
          "prerequisites": "[[1,0]"
        },
        "expected": "[0,2,1,3]"
      },
      {
        "input": {
          "numCourses": "1",
          "prerequisites": "[]"
        },
        "expected": "[0]"
      }
    ],
    "python_starter": "class Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        ",
    "hints": [
      "This problem is equivalent to finding the topological order in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.",
      "<a href=\"https://www.youtube.com/watch?v=ozso3xxkVGU\" target=\"_blank\">Topological Sort via DFS</a> - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.",
      "Topological sort could also be done via <a href=\"http://en.wikipedia.org/wiki/Topological_sorting#Algorithms\" target=\"_blank\">BFS</a>."
    ],
    "meta_data": {
      "name": "findOrder",
      "params": [
        {
          "name": "numCourses",
          "type": "integer"
        },
        {
          "name": "prerequisites",
          "type": "integer[][]"
        }
      ],
      "return": {
        "type": "integer[]"
      }
    }
  },
  "solution": {
    "code": "from collections import deque\nfrom typing import List\n\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        # Step 1: Create the adjacency list and indegree array\n        graph = [[] for _ in range(numCourses)]\n        indegree = [0] * numCourses\n        \n        # Step 2: Fill the graph and indegree array\n        for course, prereq in prerequisites:\n            graph[prereq].append(course)  # prereq -> course\n            indegree[course] += 1\n        \n        # Step 3: Initialize the queue with courses that have no prerequisites\n        queue = deque([i for i in range(numCourses) if indegree[i] == 0])\n        order = []\n        \n        # Step 4: Process the courses\n        while queue:\n            current = queue.popleft()\n            order.append(current)\n            for neighbor in graph[current]:\n                indegree[neighbor] -= 1\n                if indegree[neighbor] == 0:\n                    queue.append(neighbor)\n        \n        # Step 5: Check if we were able to take all courses\n        if len(order) == numCourses:\n            return order\n        else:\n            return []",
    "explanation": "The solution uses Kahn's algorithm for topological sorting to determine the order of courses based on their prerequisites. \n\n1. **Graph Construction**: We create an adjacency list to represent the graph and an indegree array to track how many prerequisites each course has.\n\n2. **Queue Initialization**: We initialize a queue with all courses that have no prerequisites (indegree of 0).\n\n3. **Processing Courses**: We repeatedly remove courses from the queue, add them to the result list, and reduce the indegree of their dependent courses. If any dependent course's indegree reaches 0, it is added to the queue.\n\n4. **Cycle Detection**: If the length of the result list equals the number of courses, we have a valid order. If not, it indicates a cycle in the graph, and we return an empty list.\n\n**Time Complexity**: O(V + E), where V is the number of courses (vertices) and E is the number of prerequisite pairs (edges). Each course and each prerequisite is processed once.\n\n**Space Complexity**: O(V + E) for storing the graph and the indegree array.\n\nThis approach efficiently finds a valid course order or determines if it's impossible to complete all courses."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmps4bd_97c.py\", line 69\n    input_0_1 = [[1,0]\n                 ^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n"
  },
  "timestamp": "2025-04-01 18:00:42"
}