{
  "problem": {
    "id": "1013",
    "frontend_id": "509",
    "title": "Fibonacci Number",
    "description": "The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,\n\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n > 1.\n\nGiven n, calculate F(n).\n \nExample 1:\n\nInput: n = 2\nOutput: 1\nExplanation: F(2) = F(1) + F(0) = 1 + 0 = 1.\n\nExample 2:\n\nInput: n = 3\nOutput: 2\nExplanation: F(3) = F(2) + F(1) = 1 + 1 = 2.\n\nExample 3:\n\nInput: n = 4\nOutput: 3\nExplanation: F(4) = F(3) + F(2) = 2 + 1 = 3.\n\n \nConstraints:\n\n0 <= n <= 30\n\n",
    "difficulty": "Easy",
    "examples": [
      "2",
      "3",
      "4"
    ],
    "structured_test_cases": [
      {
        "input": {
          "n": "2"
        },
        "expected": "1"
      },
      {
        "input": {
          "n": "3"
        },
        "expected": "2"
      },
      {
        "input": {
          "n": "4"
        },
        "expected": "3"
      }
    ],
    "python_starter": "class Solution:\n    def fib(self, n: int) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "fib",
      "params": [
        {
          "name": "n",
          "type": "integer"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def fib(self, n: int) -> int:\n        # Handle base cases\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        \n        # Initialize the first two Fibonacci numbers\n        a, b = 0, 1\n        \n        # Compute Fibonacci numbers iteratively\n        for _ in range(2, n + 1):\n            a, b = b, a + b  # Update to the next Fibonacci numbers\n        \n        return b  # b now holds F(n)",
    "explanation": "The solution uses an iterative approach to calculate the nth Fibonacci number. We start by checking the base cases for n = 0 and n = 1, returning 0 and 1 respectively. For n greater than 1, we initialize two variables, `a` and `b`, to represent F(0) and F(1). \n\nWe then enter a loop that runs from 2 to n, updating `a` and `b` in each iteration. The variable `b` always holds the current Fibonacci number, while `a` holds the previous one. After completing the loop, `b` contains the value of F(n), which we return.\n\nThe time complexity of this solution is O(n) because we perform a constant amount of work for each number from 2 to n. The space complexity is O(1) since we only use a fixed amount of space for the variables `a` and `b`, regardless of the input size.\n\nThis approach is efficient and works well within the given constraints (0 <= n <= 30)."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 1\nTest case 2:\n[PASS] Test passed: 2\nTest case 3:\n[PASS] Test passed: 3\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:01:21"
}