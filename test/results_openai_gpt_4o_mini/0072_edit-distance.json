{
  "problem": {
    "id": "72",
    "frontend_id": "72",
    "title": "Edit Distance",
    "description": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\nYou have the following three operations permitted on a word:\n\nInsert a character\nDelete a character\nReplace a character\n\n \nExample 1:\n\nInput: word1 = \"horse\", word2 = \"ros\"\nOutput: 3\nExplanation: \nhorse -> rorse (replace 'h' with 'r')\nrorse -> rose (remove 'r')\nrose -> ros (remove 'e')\n\nExample 2:\n\nInput: word1 = \"intention\", word2 = \"execution\"\nOutput: 5\nExplanation: \nintention -> inention (remove 't')\ninention -> enention (replace 'i' with 'e')\nenention -> exention (replace 'n' with 'x')\nexention -> exection (replace 'n' with 'c')\nexection -> execution (insert 'u')\n\n \nConstraints:\n\n0 <= word1.length, word2.length <= 500\nword1 and word2 consist of lowercase English letters.\n\n",
    "difficulty": "Medium",
    "examples": [
      "\"horse\"",
      "\"ros\"",
      "\"intention\"",
      "\"execution\""
    ],
    "structured_test_cases": [
      {
        "input": {
          "word1": "\"horse\"",
          "word2": "\"ros\""
        },
        "expected": "3"
      },
      {
        "input": {
          "word1": "\"intention\"",
          "word2": "\"execution\""
        },
        "expected": "5"
      }
    ],
    "python_starter": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "minDistance",
      "params": [
        {
          "name": "word1",
          "type": "string"
        },
        {
          "name": "word2",
          "type": "string"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        # Get lengths of both words\n        m, n = len(word1), len(word2)\n        \n        # Create a 2D array to store results of subproblems\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        # Initialize base cases\n        for i in range(m + 1):\n            dp[i][0] = i  # Deleting all characters from word1\n        for j in range(n + 1):\n            dp[0][j] = j  # Inserting all characters into word1 to form word2\n        \n        # Fill the dp array\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]  # No operation needed\n                else:\n                    dp[i][j] = min(dp[i - 1][j] + 1,    # Delete\n                                   dp[i][j - 1] + 1,    # Insert\n                                   dp[i - 1][j - 1] + 1)  # Replace\n        \n        # The answer is in the bottom-right cell\n        return dp[m][n]",
    "explanation": "The solution uses dynamic programming to compute the minimum edit distance between two strings. We create a 2D list `dp` where `dp[i][j]` holds the minimum number of operations required to convert the first `i` characters of `word1` to the first `j` characters of `word2`.\n\n1. **Initialization**: We initialize the first row and column of the `dp` array. The first row represents converting an empty `word1` to `word2` by inserting all characters, while the first column represents converting `word1` to an empty `word2` by deleting all characters.\n\n2. **Filling the DP Table**: We iterate through each character of both strings. If the characters match, we carry over the value from the diagonal (no new operation needed). If they don't match, we calculate the minimum operations needed by considering the three possible operations (insert, delete, replace) and take the minimum.\n\n3. **Final Result**: The value in `dp[m][n]` gives the minimum number of operations required to convert `word1` to `word2`.\n\n**Time Complexity**: O(m * n), where m and n are the lengths of `word1` and `word2`, respectively. This is because we fill a 2D array of size (m+1) x (n+1).\n\n**Space Complexity**: O(m * n) for the dp array. However, we can optimize this to O(min(m, n)) by only keeping the current and previous rows if needed."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 3\nTest case 2:\n[PASS] Test passed: 5\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:31"
}