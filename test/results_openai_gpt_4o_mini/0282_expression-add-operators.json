{
  "problem": {
    "id": "282",
    "frontend_id": "282",
    "title": "Expression Add Operators",
    "description": "Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value.\nNote that operands in the returned expressions should not contain leading zeros.\n \nExample 1:\n\nInput: num = \"123\", target = 6\nOutput: [\"1*2*3\",\"1+2+3\"]\nExplanation: Both \"1*2*3\" and \"1+2+3\" evaluate to 6.\n\nExample 2:\n\nInput: num = \"232\", target = 8\nOutput: [\"2*3+2\",\"2+3*2\"]\nExplanation: Both \"2*3+2\" and \"2+3*2\" evaluate to 8.\n\nExample 3:\n\nInput: num = \"3456237490\", target = 9191\nOutput: []\nExplanation: There are no expressions that can be created from \"3456237490\" to evaluate to 9191.\n\n \nConstraints:\n\n1 <= num.length <= 10\nnum consists of only digits.\n-231 <= target <= 231 - 1\n\n",
    "difficulty": "Hard",
    "examples": [
      "\"123\"",
      "6",
      "\"232\"",
      "8",
      "\"3456237490\"",
      "9191"
    ],
    "structured_test_cases": [
      {
        "input": {
          "num": "\"123\"",
          "target": "6"
        },
        "expected": "[1*2*3,1+2+3]"
      },
      {
        "input": {
          "num": "\"232\"",
          "target": "8"
        },
        "expected": "[2*3+2,2+3*2]"
      },
      {
        "input": {
          "num": "\"3456237490\"",
          "target": "9191"
        },
        "expected": "[]"
      }
    ],
    "python_starter": "class Solution:\n    def addOperators(self, num: str, target: int) -> List[str]:\n        ",
    "hints": [
      "Note that a number can contain multiple digits.",
      "Since the question asks us to find <b>all</b> of the valid expressions, we need a way to iterate over all of them. (<b>Hint:</b> Recursion!)",
      "We can keep track of the expression string and evaluate it at the very end. But that would take a lot of time. Can we keep track of the expression's value as well so as to avoid the evaluation at the very end of recursion?",
      "Think carefully about the multiply operator. It has a higher precedence than the addition and subtraction operators. \r\n\r\n<br> 1 + 2 = 3  <br>\r\n1 + 2 - 4 --> 3 - 4 --> -1 <br>\r\n1 + 2 - 4 * 12 --> -1 * 12 --> -12 (WRONG!) <br>\r\n1 + 2 - 4 * 12 --> -1 - (-4) + (-4 * 12) --> 3 + (-48) --> -45 (CORRECT!)",
      "We simply need to keep track of the last operand in our expression and reverse it's effect on the expression's value while considering the multiply operator."
    ],
    "meta_data": {
      "name": "addOperators",
      "params": [
        {
          "name": "num",
          "type": "string"
        },
        {
          "name": "target",
          "type": "integer"
        }
      ],
      "return": {
        "type": "list<string>"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def addOperators(self, num: str, target: int) -> List[str]:\n        def backtrack(index: int, prev_operand: int, current_value: int, expression: str):\n            # If we have reached the end of the string\n            if index == len(num):\n                if current_value == target:\n                    results.append(expression)\n                return\n            \n            for i in range(index, len(num)):\n                # Get the current number from the string\n                current_str = num[index:i + 1]\n                current_num = int(current_str)\n                \n                # Skip numbers with leading zeros\n                if len(current_str) > 1 and current_str[0] == '0':\n                    break\n                \n                # Recur with '+' operator\n                backtrack(i + 1, current_num, current_value + current_num, expression + '+' + current_str if expression else current_str)\n                # Recur with '-' operator\n                backtrack(i + 1, -current_num, current_value - current_num, expression + '-' + current_str)\n                # Recur with '*' operator\n                backtrack(i + 1, prev_operand * current_num, current_value - prev_operand + (prev_operand * current_num), expression + '*' + current_str)\n\n        results = []\n        backtrack(0, 0, 0, \"\")\n        return results",
    "explanation": "The solution uses a recursive backtracking approach to explore all possible ways to insert the operators between the digits of the input string `num`. \n\n1. **Function Definition**: The `addOperators` function initializes the backtracking process. It defines a nested function `backtrack` that takes the current index in the string, the last operand used, the current evaluated value, and the expression built so far.\n\n2. **Base Case**: When the index reaches the length of `num`, we check if the current evaluated value matches the target. If it does, we add the expression to the results list.\n\n3. **Looping through Digits**: The loop iterates through the digits starting from the current index. For each digit, it forms a number and checks for leading zeros. If valid, it recursively calls `backtrack` for each operator ('+', '-', '*').\n\n4. **Handling Multiplication**: When using multiplication, we adjust the current value by removing the last operand and adding the new product to maintain the correct order of operations.\n\n5. **Time Complexity**: The time complexity is O(4^N) where N is the length of the string, as each digit can lead to three choices (adding an operator or not) and we can have up to N digits.\n\n6. **Space Complexity**: The space complexity is O(N) for the recursion stack and the results list.\n\nThis approach efficiently explores all combinations and returns the valid expressions that evaluate to the target value."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:46"
}