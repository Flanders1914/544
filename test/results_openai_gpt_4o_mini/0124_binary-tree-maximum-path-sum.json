{
  "problem": {
    "id": "124",
    "frontend_id": "124",
    "title": "Binary Tree Maximum Path Sum",
    "description": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\nThe path sum of a path is the sum of the node's values in the path.\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.\n \nExample 1:\n\n\nInput: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n\nExample 2:\n\n\nInput: root = [-10,9,20,null,null,15,7]\nOutput: 42\nExplanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [1, 3 * 104].\n-1000 <= Node.val <= 1000\n\n",
    "difficulty": "Hard",
    "examples": [
      "[1,2,3]",
      "[-10,9,20,null,null,15,7]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "root": "[1,2,3]"
        },
        "expected": "6"
      },
      {
        "input": {
          "root": "[-10,9,20,null,null,15,7]"
        },
        "expected": "42"
      }
    ],
    "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "maxPathSum",
      "params": [
        {
          "name": "root",
          "type": "TreeNode"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        self.max_sum = float('-inf')  # Initialize the maximum sum to negative infinity\n\n        def max_gain(node):\n            if not node:\n                return 0  # Base case: if the node is None, return 0\n\n            # Recursively get the maximum path sum from the left and right children\n            left_gain = max(max_gain(node.left), 0)  # Only consider positive gains\n            right_gain = max(max_gain(node.right), 0)\n\n            # Calculate the price of the current path\n            current_path_sum = node.val + left_gain + right_gain\n\n            # Update the global maximum path sum\n            self.max_sum = max(self.max_sum, current_path_sum)\n\n            # Return the maximum gain that can be obtained from this node to its parent\n            return node.val + max(left_gain, right_gain)\n\n        max_gain(root)  # Start the recursion from the root\n        return self.max_sum  # Return the maximum path sum found",
    "explanation": "The provided solution uses a depth-first search (DFS) approach to traverse the binary tree and calculate the maximum path sum. The `max_gain` function is a helper function that computes the maximum gain from a given node to its parent. \n\n1. **Base Case**: If the node is `None`, it returns 0, indicating that there is no contribution to the path sum from a non-existent node.\n2. **Recursive Calls**: The function recursively calculates the maximum path sums for the left and right children. It uses `max(..., 0)` to ensure that only positive contributions are considered, as negative values would decrease the overall path sum.\n3. **Current Path Calculation**: The current path sum is calculated by adding the node's value to the maximum gains from both children. This value is then compared with the global maximum path sum (`self.max_sum`), which is updated if the current path sum is greater.\n4. **Return Value**: The function returns the maximum gain that can be passed to the parent node, which is the node's value plus the maximum of the left or right gains.\n\n**Time Complexity**: O(N), where N is the number of nodes in the tree, as each node is visited once.\n\n**Space Complexity**: O(H), where H is the height of the tree, due to the recursion stack. In the worst case (unbalanced tree), this could be O(N), but in a balanced tree, it would be O(log N).\n\nOverall, this solution efficiently computes the maximum path sum in a binary tree by leveraging recursion and maintaining a global maximum."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:36"
}