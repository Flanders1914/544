{
  "problem": {
    "id": "5",
    "frontend_id": "5",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s.\n \nExample 1:\n\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\n\nExample 2:\n\nInput: s = \"cbbd\"\nOutput: \"bb\"\n\n \nConstraints:\n\n1 <= s.length <= 1000\ns consist of only digits and English letters.\n\n",
    "difficulty": "Medium",
    "examples": [
      "\"babad\"",
      "\"cbbd\""
    ],
    "structured_test_cases": [
      {
        "input": {
          "s": "\"babad\""
        },
        "expected": "bab"
      },
      {
        "input": {
          "s": "\"cbbd\""
        },
        "expected": "bb"
      }
    ],
    "python_starter": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        ",
    "hints": [
      "How can we reuse a previously computed palindrome to compute a larger palindrome?",
      "If “aba” is a palindrome, is “xabax” a palindrome? Similarly is “xabay” a palindrome?",
      "Complexity based hint:</br>\r\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation."
    ],
    "meta_data": {
      "name": "longestPalindrome",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ],
      "return": {
        "type": "string"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        if len(s) < 1:\n            return \"\"\n        \n        start, end = 0, 0\n        \n        for i in range(len(s)):\n            len1 = self.expandAroundCenter(s, i, i)   # Odd length palindromes\n            len2 = self.expandAroundCenter(s, i, i + 1)  # Even length palindromes\n            max_len = max(len1, len2)\n            \n            if max_len > end - start:\n                start = i - (max_len - 1) // 2\n                end = i + max_len // 2\n        \n        return s[start:end + 1]\n    \n    def expandAroundCenter(self, s: str, left: int, right: int) -> int:\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return right - left - 1",
    "explanation": "The solution uses the \"expand around center\" technique to find the longest palindromic substring. The main function `longestPalindrome` iterates through each character in the string, treating each character and each pair of characters as potential centers of a palindrome. \n\nFor each center, it calls the helper function `expandAroundCenter`, which expands outwards as long as the characters on both sides are equal. The length of the palindrome found is returned, and we keep track of the maximum length found so far. If a longer palindrome is found, we update the start and end indices accordingly.\n\nThe time complexity of this solution is O(n^2) because for each character, we may expand up to n/2 times in the worst case. The space complexity is O(1) since we are only using a few integer variables to store indices and lengths.\n\nThis approach is efficient given the constraints (1 <= s.length <= 1000) and works well within the limits."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:25"
}