{
  "problem": {
    "id": "143",
    "frontend_id": "143",
    "title": "Reorder List",
    "description": "You are given the head of a singly linked-list. The list can be represented as:\n\nL0 → L1 → … → Ln - 1 → Ln\n\nReorder the list to be on the following form:\n\nL0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …\n\nYou may not modify the values in the list's nodes. Only nodes themselves may be changed.\n \nExample 1:\n\n\nInput: head = [1,2,3,4]\nOutput: [1,4,2,3]\n\nExample 2:\n\n\nInput: head = [1,2,3,4,5]\nOutput: [1,5,2,4,3]\n\n \nConstraints:\n\nThe number of nodes in the list is in the range [1, 5 * 104].\n1 <= Node.val <= 1000\n\n",
    "difficulty": "Medium",
    "examples": [
      "[1,2,3,4]",
      "[1,2,3,4,5]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "head": "[1,2,3,4]"
        },
        "expected": "[1,4,2,3]"
      }
    ],
    "python_starter": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reorderList(self, head: Optional[ListNode]) -> None:\n        \"\"\"\n        Do not return anything, modify head in-place instead.\n        \"\"\"\n        ",
    "hints": [],
    "meta_data": {
      "name": "reorderList",
      "params": [
        {
          "name": "head",
          "type": "ListNode"
        }
      ],
      "return": {
        "type": "void"
      },
      "output": {
        "paramindex": 0
      }
    }
  },
  "solution": {
    "code": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reorderList(self, head: Optional[ListNode]) -> None:\n        if not head or not head.next:\n            return\n        \n        # Step 1: Find the middle of the list\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # Step 2: Reverse the second half of the list\n        prev, curr = None, slow\n        while curr:\n            next_temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_temp\n        \n        # Step 3: Merge the two halves\n        first, second = head, prev\n        while second.next:\n            temp1, temp2 = first.next, second.next\n            first.next = second\n            second.next = temp1\n            first, second = temp1, temp2",
    "explanation": "The solution consists of three main steps:\n\n1. **Finding the Middle**: We use two pointers, `slow` and `fast`, to find the middle of the linked list. The `slow` pointer moves one step at a time, while the `fast` pointer moves two steps. When `fast` reaches the end of the list, `slow` will be at the middle. This operation takes O(n) time, where n is the number of nodes in the list.\n\n2. **Reversing the Second Half**: Starting from the middle node, we reverse the second half of the list. We maintain a `prev` pointer to keep track of the reversed list. This also takes O(n) time.\n\n3. **Merging the Two Halves**: We then merge the two halves by alternating nodes from the first half and the reversed second half. This is done in a single pass through both halves, which again takes O(n) time.\n\nOverall, the time complexity of the solution is O(n), and the space complexity is O(1) since we are modifying the list in place without using any additional data structures."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:38"
}