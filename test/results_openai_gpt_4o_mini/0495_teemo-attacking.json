{
  "problem": {
    "id": "495",
    "frontend_id": "495",
    "title": "Teemo Attacking",
    "description": "Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.\nYou are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration.\nReturn the total number of seconds that Ashe is poisoned.\n \nExample 1:\n\nInput: timeSeries = [1,4], duration = 2\nOutput: 4\nExplanation: Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\nAshe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.\n\nExample 2:\n\nInput: timeSeries = [1,2], duration = 2\nOutput: 3\nExplanation: Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.\nAshe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.\n \nConstraints:\n\n1 <= timeSeries.length <= 104\n0 <= timeSeries[i], duration <= 107\ntimeSeries is sorted in non-decreasing order.\n\n",
    "difficulty": "Easy",
    "examples": [
      "[1,4]",
      "2",
      "[1,2]",
      "2"
    ],
    "structured_test_cases": [
      {
        "input": {
          "timeSeries": "[1,4]",
          "duration": "2"
        },
        "expected": "4"
      },
      {
        "input": {
          "timeSeries": "[1,2]",
          "duration": "2"
        },
        "expected": "3"
      }
    ],
    "python_starter": "class Solution:\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "findPoisonedDuration",
      "params": [
        {
          "name": "timeSeries",
          "type": "integer[]"
        },
        {
          "name": "duration",
          "type": "integer"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\n        if not timeSeries:\n            return 0\n        \n        total_poisoned_time = 0\n        n = len(timeSeries)\n        \n        for i in range(n):\n            if i == 0:\n                # First attack, always adds full duration\n                total_poisoned_time += duration\n            else:\n                # Calculate the end of the previous poison effect\n                previous_end = timeSeries[i - 1] + duration\n                if timeSeries[i] < previous_end:\n                    # Overlapping poison effect\n                    total_poisoned_time += timeSeries[i] - timeSeries[i - 1]\n                else:\n                    # No overlap, add full duration\n                    total_poisoned_time += duration\n        \n        return total_poisoned_time",
    "explanation": "The solution iterates through the `timeSeries` list to calculate the total poisoned duration. Here's a step-by-step breakdown:\n\n1. **Initialization**: We start by checking if the `timeSeries` is empty. If it is, we return 0 since there are no attacks. We also initialize `total_poisoned_time` to 0.\n\n2. **Loop through attacks**: We loop through each attack time in `timeSeries`:\n   - For the first attack, we always add the full `duration` to `total_poisoned_time`.\n   - For subsequent attacks, we check if the current attack time overlaps with the previous attack's poison effect:\n     - If it does overlap (i.e., the current attack time is less than the end of the previous poison effect), we add the difference between the current attack time and the previous attack time to `total_poisoned_time`.\n     - If it does not overlap, we add the full `duration` again.\n\n3. **Return the result**: Finally, we return the total poisoned time.\n\n**Time Complexity**: O(n), where n is the number of attacks in `timeSeries`. We make a single pass through the list.\n\n**Space Complexity**: O(1), as we are using a constant amount of space for variables regardless of the input size.\n\nThis approach efficiently calculates the total poisoned duration while handling overlapping poison effects correctly."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 4\nTest case 2:\n[PASS] Test passed: 3\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:01:20"
}