{
  "problem": {
    "id": "420",
    "frontend_id": "420",
    "title": "Strong Password Checker",
    "description": "A password is considered strong if the below conditions are all met:\n\nIt has at least 6 characters and at most 20 characters.\nIt contains at least one lowercase letter, at least one uppercase letter, and at least one digit.\nIt does not contain three repeating characters in a row (i.e., \"Baaabb0\" is weak, but \"Baaba0\" is strong).\n\nGiven a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.\nIn one step, you can:\n\nInsert one character to password,\nDelete one character from password, or\nReplace one character of password with another character.\n\n \nExample 1:\nInput: password = \"a\"\nOutput: 5\nExample 2:\nInput: password = \"aA1\"\nOutput: 3\nExample 3:\nInput: password = \"1337C0d3\"\nOutput: 0\n\n \nConstraints:\n\n1 <= password.length <= 50\npassword consists of letters, digits, dot '.' or exclamation mark '!'.\n\n",
    "difficulty": "Hard",
    "examples": [
      "\"a\"",
      "\"aA1\"",
      "\"1337C0d3\""
    ],
    "structured_test_cases": [
      {
        "input": {
          "password": "\"a\""
        },
        "expected": "5"
      }
    ],
    "python_starter": "class Solution:\n    def strongPasswordChecker(self, password: str) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "strongPasswordChecker",
      "params": [
        {
          "name": "password",
          "type": "string"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def strongPasswordChecker(self, password: str) -> int:\n        # Initialize counters\n        n = len(password)\n        has_lower = any(c.islower() for c in password)\n        has_upper = any(c.isupper() for c in password)\n        has_digit = any(c.isdigit() for c in password)\n        \n        # Count missing character types\n        missing_types = 3 - (has_lower + has_upper + has_digit)\n        \n        # Count replacements needed for repeating characters\n        replace_count = 0\n        i = 2\n        \n        while i < n:\n            if password[i] == password[i - 1] == password[i - 2]:\n                length = 2\n                while i < n and password[i] == password[i - 1]:\n                    length += 1\n                    i += 1\n                replace_count += length // 3\n            else:\n                i += 1\n        \n        # If the password is too short\n        if n < 6:\n            return max(missing_types, 6 - n)\n        \n        # If the password is too long\n        elif n > 20:\n            excess_length = n - 20\n            replace_count -= min(excess_length, replace_count)\n            return excess_length + max(missing_types, replace_count)\n        \n        # If the password is of valid length\n        else:\n            return max(missing_types, replace_count)",
    "explanation": "The solution begins by checking the length of the password and whether it contains at least one lowercase letter, one uppercase letter, and one digit. We use boolean flags to track the presence of these character types.\n\nNext, we iterate through the password to identify any sequences of three or more repeating characters. For each sequence found, we calculate how many replacements are needed to break the sequence into valid characters.\n\nAfter gathering all necessary information, we handle three cases based on the length of the password:\n1. **Short Password**: If the password is shorter than 6 characters, we return the maximum of the number of missing character types and the number of characters needed to reach a length of 6.\n2. **Long Password**: If the password exceeds 20 characters, we calculate how many characters need to be deleted and adjust the replacement count accordingly. The final return value is the sum of the excess characters and any remaining replacements needed.\n3. **Valid Length**: If the password is within the valid length, we simply return the maximum of the missing character types and the number of replacements needed.\n\nThe time complexity of this solution is O(n), where n is the length of the password, as we make a single pass through the password to check for character types and repetitions. The space complexity is O(1) since we are using a fixed amount of space for counters and flags."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:54"
}