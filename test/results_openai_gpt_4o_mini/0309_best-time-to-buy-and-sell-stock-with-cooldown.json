{
  "problem": {
    "id": "309",
    "frontend_id": "309",
    "title": "Best Time to Buy and Sell Stock with Cooldown",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\nFind the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\n\nAfter you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).\n\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n \nExample 1:\n\nInput: prices = [1,2,3,0,2]\nOutput: 3\nExplanation: transactions = [buy, sell, cooldown, buy, sell]\n\nExample 2:\n\nInput: prices = [1]\nOutput: 0\n\n \nConstraints:\n\n1 <= prices.length <= 5000\n0 <= prices[i] <= 1000\n\n",
    "difficulty": "Medium",
    "examples": [
      "[1,2,3,0,2]",
      "[1]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "prices": "[1,2,3,0,2]"
        },
        "expected": "3"
      },
      {
        "input": {
          "prices": "[1]"
        },
        "expected": "0"
      }
    ],
    "python_starter": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "maxProfit",
      "params": [
        {
          "name": "prices",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        if not prices:\n            return 0\n        \n        n = len(prices)\n        hold = [0] * n\n        sold = [0] * n\n        rest = [0] * n\n        \n        # Base cases\n        hold[0] = -prices[0]  # We buy on the first day\n        sold[0] = 0           # Cannot sell on the first day\n        rest[0] = 0           # Resting on the first day\n        \n        for i in range(1, n):\n            hold[i] = max(hold[i-1], rest[i-1] - prices[i])  # Either hold or buy\n            sold[i] = hold[i-1] + prices[i]                    # Sell today\n            rest[i] = max(rest[i-1], sold[i-1])                # Rest today\n        \n        return max(sold[n-1], rest[n-1])  # Max profit can be from sold or resting on the last day",
    "explanation": "The solution uses dynamic programming to keep track of three states: holding a stock, selling a stock, and resting. We initialize the states for the first day and then iterate through the prices array to update the states based on the defined transitions.\n\n1. **Time Complexity**: The algorithm runs in O(n) time, where n is the number of days (length of the prices array). This is because we only make a single pass through the prices array.\n\n2. **Space Complexity**: The space complexity is O(n) due to the use of three arrays to store the states for each day. However, we can optimize this to O(1) by only keeping track of the last day's states since the current state only depends on the previous day's states.\n\nIn conclusion, the solution efficiently calculates the maximum profit while adhering to the cooldown constraint, ensuring that we maximize our returns from stock trading."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 3\nTest case 2:\n[PASS] Test passed: 0\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:47"
}