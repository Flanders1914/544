{
  "problem": {
    "id": "84",
    "frontend_id": "84",
    "title": "Largest Rectangle in Histogram",
    "description": "Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\n \nExample 1:\n\n\nInput: heights = [2,1,5,6,2,3]\nOutput: 10\nExplanation: The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.\n\nExample 2:\n\n\nInput: heights = [2,4]\nOutput: 4\n\n \nConstraints:\n\n1 <= heights.length <= 105\n0 <= heights[i] <= 104\n\n",
    "difficulty": "Hard",
    "examples": [
      "[2,1,5,6,2,3]",
      "[2,4]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "heights": "[2,1,5,6,2,3]"
        },
        "expected": "10"
      },
      {
        "input": {
          "heights": "[2,4]"
        },
        "expected": "4"
      }
    ],
    "python_starter": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "largestRectangleArea",
      "params": [
        {
          "name": "heights",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        # Initialize a stack to keep track of indices of the histogram bars\n        stack = []\n        max_area = 0\n        # Append a zero height to handle remaining bars in the stack at the end\n        heights.append(0)\n\n        for i in range(len(heights)):\n            # While the current height is less than the height of the bar at the index stored at the top of the stack\n            while stack and heights[i] < heights[stack[-1]]:\n                # Pop the top index\n                h = heights[stack.pop()]\n                # Calculate the width\n                w = i if not stack else i - stack[-1] - 1\n                # Calculate the area and update max_area\n                max_area = max(max_area, h * w)\n            # Push the current index onto the stack\n            stack.append(i)\n\n        return max_area",
    "explanation": "The provided solution uses a stack to efficiently calculate the largest rectangle area in a histogram. Here's a step-by-step breakdown of how the algorithm works:\n\n1. **Initialization**: We create an empty stack and a variable `max_area` to keep track of the maximum area found. We append a zero to the `heights` list to ensure that we can process all remaining bars in the stack at the end.\n\n2. **Iterating through heights**: We loop through each index `i` in the `heights` list. For each height, we check if it is less than the height of the bar at the index stored at the top of the stack.\n\n3. **Calculating area**: If the current height is less, we pop the index from the stack and calculate the area of the rectangle that can be formed with the height of the popped index. The width is determined by the difference between the current index and the index of the new top of the stack (after popping). If the stack is empty after popping, it means the popped height was the smallest so far, and the width extends from the start to the current index.\n\n4. **Updating max_area**: We update `max_area` with the maximum area found during the calculations.\n\n5. **Pushing current index**: After processing the heights that are taller than the current height, we push the current index onto the stack.\n\n6. **Final return**: After the loop, we return `max_area`, which contains the area of the largest rectangle found.\n\n**Time Complexity**: O(n) - Each bar is pushed and popped from the stack at most once.\n\n**Space Complexity**: O(n) - The stack can hold up to n indices in the worst case.\n\nThis efficient approach allows us to handle the constraints of the problem effectively."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 10\nTest case 2:\n[PASS] Test passed: 4\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:32"
}