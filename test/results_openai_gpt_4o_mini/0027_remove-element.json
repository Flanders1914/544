{
  "problem": {
    "id": "27",
    "frontend_id": "27",
    "title": "Remove Element",
    "description": "Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.\nConsider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:\n\nChange the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.\nReturn k.\n\nCustom Judge:\nThe judge will test your solution with the following code:\n\nint[] nums = [...]; // Input array\nint val = ...; // Value to remove\nint[] expectedNums = [...]; // The expected answer with correct length.\n                            // It is sorted with no values equaling val.\n\nint k = removeElement(nums, val); // Calls your implementation\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i < actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\nIf all assertions pass, then your solution will be accepted.\n \nExample 1:\n\nInput: nums = [3,2,2,3], val = 3\nOutput: 2, nums = [2,2,_,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\nExample 2:\n\nInput: nums = [0,1,2,2,3,0,4,2], val = 2\nOutput: 5, nums = [0,1,4,0,3,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n \nConstraints:\n\n0 <= nums.length <= 100\n0 <= nums[i] <= 50\n0 <= val <= 100\n\n",
    "difficulty": "Easy",
    "examples": [
      "[3,2,2,3]",
      "3",
      "[0,1,2,2,3,0,4,2]",
      "2"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[3,2,2,3]",
          "val": "3"
        },
        "expected": "2, nums = [2,2,_,_]"
      },
      {
        "input": {
          "nums": "[0,1,2,2,3,0,4,2]",
          "val": "2"
        },
        "expected": "5, nums = [0,1,4,0,3,_,_,_]"
      }
    ],
    "python_starter": "class Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        ",
    "hints": [
      "The problem statement clearly asks us to modify the array in-place and it also says that the element beyond the new length of the array can be anything. Given an element, we need to remove all the occurrences of it from the array. We don't technically need to <b>remove</b> that element per-say, right?",
      "We can move all the occurrences of this element to the end of the array. Use two pointers!\r\n<br><img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_remove_element.png\" width=\"500\"/>",
      "Yet another direction of thought is to consider the elements to be removed as non-existent. In a single pass, if we keep copying the visible elements in-place, that should also solve this problem for us."
    ],
    "meta_data": {
      "name": "removeElement",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "val",
          "type": "integer"
        }
      ],
      "return": {
        "type": "integer"
      },
      "output": {
        "paramindex": 0,
        "size": "ret"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        # Pointer for the position of the next valid element\n        k = 0\n        \n        # Iterate through each element in the array\n        for i in range(len(nums)):\n            # If the current element is not equal to val\n            if nums[i] != val:\n                # Place it at the next valid position\n                nums[k] = nums[i]\n                # Move the valid position pointer forward\n                k += 1\n        \n        # Return the count of valid elements\n        return k",
    "explanation": "The solution uses a single loop to traverse the input array `nums`. The variable `k` is initialized to 0 and serves as the index for the next position to place a valid element (i.e., an element not equal to `val`). \n\n1. We iterate through each element in `nums` using a for loop.\n2. For each element, we check if it is not equal to `val`. If it is not, we assign it to the position `k` in the array and increment `k`.\n3. By the end of the loop, `k` will represent the number of elements that are not equal to `val`, and the first `k` elements of `nums` will contain the valid elements.\n\nThe time complexity of this approach is O(n) because we make a single pass through the array, where n is the number of elements in `nums`. The space complexity is O(1) since we are modifying the input array in place and not using any additional data structures that depend on the size of the input.\n\nThis solution meets the problem's requirements and efficiently removes the specified value from the array while maintaining the order of the remaining elements."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:27"
}