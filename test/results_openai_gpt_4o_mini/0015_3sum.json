{
  "problem": {
    "id": "15",
    "frontend_id": "15",
    "title": "3Sum",
    "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\nNotice that the solution set must not contain duplicate triplets.\n \nExample 1:\n\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n\nExample 2:\n\nInput: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n\nExample 3:\n\nInput: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0.\n\n \nConstraints:\n\n3 <= nums.length <= 3000\n-105 <= nums[i] <= 105\n\n",
    "difficulty": "Medium",
    "examples": [
      "[-1,0,1,2,-1,-4]",
      "[0,1,1]",
      "[0,0,0]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[-1,0,1,2,-1,-4]"
        },
        "expected": "[[-1,-1,2]"
      },
      {
        "input": {
          "nums": "[0,1,1]"
        },
        "expected": "[]"
      },
      {
        "input": {
          "nums": "[0,0,0]"
        },
        "expected": "[[0,0,0]"
      }
    ],
    "python_starter": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        ",
    "hints": [
      "So, we essentially need to find three numbers x, y, and z such that they add up to the given value. If we fix one of the numbers say x, we are left with the two-sum problem at hand!",
      "For the two-sum problem, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y, which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
      "The second train of thought for two-sum is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
    ],
    "meta_data": {
      "name": "threeSum",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "list<list<integer>>",
        "colsize": 3,
        "dealloc": true
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        # Sort the input array\n        nums.sort()\n        result = []\n        \n        # Iterate through the array\n        for i in range(len(nums) - 2):\n            # Skip duplicate values for the first element\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            \n            # Set up two pointers\n            left, right = i + 1, len(nums) - 1\n            \n            while left < right:\n                current_sum = nums[i] + nums[left] + nums[right]\n                \n                if current_sum < 0:\n                    left += 1  # We need a larger sum\n                elif current_sum > 0:\n                    right -= 1  # We need a smaller sum\n                else:\n                    # Found a triplet\n                    result.append([nums[i], nums[left], nums[right]])\n                    \n                    # Skip duplicates for the second element\n                    while left < right and nums[left] == nums[left + 1]:\n                        left += 1\n                    # Skip duplicates for the third element\n                    while left < right and nums[right] == nums[right - 1]:\n                        right -= 1\n                    \n                    # Move both pointers\n                    left += 1\n                    right -= 1\n        \n        return result",
    "explanation": "The solution begins by sorting the input array, which allows us to efficiently find triplets that sum to zero while avoiding duplicates. The main steps of the algorithm are as follows:\n\n1. **Sorting**: The array is sorted in ascending order. This helps in easily skipping duplicates and using the two-pointer technique.\n2. **Outer Loop**: We iterate through each element of the array (up to the third last element) as a potential first element of the triplet.\n   - If the current element is the same as the previous one, we skip it to avoid duplicate triplets.\n3. **Two-Pointer Technique**: For each selected first element, we set two pointers: one starting just after the current element (`left`) and the other at the end of the array (`right`).\n   - We calculate the sum of the three elements. If the sum is less than zero, we move the left pointer to the right to increase the sum. If the sum is greater than zero, we move the right pointer to the left to decrease the sum. If the sum is zero, we have found a valid triplet.\n   - After finding a valid triplet, we skip over any duplicate values for both the left and right pointers to ensure uniqueness.\n4. **Return Result**: Finally, we return the list of unique triplets.\n\nThe time complexity of this solution is O(n^2) due to the nested loops, and the space complexity is O(1) if we disregard the output space, as we are using a constant amount of extra space for pointers and variables."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmp579g8k6s.py\", line 79\n    if compare_results(result_0, expected_0):\n                                            ^\nSyntaxError: invalid syntax\n"
  },
  "timestamp": "2025-04-01 18:00:26"
}