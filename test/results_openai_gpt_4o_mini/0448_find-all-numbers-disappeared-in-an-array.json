{
  "problem": {
    "id": "448",
    "frontend_id": "448",
    "title": "Find All Numbers Disappeared in an Array",
    "description": "Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.\n \nExample 1:\nInput: nums = [4,3,2,7,8,2,3,1]\nOutput: [5,6]\nExample 2:\nInput: nums = [1,1]\nOutput: [2]\n\n \nConstraints:\n\nn == nums.length\n1 <= n <= 105\n1 <= nums[i] <= n\n\n \nFollow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.\n",
    "difficulty": "Easy",
    "examples": [
      "[4,3,2,7,8,2,3,1]",
      "[1,1]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[4,3,2,7,8,2,3,1]"
        },
        "expected": "[5,6]"
      }
    ],
    "python_starter": "class Solution:\n    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:\n        ",
    "hints": [
      "This is a really easy problem if you decide to use additional memory. For those trying to write an initial solution using additional memory, think <b>counters!</b>",
      "However, the trick really is to not use any additional space than what is already available to use. Sometimes, multiple passes over the input array help find the solution. However, there's an interesting piece of information in this problem that makes it easy to re-use the input array itself for the solution.",
      "The problem specifies that the numbers in the array will be in the range [1, n] where n is the number of elements in the array. Can we use this information and modify the array in-place somehow to find what we need?"
    ],
    "meta_data": {
      "name": "findDisappearedNumbers",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "list<integer>"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:\n        # Iterate through the array\n        for num in nums:\n            # Use the absolute value to find the index to mark\n            index = abs(num) - 1\n            # Mark the number at that index as negative to indicate presence\n            if nums[index] > 0:\n                nums[index] = -nums[index]\n        \n        # Prepare a list to collect the missing numbers\n        missing_numbers = []\n        for i in range(len(nums)):\n            # If the number at index i is positive, then i + 1 is missing\n            if nums[i] > 0:\n                missing_numbers.append(i + 1)\n        \n        return missing_numbers",
    "explanation": "The solution works by first iterating through the `nums` array to mark the presence of each number. For each number `num`, we calculate its corresponding index as `abs(num) - 1`. We then negate the value at that index to indicate that the number `num` is present in the array. \n\nIn the second pass, we check each index of the array. If the value at that index is still positive, it means that the number corresponding to that index (which is `index + 1`) is missing from the original array. We collect all such missing numbers in a list and return it.\n\n### Time Complexity\nThe time complexity of this solution is O(n) because we make two passes through the array, each taking linear time.\n\n### Space Complexity\nThe space complexity is O(1) since we are modifying the input array in place and only using a constant amount of extra space for the output list.\n\nOverall, this approach efficiently finds the missing numbers while adhering to the constraints provided in the problem statement."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: [5, 6]\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:56"
}