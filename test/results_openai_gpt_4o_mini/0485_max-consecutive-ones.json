{
  "problem": {
    "id": "485",
    "frontend_id": "485",
    "title": "Max Consecutive Ones",
    "description": "Given a binary array nums, return the maximum number of consecutive 1's in the array.\n \nExample 1:\n\nInput: nums = [1,1,0,1,1,1]\nOutput: 3\nExplanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.\n\nExample 2:\n\nInput: nums = [1,0,1,1,0,1]\nOutput: 2\n\n \nConstraints:\n\n1 <= nums.length <= 105\nnums[i] is either 0 or 1.\n\n",
    "difficulty": "Easy",
    "examples": [
      "[1,1,0,1,1,1]",
      "[1,0,1,1,0,1]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[1,1,0,1,1,1]"
        },
        "expected": "3"
      },
      {
        "input": {
          "nums": "[1,0,1,1,0,1]"
        },
        "expected": "2"
      }
    ],
    "python_starter": "class Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\n        ",
    "hints": [
      "You need to think about two things as far as any window is concerned. One is the starting point for the window. How do you detect that a new window of 1s has started? The next part is detecting the ending point for this window.\r\n\r\nHow do you detect the ending point for an existing window? If you figure these two things out, you will be able to detect the windows of consecutive ones. All that remains afterward is to find the longest such window and return the size."
    ],
    "meta_data": {
      "name": "findMaxConsecutiveOnes",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\n        max_count = 0  # To keep track of the maximum count of consecutive 1's\n        current_count = 0  # To count the current streak of 1's\n        \n        for num in nums:\n            if num == 1:\n                current_count += 1  # Increment current count if we see a 1\n            else:\n                max_count = max(max_count, current_count)  # Update max count if current is greater\n                current_count = 0  # Reset current count for the next sequence\n        \n        # Final check to update max_count in case the array ends with 1's\n        max_count = max(max_count, current_count)\n        \n        return max_count",
    "explanation": "The solution iterates through the binary array `nums` to count the maximum number of consecutive 1's. We maintain two variables: `max_count` to store the maximum found so far, and `current_count` to count the current streak of 1's. \n\n1. For each element in the array:\n   - If the element is 1, we increment `current_count`.\n   - If the element is 0, we compare `current_count` with `max_count` and update `max_count` if necessary, then reset `current_count` to zero.\n   \n2. After the loop, we perform a final check to ensure that if the array ends with a sequence of 1's, we update `max_count` accordingly.\n\nThe time complexity of this solution is O(n) because we traverse the array once. The space complexity is O(1) since we are using a fixed amount of space regardless of the input size."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 3\nTest case 2:\n[PASS] Test passed: 2\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:59"
}