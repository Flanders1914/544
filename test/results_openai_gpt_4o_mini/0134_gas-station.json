{
  "problem": {
    "id": "134",
    "frontend_id": "134",
    "title": "Gas Station",
    "description": "There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\nGiven two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique.\n \nExample 1:\n\nInput: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\nOutput: 3\nExplanation:\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index.\n\nExample 2:\n\nInput: gas = [2,3,4], cost = [3,4,3]\nOutput: -1\nExplanation:\nYou can't start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can't travel around the circuit once no matter where you start.\n\n \nConstraints:\n\nn == gas.length == cost.length\n1 <= n <= 105\n0 <= gas[i], cost[i] <= 104\n\n",
    "difficulty": "Medium",
    "examples": [
      "[1,2,3,4,5]",
      "[3,4,5,1,2]",
      "[2,3,4]",
      "[3,4,3]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "gas": "[1,2,3,4,5]",
          "cost": "[3,4,5,1,2]"
        },
        "expected": "3"
      },
      {
        "input": {
          "gas": "[2,3,4]",
          "cost": "[3,4,3]"
        },
        "expected": "-1"
      }
    ],
    "python_starter": "class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "canCompleteCircuit",
      "params": [
        {
          "name": "gas",
          "type": "integer[]"
        },
        {
          "name": "cost",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        total_gas = 0\n        total_cost = 0\n        current_gas = 0\n        start_index = 0\n        \n        for i in range(len(gas)):\n            total_gas += gas[i]\n            total_cost += cost[i]\n            current_gas += gas[i] - cost[i]\n            \n            # If current gas is negative, we cannot start from 'start_index'\n            if current_gas < 0:\n                start_index = i + 1  # Move to the next station\n                current_gas = 0  # Reset current gas\n        \n        # If total gas is less than total cost, return -1\n        if total_gas < total_cost:\n            return -1\n        \n        return start_index",
    "explanation": "The solution begins by initializing variables to keep track of the total gas and cost, the current gas in the tank, and the starting index. We iterate through each gas station, updating the total gas and cost, as well as the current gas after considering the cost to travel to the next station.\n\nIf at any point the current gas becomes negative, it indicates that we cannot start from the last chosen starting index. Therefore, we update the starting index to the next station and reset the current gas to zero.\n\nAfter completing the loop, we check if the total gas is less than the total cost. If it is, we return -1, indicating that it's impossible to complete the circuit. If not, we return the last valid starting index.\n\nThe time complexity of this solution is O(n) because we traverse the list of gas stations once. The space complexity is O(1) since we only use a constant amount of extra space for our variables."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 3\nTest case 2:\n[PASS] Test passed: -1\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:37"
}