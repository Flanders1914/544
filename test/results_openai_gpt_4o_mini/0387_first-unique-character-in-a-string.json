{
  "problem": {
    "id": "387",
    "frontend_id": "387",
    "title": "First Unique Character in a String",
    "description": "Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.\n \nExample 1:\n\nInput: s = \"leetcode\"\nOutput: 0\nExplanation:\nThe character 'l' at index 0 is the first character that does not occur at any other index.\n\nExample 2:\n\nInput: s = \"loveleetcode\"\nOutput: 2\n\nExample 3:\n\nInput: s = \"aabb\"\nOutput: -1\n\n \nConstraints:\n\n1 <= s.length <= 105\ns consists of only lowercase English letters.\n\n",
    "difficulty": "Easy",
    "examples": [
      "\"leetcode\"",
      "\"loveleetcode\"",
      "\"aabb\""
    ],
    "structured_test_cases": [
      {
        "input": {
          "s": "\"leetcode\""
        },
        "expected": "0"
      },
      {
        "input": {
          "s": "\"loveleetcode\""
        },
        "expected": "2"
      }
    ],
    "python_starter": "class Solution:\n    def firstUniqChar(self, s: str) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "firstUniqChar",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def firstUniqChar(self, s: str) -> int:\n        # Dictionary to store the count of each character\n        char_count = {}\n        \n        # Count the occurrences of each character in the string\n        for char in s:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n        \n        # Find the index of the first unique character\n        for index, char in enumerate(s):\n            if char_count[char] == 1:\n                return index\n        \n        # If no unique character is found, return -1\n        return -1",
    "explanation": "The solution uses a two-pass approach to efficiently find the first unique character in the string. \n\n1. **Counting Characters**: In the first pass, we iterate through the string and populate a dictionary (`char_count`) where the keys are characters and the values are their respective counts. This operation takes O(n) time, where n is the length of the string.\n\n2. **Finding the First Unique Character**: In the second pass, we iterate through the string again, checking the count of each character in the dictionary. The first character with a count of 1 is returned immediately. This also takes O(n) time.\n\n3. **Return Value**: If no unique character is found after the second pass, we return -1.\n\nThe overall time complexity of the solution is O(n), and the space complexity is O(1) if we consider the character set (only lowercase English letters) as a constant size, otherwise it is O(k) where k is the number of unique characters in the string.\n\nThis approach is efficient and works well within the given constraints (1 <= s.length <= 10^5)."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:52"
}