{
  "problem": {
    "id": "393",
    "frontend_id": "393",
    "title": "UTF-8 Validation",
    "description": "Given an integer array data representing the data, return whether it is a valid UTF-8 encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).\nA character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:\n\nFor a 1-byte character, the first bit is a 0, followed by its Unicode code.\nFor an n-bytes character, the first n bits are all one's, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10.\n\nThis is how the UTF-8 encoding would work:\n\n     Number of Bytes   |        UTF-8 Octet Sequence\n                       |              (binary)\n   --------------------+-----------------------------------------\n            1          |   0xxxxxxx\n            2          |   110xxxxx 10xxxxxx\n            3          |   1110xxxx 10xxxxxx 10xxxxxx\n            4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\nx denotes a bit in the binary form of a byte that may be either 0 or 1.\nNote: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.\n \nExample 1:\n\nInput: data = [197,130,1]\nOutput: true\nExplanation: data represents the octet sequence: 11000101 10000010 00000001.\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\n\nExample 2:\n\nInput: data = [235,140,4]\nOutput: false\nExplanation: data represented the octet sequence: 11101011 10001100 00000100.\nThe first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\nThe next byte is a continuation byte which starts with 10 and that's correct.\nBut the second continuation byte does not start with 10, so it is invalid.\n\n \nConstraints:\n\n1 <= data.length <= 2 * 104\n0 <= data[i] <= 255\n\n",
    "difficulty": "Medium",
    "examples": [
      "[197,130,1]",
      "[235,140,4]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "data": "[197,130,1]"
        },
        "expected": "true"
      },
      {
        "input": {
          "data": "[235,140,4]"
        },
        "expected": "false"
      }
    ],
    "python_starter": "class Solution:\n    def validUtf8(self, data: List[int]) -> bool:\n        ",
    "hints": [
      "Read the data integer by integer. When you read it, process the least significant 8 bits of it.",
      "Assume the next encoding is 1-byte data. If it is not 1-byte data, read the next integer and assume it is 2-bytes data.",
      "Similarly, if it is not 2-bytes data, try 3-bytes then 4-bytes. If you read four integers and it still does not match any pattern, return false."
    ],
    "meta_data": {
      "name": "validUtf8",
      "params": [
        {
          "name": "data",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "boolean"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def validUtf8(self, data: List[int]) -> bool:\n        # Number of bytes expected for the current character\n        num_bytes_expected = 0\n        \n        for byte in data:\n            # Get the first 5 bits of the byte\n            if num_bytes_expected == 0:\n                # Determine how many bytes the current character will use\n                if (byte >> 7) == 0b0:  # 0xxxxxxx\n                    num_bytes_expected = 1\n                elif (byte >> 5) == 0b110:  # 110xxxxx\n                    num_bytes_expected = 2\n                elif (byte >> 4) == 0b1110:  # 1110xxxx\n                    num_bytes_expected = 3\n                elif (byte >> 3) == 0b11110:  # 11110xxx\n                    num_bytes_expected = 4\n                else:\n                    return False  # Invalid first byte\n            else:\n                # We are expecting a continuation byte\n                if (byte >> 6) != 0b10:  # 10xxxxxx\n                    return False\n            \n            # Decrease the number of bytes expected\n            num_bytes_expected -= 1\n        \n        # If we finish processing and are not expecting any more bytes, it's valid\n        return num_bytes_expected == 0",
    "explanation": "The solution iterates through the input list `data`, which contains integers representing bytes. The main logic is as follows:\n\n1. **Initialization**: We start with `num_bytes_expected` set to 0, which will keep track of how many continuation bytes we expect for the current character.\n2. **Byte Processing**:\n   - For each byte, if `num_bytes_expected` is 0, we check the first few bits to determine how many bytes the current character will use:\n     - If the byte starts with `0`, it indicates a 1-byte character.\n     - If it starts with `110`, it indicates a 2-byte character.\n     - If it starts with `1110`, it indicates a 3-byte character.\n     - If it starts with `11110`, it indicates a 4-byte character.\n     - Any other pattern indicates an invalid start byte, and we return `False`.\n   - If `num_bytes_expected` is greater than 0, we check if the current byte starts with `10`. If it does not, we return `False`.\n3. **Decrementing the Counter**: After processing a byte, we decrement `num_bytes_expected` to account for the byte we just processed.\n4. **Final Check**: After processing all bytes, if `num_bytes_expected` is not zero, it means we have not completed a valid character sequence, and we return `False`. If it is zero, we return `True`, indicating a valid UTF-8 encoding.\n\n**Time Complexity**: O(n), where n is the length of the input list `data`, since we process each byte exactly once.\n\n**Space Complexity**: O(1), as we are using a constant amount of space for variables regardless of the input size."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: True\nTest case 2:\n[PASS] Test passed: False\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:52"
}