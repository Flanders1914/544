{
  "problem": {
    "id": "283",
    "frontend_id": "283",
    "title": "Move Zeroes",
    "description": "Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\nNote that you must do this in-place without making a copy of the array.\n \nExample 1:\nInput: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]\nExample 2:\nInput: nums = [0]\nOutput: [0]\n\n \nConstraints:\n\n1 <= nums.length <= 104\n-231 <= nums[i] <= 231 - 1\n\n \nFollow up: Could you minimize the total number of operations done?",
    "difficulty": "Easy",
    "examples": [
      "[0,1,0,3,12]",
      "[0]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[0,1,0,3,12]"
        },
        "expected": "[1,3,12,0,0]"
      }
    ],
    "python_starter": "class Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        ",
    "hints": [
      "<b>In-place</b> means we should not be allocating any space for extra array. But we are allowed to modify the existing array. However, as a first step, try coming up with a solution that makes use of additional space. For this problem as well, first apply the idea discussed using an additional array and the in-place solution will pop up eventually.",
      "A <b>two-pointer</b> approach could be helpful here. The idea would be to have one pointer for iterating the array and another pointer that just works on the non-zero elements of the array."
    ],
    "meta_data": {
      "name": "moveZeroes",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "void"
      },
      "output": {
        "paramindex": 0
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        # Pointer for the position of the next non-zero element\n        non_zero_index = 0\n        \n        # Move all non-zero elements to the front\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                nums[non_zero_index] = nums[i]\n                non_zero_index += 1\n        \n        # Fill the remaining positions with zeros\n        for i in range(non_zero_index, len(nums)):\n            nums[i] = 0",
    "explanation": "The solution uses a two-pointer technique to efficiently move all zeros to the end of the array. The first pointer, `non_zero_index`, keeps track of where the next non-zero element should be placed. We iterate through the array with a second pointer `i`. For each non-zero element found, we place it at the `non_zero_index` and increment `non_zero_index`. After processing all elements, we fill the remaining positions in the array with zeros.\n\n### Time Complexity\nThe time complexity of this solution is O(n), where n is the number of elements in the input array. This is because we make a single pass through the array to move non-zero elements and another pass to fill in zeros.\n\n### Space Complexity\nThe space complexity is O(1) since we are modifying the array in place and not using any additional data structures that grow with the input size.\n\nThis approach minimizes the number of operations by ensuring that each element is processed only once, making it optimal for the given problem constraints."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:46"
}