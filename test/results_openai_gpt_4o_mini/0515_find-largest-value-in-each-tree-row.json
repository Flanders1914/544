{
  "problem": {
    "id": "515",
    "frontend_id": "515",
    "title": "Find Largest Value in Each Tree Row",
    "description": "Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).\n \nExample 1:\n\n\nInput: root = [1,3,2,5,3,null,9]\nOutput: [1,3,9]\n\nExample 2:\n\nInput: root = [1,2,3]\nOutput: [1,3]\n\n \nConstraints:\n\nThe number of nodes in the tree will be in the range [0, 104].\n-231 <= Node.val <= 231 - 1\n\n",
    "difficulty": "Medium",
    "examples": [
      "[1,3,2,5,3,null,9]",
      "[1,2,3]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "root": "[1,3,2,5,3,null,9]"
        },
        "expected": "[1,3,9]"
      }
    ],
    "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def largestValues(self, root: Optional[TreeNode]) -> List[int]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "largestValues",
      "params": [
        {
          "name": "root",
          "type": "TreeNode"
        }
      ],
      "return": {
        "type": "list<integer>"
      }
    }
  },
  "solution": {
    "code": "from collections import deque\nfrom typing import List, Optional\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def largestValues(self, root: Optional[TreeNode]) -> List[int]:\n        if not root:\n            return []\n        \n        result = []\n        queue = deque([root])  # Initialize the queue with the root node\n        \n        while queue:\n            level_size = len(queue)  # Number of nodes at the current level\n            max_value = float('-inf')  # Initialize max value for this level\n            \n            for _ in range(level_size):\n                node = queue.popleft()  # Get the front node in the queue\n                max_value = max(max_value, node.val)  # Update max value\n                \n                # Add child nodes to the queue for the next level\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            \n            result.append(max_value)  # Append the largest value of this level to the result\n        \n        return result",
    "explanation": "The solution uses a breadth-first search (BFS) approach to traverse the binary tree level by level. Here's a breakdown of the solution:\n\n1. **Initialization**: We start by checking if the root is `None`. If it is, we return an empty list since there are no nodes in the tree. We then initialize a result list to store the largest values and a queue to facilitate the level-order traversal.\n\n2. **Level-order Traversal**: We use a while loop that continues until the queue is empty. For each iteration, we determine the number of nodes at the current level (`level_size`) and initialize `max_value` to negative infinity to ensure any node value will be larger.\n\n3. **Processing Nodes**: We iterate over the nodes at the current level. For each node, we:\n   - Dequeue it from the front of the queue.\n   - Update `max_value` with the maximum of the current node's value and the existing `max_value`.\n   - Enqueue the left and right children of the current node (if they exist) for processing in the next level.\n\n4. **Storing Results**: After processing all nodes at the current level, we append the `max_value` to the result list.\n\n5. **Return Result**: Finally, we return the result list containing the largest values from each row of the tree.\n\n**Time Complexity**: O(N), where N is the number of nodes in the tree. Each node is processed exactly once.\n\n**Space Complexity**: O(W), where W is the maximum width of the tree. In the worst case, the queue can hold all nodes at the widest level of the tree."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:01:21"
}