{
  "problem": {
    "id": "322",
    "frontend_id": "322",
    "title": "Coin Change",
    "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\nReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\nYou may assume that you have an infinite number of each kind of coin.\n \nExample 1:\n\nInput: coins = [1,2,5], amount = 11\nOutput: 3\nExplanation: 11 = 5 + 5 + 1\n\nExample 2:\n\nInput: coins = [2], amount = 3\nOutput: -1\n\nExample 3:\n\nInput: coins = [1], amount = 0\nOutput: 0\n\n \nConstraints:\n\n1 <= coins.length <= 12\n1 <= coins[i] <= 231 - 1\n0 <= amount <= 104\n\n",
    "difficulty": "Medium",
    "examples": [
      "[1,2,5]",
      "11",
      "[2]",
      "3",
      "[1]",
      "0"
    ],
    "structured_test_cases": [
      {
        "input": {
          "coins": "[1,2,5]",
          "amount": "11"
        },
        "expected": "3"
      },
      {
        "input": {
          "coins": "[2]",
          "amount": "3"
        },
        "expected": "-1"
      }
    ],
    "python_starter": "class Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "coinChange",
      "params": [
        {
          "name": "coins",
          "type": "integer[]"
        },
        {
          "name": "amount",
          "type": "integer"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        # Initialize the dp array with a value larger than any possible number of coins\n        dp = [float('inf')] * (amount + 1)\n        dp[0] = 0  # Base case: 0 coins are needed to make amount 0\n        \n        # Iterate over each coin\n        for coin in coins:\n            # Update the dp array for all amounts from coin to amount\n            for i in range(coin, amount + 1):\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n        \n        # If dp[amount] is still infinity, return -1, else return dp[amount]\n        return dp[amount] if dp[amount] != float('inf') else -1",
    "explanation": "The solution uses dynamic programming to efficiently compute the minimum number of coins needed to make a given amount. The `dp` array is initialized to a size of `amount + 1`, where each index represents the minimum number of coins needed for that amount. The base case is set for `dp[0]` to 0, as no coins are needed to make the amount 0.\n\nFor each coin, we iterate through all possible amounts from the coin's value up to the target amount. For each amount `i`, we check if using the current coin results in a smaller number of coins than previously recorded. This is done by comparing `dp[i]` with `dp[i - coin] + 1`, where `dp[i - coin]` represents the minimum coins needed to make the amount `i - coin`.\n\nThe time complexity of this solution is O(n * m), where `n` is the number of coins and `m` is the target amount. The space complexity is O(m) due to the `dp` array. This approach is efficient given the constraints, and it ensures that we can find the solution in a reasonable time frame."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 3\nTest case 2:\n[PASS] Test passed: -1\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:48"
}