{
  "problem": {
    "id": "391",
    "frontend_id": "391",
    "title": "Perfect Rectangle",
    "description": "Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).\nReturn true if all the rectangles together form an exact cover of a rectangular region.\n \nExample 1:\n\n\nInput: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\nOutput: true\nExplanation: All 5 rectangles together form an exact cover of a rectangular region.\n\nExample 2:\n\n\nInput: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\nOutput: false\nExplanation: Because there is a gap between the two rectangular regions.\n\nExample 3:\n\n\nInput: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]\nOutput: false\nExplanation: Because two of the rectangles overlap with each other.\n\n \nConstraints:\n\n1 <= rectangles.length <= 2 * 104\nrectangles[i].length == 4\n-105 <= xi < ai <= 105\n-105 <= yi < bi <= 105\n\n",
    "difficulty": "Hard",
    "examples": [
      "[[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]",
      "[[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]",
      "[[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "rectangles": "[[1,1,3,3]"
        },
        "expected": "true"
      },
      {
        "input": {
          "rectangles": "[[1,1,2,3]"
        },
        "expected": "false"
      },
      {
        "input": {
          "rectangles": "[[1,1,3,3]"
        },
        "expected": "false"
      }
    ],
    "python_starter": "class Solution:\n    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:\n        ",
    "hints": [],
    "meta_data": {
      "name": "isRectangleCover",
      "params": [
        {
          "name": "rectangles",
          "type": "integer[][]"
        }
      ],
      "return": {
        "type": "boolean"
      }
    }
  },
  "solution": {
    "code": "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:\n        # Initialize variables to track the total area and corner counts\n        total_area = 0\n        corner_count = defaultdict(int)\n        \n        # Initialize min and max coordinates for the bounding rectangle\n        min_x = float('inf')\n        min_y = float('inf')\n        max_x = float('-inf')\n        max_y = float('-inf')\n        \n        for x1, y1, x2, y2 in rectangles:\n            # Calculate the area of the current rectangle\n            area = (x2 - x1) * (y2 - y1)\n            total_area += area\n            \n            # Update the bounding rectangle coordinates\n            min_x = min(min_x, x1)\n            min_y = min(min_y, y1)\n            max_x = max(max_x, x2)\n            max_y = max(max_y, y2)\n            \n            # Count the corners\n            corner_count[(x1, y1)] += 1\n            corner_count[(x1, y2)] += 1\n            corner_count[(x2, y1)] += 1\n            corner_count[(x2, y2)] += 1\n        \n        # Calculate the area of the bounding rectangle\n        bounding_area = (max_x - min_x) * (max_y - min_y)\n        \n        # Check if the total area matches the bounding area\n        if total_area != bounding_area:\n            return False\n        \n        # Define the corners of the bounding rectangle\n        expected_corners = {\n            (min_x, min_y),\n            (min_x, max_y),\n            (max_x, min_y),\n            (max_x, max_y)\n        }\n        \n        # Check if the corners of the bounding rectangle appear exactly once\n        for corner in expected_corners:\n            if corner_count[corner] != 1:\n                return False\n        \n        # Check if all other corners appear an even number of times\n        for corner, count in corner_count.items():\n            if corner not in expected_corners and count % 2 != 0:\n                return False\n        \n        return True",
    "explanation": "The solution begins by initializing variables to track the total area of the rectangles, the counts of each corner, and the coordinates of the bounding rectangle. For each rectangle, we calculate its area and update the total area. We also update the minimum and maximum x and y coordinates to determine the bounding rectangle.\n\nNext, we count the occurrences of each corner of the rectangles using a dictionary. After processing all rectangles, we calculate the area of the bounding rectangle and check if it matches the total area of the rectangles. If they do not match, we return `False`.\n\nWe then define the expected corners of the bounding rectangle and check if these corners appear exactly once in our corner count. Finally, we ensure that all other corners appear an even number of times. If all conditions are satisfied, we return `True`, indicating that the rectangles form an exact cover of a rectangular region.\n\nThe time complexity of this solution is O(n), where n is the number of rectangles, as we process each rectangle in constant time. The space complexity is O(1) for the area and bounding rectangle variables, and O(k) for the corner count dictionary, where k is the number of unique corners, which is at most 4 times the number of rectangles."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmp9u4uzsea.py\", line 94\n    input_0_0 = [[1,1,3,3]\n                 ^^^^^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n"
  },
  "timestamp": "2025-04-01 18:00:52"
}