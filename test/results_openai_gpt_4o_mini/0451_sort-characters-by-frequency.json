{
  "problem": {
    "id": "451",
    "frontend_id": "451",
    "title": "Sort Characters By Frequency",
    "description": "Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.\nReturn the sorted string. If there are multiple answers, return any of them.\n \nExample 1:\n\nInput: s = \"tree\"\nOutput: \"eert\"\nExplanation: 'e' appears twice while 'r' and 't' both appear once.\nSo 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.\n\nExample 2:\n\nInput: s = \"cccaaa\"\nOutput: \"aaaccc\"\nExplanation: Both 'c' and 'a' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers.\nNote that \"cacaca\" is incorrect, as the same characters must be together.\n\nExample 3:\n\nInput: s = \"Aabb\"\nOutput: \"bbAa\"\nExplanation: \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\nNote that 'A' and 'a' are treated as two different characters.\n\n \nConstraints:\n\n1 <= s.length <= 5 * 105\ns consists of uppercase and lowercase English letters and digits.\n\n",
    "difficulty": "Medium",
    "examples": [
      "\"tree\"",
      "\"cccaaa\"",
      "\"Aabb\""
    ],
    "structured_test_cases": [
      {
        "input": {
          "s": "\"tree\""
        },
        "expected": "eert"
      },
      {
        "input": {
          "s": "\"cccaaa\""
        },
        "expected": "aaaccc"
      },
      {
        "input": {
          "s": "\"Aabb\""
        },
        "expected": "bbAa"
      }
    ],
    "python_starter": "class Solution:\n    def frequencySort(self, s: str) -> str:\n        ",
    "hints": [],
    "meta_data": {
      "name": "frequencySort",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ],
      "return": {
        "type": "string"
      }
    }
  },
  "solution": {
    "code": "from collections import Counter\n\nclass Solution:\n    def frequencySort(self, s: str) -> str:\n        # Count the frequency of each character in the string\n        frequency = Counter(s)\n        \n        # Sort characters by frequency in descending order\n        # and create a list of characters repeated by their frequency\n        sorted_characters = sorted(frequency.keys(), key=lambda x: frequency[x], reverse=True)\n        \n        # Build the result string\n        result = ''.join(char * frequency[char] for char in sorted_characters)\n        \n        return result",
    "explanation": "The solution begins by importing the `Counter` class from the `collections` module, which simplifies the frequency counting process. \n\n1. **Counting Frequencies**: We create a frequency dictionary using `Counter(s)`, which counts how many times each character appears in the string `s`.\n  \n2. **Sorting**: We sort the characters based on their frequency using the `sorted()` function. The key for sorting is defined as the frequency of each character, and we sort in descending order. This gives us a list of characters sorted by how often they appear.\n\n3. **Building the Result**: We then construct the final string by iterating over the sorted characters and repeating each character according to its frequency. The `join()` method is used to concatenate these repeated characters into a single string.\n\nThe time complexity of this solution is O(n + k log k), where n is the length of the string and k is the number of unique characters. The space complexity is O(n) due to the storage of the frequency dictionary and the result string.\n\nThis approach efficiently handles the constraints provided, ensuring that we can sort and return the characters based on their frequency in a straightforward manner."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:57"
}