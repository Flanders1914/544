{
  "problem": {
    "id": "53",
    "frontend_id": "53",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the subarray with the largest sum, and return its sum.\n \nExample 1:\n\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: The subarray [4,-1,2,1] has the largest sum 6.\n\nExample 2:\n\nInput: nums = [1]\nOutput: 1\nExplanation: The subarray [1] has the largest sum 1.\n\nExample 3:\n\nInput: nums = [5,4,-1,7,8]\nOutput: 23\nExplanation: The subarray [5,4,-1,7,8] has the largest sum 23.\n\n \nConstraints:\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n\n \nFollow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\n",
    "difficulty": "Medium",
    "examples": [
      "[-2,1,-3,4,-1,2,1,-5,4]",
      "[1]",
      "[5,4,-1,7,8]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[-2,1,-3,4,-1,2,1,-5,4]"
        },
        "expected": "6"
      },
      {
        "input": {
          "nums": "[1]"
        },
        "expected": "1"
      },
      {
        "input": {
          "nums": "[5,4,-1,7,8]"
        },
        "expected": "23"
      }
    ],
    "python_starter": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "maxSubArray",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        # Initialize variables to store the maximum sum and the current subarray sum\n        max_sum = float('-inf')  # Start with the smallest possible integer\n        current_sum = 0  # This will hold the sum of the current subarray\n        \n        # Iterate through each number in the array\n        for num in nums:\n            current_sum += num  # Add the current number to the current subarray sum\n            \n            # Update max_sum if current_sum is greater\n            if current_sum > max_sum:\n                max_sum = current_sum\n            \n            # If current_sum drops below 0, reset it to 0\n            if current_sum < 0:\n                current_sum = 0\n        \n        return max_sum  # Return the maximum subarray sum found",
    "explanation": "The solution uses Kadane's algorithm to efficiently find the maximum subarray sum in linear time. The algorithm works as follows:\n\n1. We initialize `max_sum` to negative infinity to ensure that any subarray sum will be larger initially. `current_sum` is initialized to zero to start summing the elements.\n2. We iterate through each element in the input array `nums`. For each element:\n   - We add the element to `current_sum`.\n   - If `current_sum` exceeds `max_sum`, we update `max_sum`.\n   - If `current_sum` becomes negative, we reset it to zero because a negative sum would not contribute positively to any future subarray.\n3. Finally, we return `max_sum`, which contains the largest sum of any contiguous subarray.\n\nThe time complexity of this solution is O(n), where n is the number of elements in the input array, as we only make a single pass through the array. The space complexity is O(1) since we are using a constant amount of extra space regardless of the input size."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 6\nTest case 2:\n[PASS] Test passed: 1\nTest case 3:\n[PASS] Test passed: 23\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:30"
}