{
  "problem": {
    "id": "46",
    "frontend_id": "46",
    "title": "Permutations",
    "description": "Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\n \nExample 1:\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\nExample 2:\nInput: nums = [0,1]\nOutput: [[0,1],[1,0]]\nExample 3:\nInput: nums = [1]\nOutput: [[1]]\n\n \nConstraints:\n\n1 <= nums.length <= 6\n-10 <= nums[i] <= 10\nAll the integers of nums are unique.\n\n",
    "difficulty": "Medium",
    "examples": [
      "[1,2,3]",
      "[0,1]",
      "[1]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[1,2,3]"
        },
        "expected": "[[1,2,3]"
      }
    ],
    "python_starter": "class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "permute",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "list<list<integer>>",
        "colsize": "size_1",
        "dealloc": true
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        def backtrack(start: int):\n            # If we've reached the end of the array, we found a permutation\n            if start == len(nums):\n                result.append(nums[:])  # Append a copy of the current permutation\n                return\n            \n            for i in range(start, len(nums)):\n                # Swap the current element with the start element\n                nums[start], nums[i] = nums[i], nums[start]\n                # Recurse on the next element\n                backtrack(start + 1)\n                # Backtrack: swap back to the original configuration\n                nums[start], nums[i] = nums[i], nums[start]\n        \n        result = []\n        backtrack(0)  # Start the backtracking process\n        return result",
    "explanation": "The provided solution uses a backtracking algorithm to generate all permutations of the input list `nums`. Here's a breakdown of how it works:\n\n1. **Backtracking Function**: The `backtrack` function is defined to generate permutations starting from a given index (`start`). If `start` equals the length of `nums`, it means we have a complete permutation, which we then append to the `result` list.\n\n2. **Swapping Elements**: For each index from `start` to the end of the list, we swap the current element with the element at the `start` index. This effectively places the current element in the current position of the permutation.\n\n3. **Recursive Call**: After the swap, we call `backtrack` recursively with the next index (`start + 1`), which continues to build the permutation.\n\n4. **Backtracking**: After the recursive call returns, we swap the elements back to their original positions to restore the state of the list for the next iteration.\n\n5. **Result Compilation**: The final result is collected in the `result` list, which is returned at the end of the `permute` function.\n\n**Time Complexity**: The time complexity of this algorithm is O(n!), where n is the length of the input list. This is because there are n! permutations of n distinct numbers.\n\n**Space Complexity**: The space complexity is O(n) for the recursion stack, as the maximum depth of the recursion is n.\n\nOverall, this solution efficiently generates all permutations of the input list using a systematic approach."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpx3br_545.py\", line 59\n    expected_0 = [[1,2,3]\n                 ^\nSyntaxError: '[' was never closed\n"
  },
  "timestamp": "2025-04-01 18:00:29"
}