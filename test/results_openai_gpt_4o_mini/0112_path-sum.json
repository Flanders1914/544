{
  "problem": {
    "id": "112",
    "frontend_id": "112",
    "title": "Path Sum",
    "description": "Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\nA leaf is a node with no children.\n \nExample 1:\n\n\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\nOutput: true\nExplanation: The root-to-leaf path with the target sum is shown.\n\nExample 2:\n\n\nInput: root = [1,2,3], targetSum = 5\nOutput: false\nExplanation: There are two root-to-leaf paths in the tree:\n(1 --> 2): The sum is 3.\n(1 --> 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5.\n\nExample 3:\n\nInput: root = [], targetSum = 0\nOutput: false\nExplanation: Since the tree is empty, there are no root-to-leaf paths.\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 5000].\n-1000 <= Node.val <= 1000\n-1000 <= targetSum <= 1000\n\n",
    "difficulty": "Easy",
    "examples": [
      "[5,4,8,11,null,13,4,7,2,null,null,null,1]",
      "22",
      "[1,2,3]",
      "5",
      "[]",
      "0"
    ],
    "structured_test_cases": [
      {
        "input": {
          "root": "[5,4,8,11,null,13,4,7,2,null,null,null,1]",
          "targetSum": "22"
        },
        "expected": "true"
      },
      {
        "input": {
          "root": "[1,2,3]",
          "targetSum": "5"
        },
        "expected": "false"
      },
      {
        "input": {
          "root": "[]",
          "targetSum": "0"
        },
        "expected": "false"
      }
    ],
    "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:\n        ",
    "hints": [],
    "meta_data": {
      "name": "hasPathSum",
      "params": [
        {
          "name": "root",
          "type": "TreeNode"
        },
        {
          "name": "targetSum",
          "type": "integer"
        }
      ],
      "return": {
        "type": "boolean"
      }
    }
  },
  "solution": {
    "code": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:\n        # Base case: if the current node is None, return False\n        if not root:\n            return False\n        \n        # If we reach a leaf node, check if the remaining targetSum equals the node's value\n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        # Recursively check the left and right subtrees with the updated targetSum\n        targetSum -= root.val\n        return self.hasPathSum(root.left, targetSum) or self.hasPathSum(root.right, targetSum)",
    "explanation": "The solution uses a recursive depth-first search (DFS) approach to explore all root-to-leaf paths in the binary tree. The function `hasPathSum` checks if there is a path from the root to any leaf node such that the sum of the node values along that path equals the specified `targetSum`.\n\n1. **Base Case**: If the current node (`root`) is `None`, it means we have reached a non-existent node, and we return `False`.\n2. **Leaf Node Check**: If the current node is a leaf (both left and right children are `None`), we check if the remaining `targetSum` equals the value of the current node. If it does, we return `True`.\n3. **Recursive Calls**: If the current node is not a leaf, we subtract the value of the current node from `targetSum` and recursively call `hasPathSum` for both the left and right children. We return `True` if either of the recursive calls returns `True`.\n\n### Time Complexity\nThe time complexity of this solution is O(N), where N is the number of nodes in the binary tree. In the worst case, we may need to visit every node.\n\n### Space Complexity\nThe space complexity is O(H), where H is the height of the tree. This accounts for the space used by the recursion stack. In the worst case (a skewed tree), H can be equal to N, but in a balanced tree, H would be log(N)."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:35"
}