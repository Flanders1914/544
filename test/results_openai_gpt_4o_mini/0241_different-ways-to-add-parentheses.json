{
  "problem": {
    "id": "241",
    "frontend_id": "241",
    "title": "Different Ways to Add Parentheses",
    "description": "Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.\nThe test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 104.\n \nExample 1:\n\nInput: expression = \"2-1-1\"\nOutput: [0,2]\nExplanation:\n((2-1)-1) = 0 \n(2-(1-1)) = 2\n\nExample 2:\n\nInput: expression = \"2*3-4*5\"\nOutput: [-34,-14,-10,-10,10]\nExplanation:\n(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10\n\n \nConstraints:\n\n1 <= expression.length <= 20\nexpression consists of digits and the operator '+', '-', and '*'.\nAll the integer values in the input expression are in the range [0, 99].\nThe integer values in the input expression do not have a leading '-' or '+' denoting the sign.\n\n",
    "difficulty": "Medium",
    "examples": [
      "\"2-1-1\"",
      "\"2*3-4*5\""
    ],
    "structured_test_cases": [
      {
        "input": {
          "expression": "\"2-1-1\""
        },
        "expected": "[0,2]"
      },
      {
        "input": {
          "expression": "\"2*3-4*5\""
        },
        "expected": "[-34,-14,-10,-10,10]"
      }
    ],
    "python_starter": "class Solution:\n    def diffWaysToCompute(self, expression: str) -> List[int]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "diffWaysToCompute",
      "params": [
        {
          "name": "expression",
          "type": "string"
        }
      ],
      "return": {
        "type": "list<integer>"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def diffWaysToCompute(self, expression: str) -> List[int]:\n        # Memoization dictionary\n        memo = {}\n        \n        def compute(expr):\n            # If the expression is already computed, return the cached result\n            if expr in memo:\n                return memo[expr]\n            \n            results = []\n            # Check if the expression is a number\n            if expr.isdigit():\n                results.append(int(expr))\n            else:\n                # Iterate through the expression to find operators\n                for i in range(len(expr)):\n                    if expr[i] in '+-*':\n                        # Split the expression into left and right parts\n                        left = expr[:i]\n                        right = expr[i+1:]\n                        # Recursively compute results for left and right parts\n                        left_results = compute(left)\n                        right_results = compute(right)\n                        # Combine results based on the operator\n                        for l in left_results:\n                            for r in right_results:\n                                if expr[i] == '+':\n                                    results.append(l + r)\n                                elif expr[i] == '-':\n                                    results.append(l - r)\n                                elif expr[i] == '*':\n                                    results.append(l * r)\n            # Cache the computed results\n            memo[expr] = results\n            return results\n        \n        return compute(expression)",
    "explanation": "The solution uses a recursive function `compute` to evaluate all possible results of the given expression. The function checks if the expression is a number and returns it directly if so. If the expression contains operators, it iterates through each character in the string. When it finds an operator, it splits the expression into left and right parts and recursively computes the results for both parts.\n\nFor each combination of results from the left and right parts, it applies the operator and stores the result. The results for each unique expression are cached in the `memo` dictionary to avoid redundant calculations, which optimizes the performance.\n\n### Time Complexity\nThe time complexity of this solution is exponential in the worst case due to the recursive nature of the problem, as we explore all possible ways to parenthesize the expression. However, memoization significantly reduces the number of computations by caching results for sub-expressions.\n\n### Space Complexity\nThe space complexity is O(n) for the memoization dictionary, where n is the length of the expression. Additionally, the recursion stack may also take up space proportional to the depth of the recursion, which can be up to O(n) in the worst case.\n\nOverall, this approach efficiently computes all possible results for the given expression while adhering to the constraints provided."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:45"
}