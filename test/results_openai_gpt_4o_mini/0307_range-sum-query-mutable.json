{
  "problem": {
    "id": "307",
    "frontend_id": "307",
    "title": "Range Sum Query - Mutable",
    "description": "Given an integer array nums, handle multiple queries of the following types:\n\nUpdate the value of an element in nums.\nCalculate the sum of the elements of nums between indices left and right inclusive where left <= right.\n\nImplement the NumArray class:\n\nNumArray(int[] nums) Initializes the object with the integer array nums.\nvoid update(int index, int val) Updates the value of nums[index] to be val.\nint sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).\n\n \nExample 1:\n\nInput\n[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\nOutput\n[null, 9, null, 8]\n\nExplanation\nNumArray numArray = new NumArray([1, 3, 5]);\nnumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\nnumArray.update(1, 2);   // nums = [1, 2, 5]\nnumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\n\n \nConstraints:\n\n1 <= nums.length <= 3 * 104\n-100 <= nums[i] <= 100\n0 <= index < nums.length\n-100 <= val <= 100\n0 <= left <= right < nums.length\nAt most 3 * 104 calls will be made to update and sumRange.\n\n",
    "difficulty": "Medium",
    "examples": [
      "[\"NumArray\",\"sumRange\",\"update\",\"sumRange\"]",
      "[[[1,3,5]],[0,2],[1,2],[0,2]]"
    ],
    "structured_test_cases": [],
    "python_starter": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n        \n\n    def update(self, index: int, val: int) -> None:\n        \n\n    def sumRange(self, left: int, right: int) -> int:\n        \n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# obj.update(index,val)\n# param_2 = obj.sumRange(left,right)",
    "hints": [],
    "meta_data": {
      "classname": "NumArray",
      "maxbytesperline": 170000,
      "constructor": {
        "params": [
          {
            "type": "integer[]",
            "name": "nums"
          }
        ]
      },
      "methods": [
        {
          "name": "update",
          "params": [
            {
              "type": "integer",
              "name": "index"
            },
            {
              "type": "integer",
              "name": "val"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "sumRange",
          "params": [
            {
              "type": "integer",
              "name": "left"
            },
            {
              "type": "integer",
              "name": "right"
            }
          ],
          "return": {
            "type": "integer"
          }
        }
      ],
      "systemdesign": true,
      "params": [
        {
          "name": "inputs",
          "type": "integer[]"
        },
        {
          "name": "inputs",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "list<String>",
        "dealloc": true
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass FenwickTree:\n    def __init__(self, size: int):\n        self.size = size\n        self.tree = [0] * (size + 1)\n\n    def update(self, index: int, delta: int) -> None:\n        index += 1  # Fenwick Tree is 1-indexed\n        while index <= self.size:\n            self.tree[index] += delta\n            index += index & -index\n\n    def sum(self, index: int) -> int:\n        index += 1  # Fenwick Tree is 1-indexed\n        total = 0\n        while index > 0:\n            total += self.tree[index]\n            index -= index & -index\n        return total\n\n    def range_sum(self, left: int, right: int) -> int:\n        return self.sum(right) - self.sum(left - 1)\n\nclass NumArray:\n    def __init__(self, nums: List[int]):\n        self.nums = nums\n        self.fenwick_tree = FenwickTree(len(nums))\n        for i, num in enumerate(nums):\n            self.fenwick_tree.update(i, num)\n\n    def update(self, index: int, val: int) -> None:\n        delta = val - self.nums[index]\n        self.nums[index] = val\n        self.fenwick_tree.update(index, delta)\n\n    def sumRange(self, left: int, right: int) -> int:\n        return self.fenwick_tree.range_sum(left, right)\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# obj.update(index,val)\n# param_2 = obj.sumRange(left,right)",
    "explanation": "The solution uses a Fenwick Tree to efficiently handle the update and sum range operations. \n\n1. **Fenwick Tree Implementation**:\n   - The `FenwickTree` class is initialized with a size and creates an internal array to store cumulative sums.\n   - The `update` method adjusts the tree when an element in the original array is updated. It takes the index and the difference (delta) and updates the tree accordingly.\n   - The `sum` method computes the cumulative sum up to a given index, and `range_sum` computes the sum between two indices by leveraging the `sum` method.\n\n2. **NumArray Class**:\n   - The `NumArray` class initializes with the input array and populates the Fenwick Tree with the initial values.\n   - The `update` method calculates the difference between the new value and the current value, updates the original array, and then updates the Fenwick Tree.\n   - The `sumRange` method retrieves the sum of elements between the specified indices using the Fenwick Tree.\n\n**Time Complexity**:\n- Both `update` and `sumRange` operations run in O(log n) time due to the properties of the Fenwick Tree.\n\n**Space Complexity**:\n- The space complexity is O(n) for storing the Fenwick Tree, where n is the number of elements in the input array.\n\nThis efficient approach ensures that we can handle the maximum constraints of the problem effectively."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\nTraceback (most recent call last):\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpqb_khijb.py\", line 70, in <module>\n    solution = FenwickTree()\n               ^^^^^^^^^^^^^\nTypeError: FenwickTree.__init__() missing 1 required positional argument: 'size'\n"
  },
  "timestamp": "2025-04-01 18:00:47"
}