{
  "problem": {
    "id": "166",
    "frontend_id": "166",
    "title": "Fraction to Recurring Decimal",
    "description": "Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.\nIf the fractional part is repeating, enclose the repeating part in parentheses.\nIf multiple answers are possible, return any of them.\nIt is guaranteed that the length of the answer string is less than 104 for all the given inputs.\n \nExample 1:\n\nInput: numerator = 1, denominator = 2\nOutput: \"0.5\"\n\nExample 2:\n\nInput: numerator = 2, denominator = 1\nOutput: \"2\"\n\nExample 3:\n\nInput: numerator = 4, denominator = 333\nOutput: \"0.(012)\"\n\n \nConstraints:\n\n-231 <= numerator, denominator <= 231 - 1\ndenominator != 0\n\n",
    "difficulty": "Medium",
    "examples": [
      "1",
      "2",
      "2",
      "1",
      "4",
      "333"
    ],
    "structured_test_cases": [
      {
        "input": {
          "numerator": "1",
          "denominator": "2"
        },
        "expected": "0.5"
      }
    ],
    "python_starter": "class Solution:\n    def fractionToDecimal(self, numerator: int, denominator: int) -> str:\n        ",
    "hints": [
      "No scary math, just apply elementary math knowledge. Still remember how to perform a <i>long division</i>?",
      "Try a long division on 4/9, the repeating part is obvious. Now try 4/333. Do you see a pattern?",
      "Notice that once the remainder starts repeating, so does the divided result.",
      "Be wary of edge cases! List out as many test cases as you can think of and test your code thoroughly."
    ],
    "meta_data": {
      "name": "fractionToDecimal",
      "params": [
        {
          "name": "numerator",
          "type": "integer"
        },
        {
          "name": "denominator",
          "type": "integer"
        }
      ],
      "return": {
        "type": "string"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def fractionToDecimal(self, numerator: int, denominator: int) -> str:\n        # Handle the case of zero numerator\n        if numerator == 0:\n            return \"0\"\n        \n        # Determine the sign of the result\n        sign = '-' if (numerator < 0) ^ (denominator < 0) else ''\n        \n        # Work with absolute values to simplify calculations\n        numerator, denominator = abs(numerator), abs(denominator)\n        \n        # Calculate the integer part\n        integer_part = numerator // denominator\n        remainder = numerator % denominator\n        \n        # If there is no remainder, return the integer part\n        if remainder == 0:\n            return f\"{sign}{integer_part}\"\n        \n        # Prepare to calculate the fractional part\n        fractional_part = []\n        remainder_map = {}\n        \n        # Start calculating the fractional part\n        index = 0\n        while remainder != 0:\n            # If we have seen this remainder before, we have a repeating decimal\n            if remainder in remainder_map:\n                # Insert parentheses around the repeating part\n                start_index = remainder_map[remainder]\n                fractional_part.insert(start_index, '(')\n                fractional_part.append(')')\n                break\n            \n            # Store the index of this remainder\n            remainder_map[remainder] = index\n            \n            # Update the remainder\n            remainder *= 10\n            fractional_digit = remainder // denominator\n            fractional_part.append(str(fractional_digit))\n            remainder %= denominator\n            \n            index += 1\n        \n        # Combine integer and fractional parts\n        return f\"{sign}{integer_part}.\" + ''.join(fractional_part)",
    "explanation": "The solution begins by checking if the numerator is zero, in which case it returns \"0\". It then determines the sign of the result based on the signs of the numerator and denominator. The absolute values of the numerator and denominator are used for the calculations to simplify the logic.\n\nThe integer part of the fraction is calculated using integer division. If there is no remainder, the function returns the integer part as a string.\n\nFor the fractional part, a loop is used to calculate each digit by multiplying the remainder by 10 and dividing by the denominator. A dictionary (`remainder_map`) is used to keep track of the indices of the remainders encountered. If a remainder repeats, it indicates the start of a repeating decimal, and parentheses are added accordingly.\n\nFinally, the integer and fractional parts are combined into a single string and returned.\n\n**Time Complexity**: O(n), where n is the number of digits in the fractional part. In the worst case, we may have to process each digit until we find a repeating cycle.\n\n**Space Complexity**: O(n) for storing the remainders in the dictionary."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 0.5\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:40"
}