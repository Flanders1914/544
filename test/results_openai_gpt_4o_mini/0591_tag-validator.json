{
  "problem": {
    "id": "591",
    "frontend_id": "591",
    "title": "Tag Validator",
    "description": "Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.\nA code snippet is valid if all the following rules hold:\n\nThe code must be wrapped in a valid closed tag. Otherwise, the code is invalid.\nA closed tag (not necessarily valid) has exactly the following format : <TAG_NAME>TAG_CONTENT</TAG_NAME>. Among them, <TAG_NAME> is the start tag, and </TAG_NAME> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid.\nA valid TAG_NAME only contain upper-case letters, and has length in range [1,9]. Otherwise, the TAG_NAME is invalid.\nA valid TAG_CONTENT may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched <, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the TAG_CONTENT is invalid.\nA start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.\nA < is unmatched if you cannot find a subsequent >. And when you find a < or </, all the subsequent characters until the next > should be parsed as TAG_NAME (not necessarily valid).\nThe cdata has the following format : <![CDATA[CDATA_CONTENT]]>. The range of CDATA_CONTENT is defined as the characters between <![CDATA[ and the first subsequent ]]>.\nCDATA_CONTENT may contain any characters. The function of cdata is to forbid the validator to parse CDATA_CONTENT, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters.\n\n \nExample 1:\n\nInput: code = \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"\nOutput: true\nExplanation: \nThe code is wrapped in a closed tag : <DIV> and </DIV>. \nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. \nAlthough CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true.\n\nExample 2:\n\nInput: code = \"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"\nOutput: true\nExplanation:\nWe first separate the code into : start_tag|tag_content|end_tag.\nstart_tag -> \"<DIV>\"\nend_tag -> \"</DIV>\"\ntag_content could also be separated into : text1|cdata|text2.\ntext1 -> \">>  ![cdata[]] \"\ncdata -> \"<![CDATA[<div>]>]]>\", where the CDATA_CONTENT is \"<div>]>\"\ntext2 -> \"]]>>]\"\nThe reason why start_tag is NOT \"<DIV>>>\" is because of the rule 6.\nThe reason why cdata is NOT \"<![CDATA[<div>]>]]>]]>\" is because of the rule 7.\n\nExample 3:\n\nInput: code = \"<A>  <B> </A>   </B>\"\nOutput: false\nExplanation: Unbalanced. If \"<A>\" is closed, then \"<B>\" must be unmatched, and vice versa.\n\n \nConstraints:\n\n1 <= code.length <= 500\ncode consists of English letters, digits, '<', '>', '/', '!', '[', ']', '.', and ' '.\n\n",
    "difficulty": "Hard",
    "examples": [
      "\"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"",
      "\"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"",
      "\"<A>  <B> </A>   </B>\""
    ],
    "structured_test_cases": [
      {
        "input": {
          "code": "\"<DIV>This is the first line <![CDATA[<div>]]></DIV>\""
        },
        "expected": "true"
      },
      {
        "input": {
          "code": "\"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\""
        },
        "expected": "true"
      },
      {
        "input": {
          "code": "\"<A>  <B> </A>   </B>\""
        },
        "expected": "false"
      }
    ],
    "python_starter": "class Solution:\n    def isValid(self, code: str) -> bool:\n        ",
    "hints": [],
    "meta_data": {
      "name": "isValid",
      "params": [
        {
          "name": "code",
          "type": "string"
        }
      ],
      "return": {
        "type": "boolean"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def isValid(self, code: str) -> bool:\n        stack = []\n        i = 0\n        n = len(code)\n\n        while i < n:\n            if code[i] == '<':\n                # Check for CDATA\n                if code[i:i+9] == '<![CDATA[':\n                    # Find the end of CDATA\n                    end_cdata = code.find(']]>', i)\n                    if end_cdata == -1:\n                        return False  # No closing for CDATA\n                    i = end_cdata + 3  # Move past the CDATA\n                    continue\n\n                # Parse a tag\n                j = i + 1\n                if j < n and code[j] == '/':  # Closing tag\n                    j += 1\n                    while j < n and code[j] != '>':\n                        j += 1\n                    if j == n or j == i + 2 or j - (i + 2) > 9 or not code[i+2:j].isupper():\n                        return False  # Invalid closing tag\n                    tag_name = code[i+2:j]\n                    if not stack or stack[-1] != tag_name:\n                        return False  # Mismatched closing tag\n                    stack.pop()  # Valid closing tag, pop from stack\n                else:  # Opening tag\n                    while j < n and code[j] != '>':\n                        j += 1\n                    if j == n or j - (i + 1) > 9 or not code[i+1:j].isupper():\n                        return False  # Invalid opening tag\n                    stack.append(code[i+1:j])  # Push valid tag to stack\n                i = j + 1  # Move past the tag\n            else:\n                # Move through text content\n                while i < n and code[i] != '<':\n                    i += 1\n\n        return len(stack) == 0  # Valid if stack is empty",
    "explanation": "The solution uses a stack to manage the nested structure of tags. Here's a breakdown of the approach:\n\n1. **Initialization**: We start with an empty stack and iterate through the string character by character.\n\n2. **Tag Parsing**: When we encounter a `<`, we check if it starts a CDATA section or a tag. For CDATA, we find the closing `]]>` and skip its content. For tags, we determine if it's an opening or closing tag based on the presence of a `/`.\n\n3. **Validation**: For each tag, we validate its name and ensure that closing tags match the most recent opening tag on the stack. If any validation fails, we return `False`.\n\n4. **Final Check**: After processing the entire string, we check if the stack is empty. If it is, all tags were properly closed, and we return `True`. If not, we return `False`.\n\n**Time Complexity**: O(n), where n is the length of the input string. We traverse the string once.\n\n**Space Complexity**: O(n) in the worst case for the stack, if all tags are valid and nested."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: True\nTest case 2:\n[PASS] Test passed: True\nTest case 3:\n[PASS] Test passed: False\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:01:27"
}