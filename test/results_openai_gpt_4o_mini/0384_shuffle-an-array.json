{
  "problem": {
    "id": "384",
    "frontend_id": "384",
    "title": "Shuffle an Array",
    "description": "Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling.\nImplement the Solution class:\n\nSolution(int[] nums) Initializes the object with the integer array nums.\nint[] reset() Resets the array to its original configuration and returns it.\nint[] shuffle() Returns a random shuffling of the array.\n\n \nExample 1:\n\nInput\n[\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n[[[1, 2, 3]], [], [], []]\nOutput\n[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n\nExplanation\nSolution solution = new Solution([1, 2, 3]);\nsolution.shuffle();    // Shuffle the array [1,2,3] and return its result.\n                       // Any permutation of [1,2,3] must be equally likely to be returned.\n                       // Example: return [3, 1, 2]\nsolution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]\nsolution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]\n\n\n \nConstraints:\n\n1 <= nums.length <= 50\n-106 <= nums[i] <= 106\nAll the elements of nums are unique.\nAt most 104 calls in total will be made to reset and shuffle.\n\n",
    "difficulty": "Medium",
    "examples": [
      "[\"Solution\",\"shuffle\",\"reset\",\"shuffle\"]",
      "[[[1,2,3]],[],[],[]]"
    ],
    "structured_test_cases": [],
    "python_starter": "class Solution:\n\n    def __init__(self, nums: List[int]):\n        \n\n    def reset(self) -> List[int]:\n        \n\n    def shuffle(self) -> List[int]:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(nums)\n# param_1 = obj.reset()\n# param_2 = obj.shuffle()",
    "hints": [
      "The solution expects that we always use the original array to shuffle() else some of the test cases fail. (Credits; @snehasingh31)"
    ],
    "meta_data": {
      "classname": "Solution",
      "constructor": {
        "params": [
          {
            "type": "integer[]",
            "name": "nums"
          }
        ]
      },
      "methods": [
        {
          "params": [],
          "name": "reset",
          "return": {
            "type": "integer[]"
          }
        },
        {
          "params": [],
          "return": {
            "type": "integer[]"
          },
          "name": "shuffle"
        }
      ],
      "return": {
        "type": "boolean"
      },
      "systemdesign": true
    }
  },
  "solution": {
    "code": "import random\nfrom typing import List\n\nclass Solution:\n\n    def __init__(self, nums: List[int]):\n        self.original = nums[:]  # Store the original array\n        self.nums = nums[:]      # Create a copy for shuffling\n\n    def reset(self) -> List[int]:\n        self.nums = self.original[:]  # Reset to the original array\n        return self.nums\n\n    def shuffle(self) -> List[int]:\n        # Implementing Fisher-Yates shuffle\n        for i in range(len(self.nums) - 1, 0, -1):\n            j = random.randint(0, i)  # Get a random index from 0 to i\n            self.nums[i], self.nums[j] = self.nums[j], self.nums[i]  # Swap\n        return self.nums",
    "explanation": "The `Solution` class is designed to handle the shuffling and resetting of an integer array. \n\n1. **Initialization (`__init__`)**: When an instance of `Solution` is created, it takes an integer array `nums` as input. It stores a copy of this array in `self.original` for resetting purposes and also keeps a copy in `self.nums` for shuffling.\n\n2. **Reset Method (`reset`)**: This method simply returns the original array by copying `self.original` back to `self.nums`. This allows the user to reset the array to its initial state.\n\n3. **Shuffle Method (`shuffle`)**: This method implements the Fisher-Yates shuffle algorithm. It iterates from the last index of the array to the first, generating a random index `j` for each index `i`. It then swaps the elements at these indices. This ensures that every permutation of the array is equally likely.\n\n**Time Complexity**:\n- The `reset` method runs in O(n) time, where n is the length of the array, due to the copying of the array.\n- The `shuffle` method also runs in O(n) time, as it involves a single pass through the array.\n\n**Space Complexity**:\n- The space complexity is O(n) due to the storage of the original array.\n\nOverall, the solution is efficient and meets the problem's requirements effectively."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\nTraceback (most recent call last):\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpxtgvc6xe.py\", line 46, in <module>\n    solution = Solution()\n               ^^^^^^^^^^\nTypeError: Solution.__init__() missing 1 required positional argument: 'nums'\n"
  },
  "timestamp": "2025-04-01 18:00:52"
}