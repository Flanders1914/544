{
  "problem": {
    "id": "63",
    "frontend_id": "63",
    "title": "Unique Paths II",
    "description": "You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\nAn obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.\nReturn the number of possible unique paths that the robot can take to reach the bottom-right corner.\nThe testcases are generated so that the answer will be less than or equal to 2 * 109.\n \nExample 1:\n\n\nInput: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\nOutput: 2\nExplanation: There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right\n\nExample 2:\n\n\nInput: obstacleGrid = [[0,1],[0,0]]\nOutput: 1\n\n \nConstraints:\n\nm == obstacleGrid.length\nn == obstacleGrid[i].length\n1 <= m, n <= 100\nobstacleGrid[i][j] is 0 or 1.\n\n",
    "difficulty": "Medium",
    "examples": [
      "[[0,0,0],[0,1,0],[0,0,0]]",
      "[[0,1],[0,0]]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "obstacleGrid": "[[0,0,0]"
        },
        "expected": "2"
      },
      {
        "input": {
          "obstacleGrid": "[[0,1]"
        },
        "expected": "1"
      }
    ],
    "python_starter": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        ",
    "hints": [
      "Use dynamic programming since, from each cell, you can move to the right or down.",
      "assume dp[i][j] is the number of unique paths to reach (i, j). dp[i][j] = dp[i][j -1] + dp[i - 1][j]. Be careful when you encounter an obstacle. set its value in dp to 0."
    ],
    "meta_data": {
      "name": "uniquePathsWithObstacles",
      "params": [
        {
          "name": "obstacleGrid",
          "type": "integer[][]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        if not obstacleGrid or obstacleGrid[0][0] == 1:\n            return 0\n        \n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        \n        # Create a DP table\n        dp = [[0] * n for _ in range(m)]\n        \n        # Starting point\n        dp[0][0] = 1\n        \n        # Fill the DP table\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0  # No paths through obstacles\n                else:\n                    if i > 0:\n                        dp[i][j] += dp[i - 1][j]  # Paths from above\n                    if j > 0:\n                        dp[i][j] += dp[i][j - 1]  # Paths from the left\n        \n        return dp[m - 1][n - 1]  # Return the number of unique paths to the bottom-right corner",
    "explanation": "The solution uses a dynamic programming approach to count the unique paths in a grid with obstacles. \n\n1. **Initialization**: We first check if the starting cell is blocked. If it is, we return 0. We also create a 2D list `dp` to store the number of unique paths to each cell.\n\n2. **Filling the DP Table**: We iterate through each cell in the grid:\n   - If the cell contains an obstacle (1), we set the corresponding `dp` cell to 0.\n   - If the cell is free (0), we add the number of ways to reach it from the cell above and the cell to the left, if they exist.\n\n3. **Final Output**: The value at `dp[m-1][n-1]` gives the total number of unique paths to the bottom-right corner.\n\n**Time Complexity**: O(m * n), where m is the number of rows and n is the number of columns in the grid. We traverse each cell once.\n\n**Space Complexity**: O(m * n) for the `dp` table. However, we could optimize this to O(n) by using a single array if we only keep track of the current and previous rows.\n\nOverall, this solution efficiently counts the unique paths while handling obstacles appropriately."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmp5zsiu6y_.py\", line 63\n    input_0_0 = [[0,0,0]\n                 ^^^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n"
  },
  "timestamp": "2025-04-01 18:00:30"
}