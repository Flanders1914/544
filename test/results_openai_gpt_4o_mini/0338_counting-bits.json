{
  "problem": {
    "id": "338",
    "frontend_id": "338",
    "title": "Counting Bits",
    "description": "Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.\n \nExample 1:\n\nInput: n = 2\nOutput: [0,1,1]\nExplanation:\n0 --> 0\n1 --> 1\n2 --> 10\n\nExample 2:\n\nInput: n = 5\nOutput: [0,1,1,2,1,2]\nExplanation:\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101\n\n \nConstraints:\n\n0 <= n <= 105\n\n \nFollow up:\n\nIt is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass?\nCan you do it without using any built-in function (i.e., like __builtin_popcount in C++)?\n\n",
    "difficulty": "Easy",
    "examples": [
      "2",
      "5"
    ],
    "structured_test_cases": [
      {
        "input": {
          "n": "2"
        },
        "expected": "[0,1,1]"
      },
      {
        "input": {
          "n": "5"
        },
        "expected": "[0,1,1,2,1,2]"
      }
    ],
    "python_starter": "class Solution:\n    def countBits(self, n: int) -> List[int]:\n        ",
    "hints": [
      "You should make use of what you have produced already.",
      "Divide the numbers in ranges like [2-3], [4-7], [8-15] and so on. And try to generate new range from previous.",
      "Or does the odd/even status of the number help you in calculating the number of 1s?"
    ],
    "meta_data": {
      "name": "countBits",
      "params": [
        {
          "name": "n",
          "type": "integer"
        }
      ],
      "return": {
        "type": "integer[]"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def countBits(self, n: int) -> List[int]:\n        # Initialize the result array with zeros\n        ans = [0] * (n + 1)\n        \n        # Fill the array using the relationship described\n        for i in range(1, n + 1):\n            # Use the previously computed values to calculate the current value\n            ans[i] = ans[i >> 1] + (i & 1)\n        \n        return ans",
    "explanation": "The solution initializes an array `ans` of size `n + 1` filled with zeros. We then iterate from 1 to n, calculating the number of 1's for each integer `i` using the previously computed values. The expression `i >> 1` effectively divides `i` by 2 (shifting bits to the right), and `i & 1` checks if the least significant bit is 1 (which indicates whether `i` is odd).\n\nThis approach runs in O(n) time since we make a single pass through the numbers from 1 to n, and each operation within the loop is O(1). The space complexity is O(n) due to the storage of the result array.\n\nOverall, this method is efficient and meets the problem's constraints, providing a linear time solution without using any built-in functions for counting bits."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: [0, 1, 1]\nTest case 2:\n[PASS] Test passed: [0, 1, 1, 2, 1, 2]\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:49"
}