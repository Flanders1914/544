{
  "problem": {
    "id": "94",
    "frontend_id": "94",
    "title": "Binary Tree Inorder Traversal",
    "description": "Given the root of a binary tree, return the inorder traversal of its nodes' values.\n \nExample 1:\n\nInput: root = [1,null,2,3]\nOutput: [1,3,2]\nExplanation:\n\n\nExample 2:\n\nInput: root = [1,2,3,4,5,null,8,null,null,6,7,9]\nOutput: [4,2,6,5,7,1,3,9,8]\nExplanation:\n\n\nExample 3:\n\nInput: root = []\nOutput: []\n\nExample 4:\n\nInput: root = [1]\nOutput: [1]\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\n\n \nFollow up: Recursive solution is trivial, could you do it iteratively?",
    "difficulty": "Easy",
    "examples": [
      "[1,null,2,3]",
      "[1,2,3,4,5,null,8,null,null,6,7,9]",
      "[]",
      "[1]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "root": "[1,null,2,3]"
        },
        "expected": "[1,3,2]"
      },
      {
        "input": {
          "root": "[1,2,3,4,5,null,8,null,null,6,7,9]"
        },
        "expected": "[4,2,6,5,7,1,3,9,8]"
      },
      {
        "input": {
          "root": "[]"
        },
        "expected": "[]"
      }
    ],
    "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "inorderTraversal",
      "params": [
        {
          "name": "root",
          "type": "TreeNode"
        }
      ],
      "return": {
        "type": "list<integer>",
        "dealloc": true
      }
    }
  },
  "solution": {
    "code": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        result = []  # This will hold the inorder traversal result\n        stack = []   # Stack to keep track of nodes\n        current = root  # Start with the root node\n        \n        while current is not None or stack:\n            # Reach the leftmost node of the current node\n            while current is not None:\n                stack.append(current)  # Push current node to stack\n                current = current.left  # Move to the left child\n            \n            # Current must be None at this point, so we pop the top node\n            current = stack.pop()\n            result.append(current.val)  # Add the node's value to the result\n            \n            # We have visited the node and its left subtree, now visit the right subtree\n            current = current.right\n        \n        return result  # Return the final inorder traversal result",
    "explanation": "The provided solution implements an iterative inorder traversal of a binary tree using a stack. \n\n1. **Initialization**: We initialize an empty list `result` to store the values of the nodes in inorder sequence and a `stack` to help with the traversal. We start with the `current` node set to the root of the tree.\n\n2. **Traversal Loop**: The outer `while` loop continues as long as there are nodes to process (either the `current` node is not `None` or the `stack` is not empty).\n\n3. **Leftmost Node**: The inner `while` loop traverses down the left side of the tree, pushing each node onto the stack until we reach a node that has no left child (`current` becomes `None`).\n\n4. **Processing Nodes**: Once we reach a `None`, we pop the top node from the stack (which is the last node we visited) and add its value to the `result` list. We then set `current` to the right child of the popped node to continue the traversal.\n\n5. **Completion**: This process continues until all nodes have been visited, at which point we return the `result` list containing the values in inorder sequence.\n\n**Time Complexity**: O(n), where n is the number of nodes in the tree, since we visit each node exactly once.\n\n**Space Complexity**: O(h), where h is the height of the tree. In the worst case (a skewed tree), the stack can grow to the height of the tree, which is O(n). In a balanced tree, it would be O(log n)."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:33"
}