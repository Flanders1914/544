{
  "problem": {
    "id": "352",
    "frontend_id": "352",
    "title": "Data Stream as Disjoint Intervals",
    "description": "Given a data stream input of non-negative integers a1, a2, ..., an, summarize the numbers seen so far as a list of disjoint intervals.\nImplement the SummaryRanges class:\n\nSummaryRanges() Initializes the object with an empty stream.\nvoid addNum(int value) Adds the integer value to the stream.\nint[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. The answer should be sorted by starti.\n\n \nExample 1:\n\nInput\n[\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n[[], [1], [], [3], [], [7], [], [2], [], [6], []]\nOutput\n[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]\n\nExplanation\nSummaryRanges summaryRanges = new SummaryRanges();\nsummaryRanges.addNum(1);      // arr = [1]\nsummaryRanges.getIntervals(); // return [[1, 1]]\nsummaryRanges.addNum(3);      // arr = [1, 3]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\nsummaryRanges.addNum(7);      // arr = [1, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\nsummaryRanges.addNum(2);      // arr = [1, 2, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\nsummaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [6, 7]]\n\n \nConstraints:\n\n0 <= value <= 104\nAt most 3 * 104 calls will be made to addNum and getIntervals.\nAt most 102 calls will be made to getIntervals.\n\n \nFollow up: What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?\n",
    "difficulty": "Hard",
    "examples": [
      "[\"SummaryRanges\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\"]",
      "[[],[1],[],[3],[],[7],[],[2],[],[6],[]]"
    ],
    "structured_test_cases": [],
    "python_starter": "class SummaryRanges:\n\n    def __init__(self):\n        \n\n    def addNum(self, value: int) -> None:\n        \n\n    def getIntervals(self) -> List[List[int]]:\n        \n\n\n# Your SummaryRanges object will be instantiated and called as such:\n# obj = SummaryRanges()\n# obj.addNum(value)\n# param_2 = obj.getIntervals()",
    "hints": [],
    "meta_data": {
      "classname": "SummaryRanges",
      "constructor": {
        "params": []
      },
      "methods": [
        {
          "params": [
            {
              "type": "integer",
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "name": "addNum"
        },
        {
          "params": [],
          "return": {
            "type": "integer[][]"
          },
          "name": "getIntervals"
        }
      ],
      "return": {
        "type": "boolean"
      },
      "systemdesign": true
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass SummaryRanges:\n\n    def __init__(self):\n        # Initialize an empty list to store the intervals\n        self.intervals = []\n\n    def addNum(self, value: int) -> None:\n        # Create a new interval to potentially merge\n        new_interval = [value, value]\n        \n        # List to hold merged intervals\n        merged_intervals = []\n        i = 0\n        \n        # Add all intervals that end before the new interval starts\n        while i < len(self.intervals) and self.intervals[i][1] < new_interval[0]:\n            merged_intervals.append(self.intervals[i])\n            i += 1\n        \n        # Merge overlapping intervals\n        while i < len(self.intervals) and self.intervals[i][0] <= new_interval[1]:\n            new_interval[0] = min(new_interval[0], self.intervals[i][0])\n            new_interval[1] = max(new_interval[1], self.intervals[i][1])\n            i += 1\n        \n        # Add the merged new interval\n        merged_intervals.append(new_interval)\n        \n        # Add the remaining intervals\n        while i < len(self.intervals):\n            merged_intervals.append(self.intervals[i])\n            i += 1\n        \n        # Update the intervals list\n        self.intervals = merged_intervals\n\n    def getIntervals(self) -> List[List[int]]:\n        # Return the current list of disjoint intervals\n        return self.intervals",
    "explanation": "The `SummaryRanges` class maintains a list of disjoint intervals. The `addNum` method is responsible for adding a new number to the stream and merging it with existing intervals if necessary. \n\n1. **Initialization**: The constructor initializes an empty list `self.intervals` to store the disjoint intervals.\n\n2. **Adding a Number**:\n   - A new interval is created for the incoming number.\n   - We iterate through the existing intervals:\n     - First, we add all intervals that end before the new interval starts to the `merged_intervals` list.\n     - Then, we merge any overlapping intervals by adjusting the start and end of the new interval.\n   - Finally, we add the new merged interval to the list and append any remaining intervals.\n\n3. **Retrieving Intervals**: The `getIntervals` method simply returns the current list of intervals.\n\n**Time Complexity**: The `addNum` method has a time complexity of O(n) in the worst case, where n is the number of intervals. The `getIntervals` method runs in O(1) since it just returns the list.\n\n**Space Complexity**: The space complexity is O(n) for storing the intervals.\n\nThis approach efficiently handles the merging of intervals and provides a clear structure for managing the data stream."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\nTraceback (most recent call last):\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpu71g9vmi.py\", line 76, in <module>\n    expected_0 = safe_eval('[\"SummaryRanges\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\"]')\n                 ^^^^^^^^^\nNameError: name 'safe_eval' is not defined\n"
  },
  "timestamp": "2025-04-01 18:00:50"
}