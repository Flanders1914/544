{
  "problem": {
    "id": "268",
    "frontend_id": "268",
    "title": "Missing Number",
    "description": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\n \nExample 1:\n\nInput: nums = [3,0,1]\nOutput: 2\nExplanation:\nn = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n\nExample 2:\n\nInput: nums = [0,1]\nOutput: 2\nExplanation:\nn = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n\nExample 3:\n\nInput: nums = [9,6,4,2,3,5,7,0,1]\nOutput: 8\nExplanation:\nn = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n\n\n\n \n\n\n \n\n \n \n\n\n\n\n\n \nConstraints:\n\nn == nums.length\n1 <= n <= 104\n0 <= nums[i] <= n\nAll the numbers of nums are unique.\n\n \nFollow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?\n",
    "difficulty": "Easy",
    "examples": [
      "[3,0,1]",
      "[0,1]",
      "[9,6,4,2,3,5,7,0,1]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[3,0,1]"
        },
        "expected": "2"
      },
      {
        "input": {
          "nums": "[0,1]"
        },
        "expected": "2"
      },
      {
        "input": {
          "nums": "[9,6,4,2,3,5,7,0,1]"
        },
        "expected": "8"
      }
    ],
    "python_starter": "class Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "missingNumber",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        n = len(nums)  # Get the length of the array\n        expected_sum = n * (n + 1) // 2  # Calculate the expected sum of numbers from 0 to n\n        actual_sum = sum(nums)  # Calculate the actual sum of the numbers in the array\n        return expected_sum - actual_sum  # The difference is the missing number",
    "explanation": "The solution works by first determining the expected sum of the first n natural numbers using the formula \\( \\frac{n \\times (n + 1)}{2} \\). We then compute the actual sum of the numbers present in the input array. The missing number can be found by subtracting the actual sum from the expected sum. \n\nThis method is efficient with a time complexity of O(n) because we traverse the list once to compute the sum, and it uses O(1) space since we only store a few integer variables. \n\nIn terms of space complexity, we are not using any additional data structures that grow with the input size, which keeps our space usage constant. \n\nOverall, this approach is optimal for the problem constraints provided."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 2\nTest case 2:\n[PASS] Test passed: 2\nTest case 3:\n[PASS] Test passed: 8\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:45"
}