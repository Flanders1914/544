{
  "problem": {
    "id": "611",
    "frontend_id": "611",
    "title": "Valid Triangle Number",
    "description": "Given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.\n \nExample 1:\n\nInput: nums = [2,2,3,4]\nOutput: 3\nExplanation: Valid combinations are: \n2,3,4 (using the first 2)\n2,3,4 (using the second 2)\n2,2,3\n\nExample 2:\n\nInput: nums = [4,2,3,4]\nOutput: 4\n\n \nConstraints:\n\n1 <= nums.length <= 1000\n0 <= nums[i] <= 1000\n\n",
    "difficulty": "Medium",
    "examples": [
      "[2,2,3,4]",
      "[4,2,3,4]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[2,2,3,4]"
        },
        "expected": "3"
      },
      {
        "input": {
          "nums": "[4,2,3,4]"
        },
        "expected": "4"
      }
    ],
    "python_starter": "class Solution:\n    def triangleNumber(self, nums: List[int]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "triangleNumber",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def triangleNumber(self, nums: List[int]) -> int:\n        # Sort the array to apply the triangle inequality\n        nums.sort()\n        count = 0\n        n = len(nums)\n        \n        # Iterate through each pair of sides\n        for i in range(n - 2):\n            k = i + 2  # Start k at the third element after i\n            for j in range(i + 1, n - 1):\n                # Move k to the right as long as the triangle condition holds\n                while k < n and nums[i] + nums[j] > nums[k]:\n                    k += 1\n                # All indices from j+1 to k-1 are valid\n                count += k - j - 1\n        \n        return count",
    "explanation": "The solution begins by sorting the input array `nums`. This allows us to efficiently apply the triangle inequality condition. The outer loop iterates through each element `i` as the smallest side of the triangle. The inner loop iterates through the next element `j`, which represents the second side of the triangle.\n\nFor each pair (nums[i], nums[j]), we use a third pointer `k` to find the maximum index where the triangle condition holds (i.e., nums[i] + nums[j] > nums[k]). The pointer `k` starts from `i + 2` and moves right until the condition fails. The number of valid triangles that can be formed with the sides nums[i] and nums[j] is given by the count of indices from `j + 1` to `k - 1`, which is `k - j - 1`.\n\nThe overall time complexity of this approach is O(n^2) due to the nested loops, and the space complexity is O(1) since we are using a constant amount of extra space for variables.\n\nThis solution efficiently counts the number of valid triangle triplets in the input array."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 3\nTest case 2:\n[PASS] Test passed: 4\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:01:28"
}