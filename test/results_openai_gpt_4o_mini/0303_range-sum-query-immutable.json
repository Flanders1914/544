{
  "problem": {
    "id": "303",
    "frontend_id": "303",
    "title": "Range Sum Query - Immutable",
    "description": "Given an integer array nums, handle multiple queries of the following type:\n\nCalculate the sum of the elements of nums between indices left and right inclusive where left <= right.\n\nImplement the NumArray class:\n\nNumArray(int[] nums) Initializes the object with the integer array nums.\nint sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).\n\n \nExample 1:\n\nInput\n[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\nOutput\n[null, 1, -1, -3]\n\nExplanation\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\n\n \nConstraints:\n\n1 <= nums.length <= 104\n-105 <= nums[i] <= 105\n0 <= left <= right < nums.length\nAt most 104 calls will be made to sumRange.\n\n",
    "difficulty": "Easy",
    "examples": [
      "[\"NumArray\",\"sumRange\",\"sumRange\",\"sumRange\"]",
      "[[[-2,0,3,-5,2,-1]],[0,2],[2,5],[0,5]]"
    ],
    "structured_test_cases": [],
    "python_starter": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n        \n\n    def sumRange(self, left: int, right: int) -> int:\n        \n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(left,right)",
    "hints": [],
    "meta_data": {
      "classname": "NumArray",
      "maxbytesperline": 135000,
      "constructor": {
        "params": [
          {
            "type": "integer[]",
            "name": "nums"
          },
          {
            "type": "integer",
            "name": "numsSize",
            "lang": "c",
            "value": "size_1"
          }
        ]
      },
      "methods": [
        {
          "name": "sumRange",
          "params": [
            {
              "type": "integer",
              "name": "left"
            },
            {
              "type": "integer",
              "name": "right"
            }
          ],
          "return": {
            "type": "integer"
          }
        }
      ],
      "systemdesign": true,
      "params": [
        {
          "name": "inputs",
          "type": "integer[]"
        },
        {
          "name": "inputs",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "list<String>",
        "dealloc": true
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass NumArray:\n\n    def __init__(self, nums: List[int]):\n        # Initialize the prefix sum array\n        self.prefix_sum = [0] * len(nums)\n        self.prefix_sum[0] = nums[0]\n        for i in range(1, len(nums)):\n            self.prefix_sum[i] = self.prefix_sum[i - 1] + nums[i]\n\n    def sumRange(self, left: int, right: int) -> int:\n        # Calculate the sum using the prefix sum array\n        if left == 0:\n            return self.prefix_sum[right]\n        else:\n            return self.prefix_sum[right] - self.prefix_sum[left - 1]",
    "explanation": "The `NumArray` class is designed to handle multiple range sum queries efficiently. \n\n1. **Initialization**:\n   - The constructor `__init__` takes an integer array `nums` and constructs a prefix sum array. The prefix sum array is built in O(n) time, where n is the length of `nums`. Each element at index `i` in the prefix sum array represents the sum of all elements from the start of `nums` to index `i`.\n\n2. **Sum Range Method**:\n   - The `sumRange` method computes the sum of elements between indices `left` and `right`. If `left` is 0, it simply returns the value at `prefix_sum[right]`. If `left` is greater than 0, it calculates the sum by subtracting `prefix_sum[left - 1]` from `prefix_sum[right]`. This allows us to get the sum in constant time O(1).\n\n**Time Complexity**:\n- The initialization takes O(n) time.\n- Each query takes O(1) time.\n\n**Space Complexity**:\n- The space complexity is O(n) due to the storage of the prefix sum array.\n\nOverall, this solution is efficient and well-suited for the problem constraints."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\nTraceback (most recent call last):\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmp2p1xh6yp.py\", line 44, in <module>\n    solution = NumArray()\n               ^^^^^^^^^^\nTypeError: NumArray.__init__() missing 1 required positional argument: 'nums'\n"
  },
  "timestamp": "2025-04-01 18:00:47"
}