{
  "problem": {
    "id": "554",
    "frontend_id": "554",
    "title": "Brick Wall",
    "description": "There is a rectangular brick wall in front of you with n rows of bricks. The ith row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.\nDraw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.\nGiven the 2D array wall that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line.\n \nExample 1:\n\n\nInput: wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]\nOutput: 2\n\nExample 2:\n\nInput: wall = [[1],[1],[1]]\nOutput: 3\n\n \nConstraints:\n\nn == wall.length\n1 <= n <= 104\n1 <= wall[i].length <= 104\n1 <= sum(wall[i].length) <= 2 * 104\nsum(wall[i]) is the same for each row i.\n1 <= wall[i][j] <= 231 - 1\n\n",
    "difficulty": "Medium",
    "examples": [
      "[[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]",
      "[[1],[1],[1]]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "wall": "[[1,2,2,1]"
        },
        "expected": "2"
      }
    ],
    "python_starter": "class Solution:\n    def leastBricks(self, wall: List[List[int]]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "leastBricks",
      "params": [
        {
          "name": "wall",
          "type": "list<list<integer>>"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def leastBricks(self, wall: List[List[int]]) -> int:\n        # Dictionary to count the number of edges at each position\n        edge_count = defaultdict(int)\n        \n        # Iterate through each row in the wall\n        for row in wall:\n            width = 0\n            # Calculate the position of each edge except the last one\n            for brick in row[:-1]:  # Exclude the last brick to avoid counting the wall's edge\n                width += brick\n                edge_count[width] += 1\n        \n        # The maximum number of edges at any position\n        max_edges = max(edge_count.values(), default=0)\n        \n        # The minimum number of bricks crossed is total rows minus max edges\n        return len(wall) - max_edges",
    "explanation": "The solution uses a hashmap to count the number of edges at each position where a vertical line could potentially cross. We iterate through each row of the wall, maintaining a cumulative width of the bricks. For each edge (except the last one), we update our hashmap to reflect how many rows have an edge at that position.\n\n1. **Time Complexity**: The time complexity of this solution is O(n * m), where n is the number of rows and m is the average number of bricks in each row. This is because we iterate through each brick in each row to calculate the edge positions.\n\n2. **Space Complexity**: The space complexity is O(m), where m is the number of unique edge positions. In the worst case, this could be as large as the number of bricks in a row.\n\nBy finding the maximum count of edges at any position, we can determine the minimum number of bricks crossed by subtracting this count from the total number of rows. This approach efficiently computes the desired result while adhering to the constraints provided."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpzzqc7s6a.py\", line 57\n    input_0_0 = [[1,2,2,1]\n                ^\nSyntaxError: '[' was never closed\n"
  },
  "timestamp": "2025-04-01 18:01:24"
}