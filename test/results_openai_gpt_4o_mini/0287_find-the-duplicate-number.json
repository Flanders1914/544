{
  "problem": {
    "id": "287",
    "frontend_id": "287",
    "title": "Find the Duplicate Number",
    "description": "Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\nThere is only one repeated number in nums, return this repeated number.\nYou must solve the problem without modifying the array nums and using only constant extra space.\n \nExample 1:\n\nInput: nums = [1,3,4,2,2]\nOutput: 2\n\nExample 2:\n\nInput: nums = [3,1,3,4,2]\nOutput: 3\n\nExample 3:\n\nInput: nums = [3,3,3,3,3]\nOutput: 3\n \nConstraints:\n\n1 <= n <= 105\nnums.length == n + 1\n1 <= nums[i] <= n\nAll the integers in nums appear only once except for precisely one integer which appears two or more times.\n\n \nFollow up:\n\nHow can we prove that at least one duplicate number must exist in nums?\nCan you solve the problem in linear runtime complexity?\n\n",
    "difficulty": "Medium",
    "examples": [
      "[1,3,4,2,2]",
      "[3,1,3,4,2]",
      "[3,3,3,3,3]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[1,3,4,2,2]"
        },
        "expected": "2"
      }
    ],
    "python_starter": "class Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "findDuplicate",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        # Step 1: Initialize the tortoise and hare\n        tortoise = nums[0]\n        hare = nums[0]\n        \n        # Step 2: Find the intersection point\n        while True:\n            tortoise = nums[tortoise]  # Move tortoise by 1 step\n            hare = nums[nums[hare]]    # Move hare by 2 steps\n            if tortoise == hare:       # They meet inside the cycle\n                break\n        \n        # Step 3: Find the entrance to the cycle\n        tortoise = nums[0]          # Reset tortoise to the start\n        while tortoise != hare:\n            tortoise = nums[tortoise]  # Move tortoise by 1 step\n            hare = nums[hare]          # Move hare by 1 step\n        \n        return hare  # The duplicate number",
    "explanation": "The solution uses Floyd's Tortoise and Hare algorithm to detect a cycle in the array, which is formed due to the duplicate number. \n\n1. **Cycle Detection**: The first part of the algorithm finds the intersection point of the two pointers (tortoise and hare) within the cycle. Since the hare moves faster, it will eventually meet the tortoise.\n2. **Finding the Duplicate**: After finding the intersection, we reset one pointer to the start of the array and move both pointers at the same speed. The point where they meet again is the duplicate number.\n\n### Time Complexity\n- The time complexity is O(n) because in the worst case, we traverse the array a constant number of times (at most twice).\n\n### Space Complexity\n- The space complexity is O(1) since we are using only a fixed amount of extra space for the pointers.\n\nThis solution efficiently finds the duplicate number while adhering to the constraints provided in the problem statement."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 2\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:46"
}