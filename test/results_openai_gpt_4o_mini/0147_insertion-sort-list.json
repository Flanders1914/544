{
  "problem": {
    "id": "147",
    "frontend_id": "147",
    "title": "Insertion Sort List",
    "description": "Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.\nThe steps of the insertion sort algorithm:\n\nInsertion sort iterates, consuming one input element each repetition and growing a sorted output list.\nAt each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\nIt repeats until no input elements remain.\n\nThe following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\n\n \nExample 1:\n\n\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n\nExample 2:\n\n\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n\n \nConstraints:\n\nThe number of nodes in the list is in the range [1, 5000].\n-5000 <= Node.val <= 5000\n\n",
    "difficulty": "Medium",
    "examples": [
      "[4,2,1,3]",
      "[-1,5,3,4,0]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "head": "[4,2,1,3]"
        },
        "expected": "[1,2,3,4]"
      }
    ],
    "python_starter": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def insertionSortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "insertionSortList",
      "params": [
        {
          "name": "head",
          "type": "ListNode",
          "dealloc": false
        }
      ],
      "return": {
        "type": "ListNode",
        "dealloc": true
      }
    }
  },
  "solution": {
    "code": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def insertionSortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        # Create a dummy node to help with the insertion process\n        dummy = ListNode(0)\n        current = head\n        \n        while current:\n            # At each iteration, we will insert current into the sorted part\n            prev = dummy  # Start from the dummy node\n            # Find the correct position to insert current\n            while prev.next and prev.next.val < current.val:\n                prev = prev.next\n            \n            # Insert current between prev and prev.next\n            next_temp = current.next  # Store the next node to process\n            current.next = prev.next  # Link current to the next node in sorted part\n            prev.next = current  # Link prev to current\n            current = next_temp  # Move to the next node in the original list\n        \n        return dummy.next  # Return the sorted list starting from the node after dummy",
    "explanation": "The provided solution implements the insertion sort algorithm for a singly linked list. Here's a detailed breakdown of how it works:\n\n1. **Dummy Node**: A dummy node is created to simplify the insertion process. It acts as a placeholder for the head of the sorted list, allowing us to easily insert nodes without special cases for the head.\n\n2. **Outer Loop**: We iterate through each node in the original list using the `current` pointer. For each node, we need to find its correct position in the sorted list.\n\n3. **Inner Loop**: The inner loop (`while prev.next and prev.next.val < current.val`) traverses the sorted list to find the appropriate position for the `current` node. The `prev` pointer helps in locating where to insert the `current` node.\n\n4. **Insertion**: Once the correct position is found, we adjust the pointers:\n   - `next_temp` stores the next node to be processed from the original list.\n   - We link `current` to the next node in the sorted list (`prev.next`).\n   - We then link `prev` to `current`, effectively inserting it into the sorted list.\n\n5. **Return**: After processing all nodes, we return `dummy.next`, which points to the head of the newly sorted list.\n\n**Complexity Analysis**:\n- **Time Complexity**: O(n^2) in the worst case, where n is the number of nodes in the list. This occurs when the list is sorted in reverse order.\n- **Space Complexity**: O(1) since we are using a constant amount of extra space (the dummy node).\n\nThis solution efficiently sorts the linked list in place using the insertion sort algorithm."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:38"
}