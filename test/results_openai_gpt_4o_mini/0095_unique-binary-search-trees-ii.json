{
  "problem": {
    "id": "95",
    "frontend_id": "95",
    "title": "Unique Binary Search Trees II",
    "description": "Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\n \nExample 1:\n\n\nInput: n = 3\nOutput: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n\nExample 2:\n\nInput: n = 1\nOutput: [[1]]\n\n \nConstraints:\n\n1 <= n <= 8\n\n",
    "difficulty": "Medium",
    "examples": [
      "3",
      "1"
    ],
    "structured_test_cases": [
      {
        "input": {
          "n": "3"
        },
        "expected": "[[1,null,2,null,3]"
      }
    ],
    "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "generateTrees",
      "params": [
        {
          "name": "n",
          "type": "integer"
        }
      ],
      "return": {
        "type": "list<TreeNode>"
      }
    }
  },
  "solution": {
    "code": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\n        if n == 0:\n            return []\n        \n        def generate_trees(start, end):\n            if start > end:\n                return [None]  # Base case: no nodes to place\n            \n            all_trees = []\n            for i in range(start, end + 1):\n                # Generate all left and right subtrees\n                left_trees = generate_trees(start, i - 1)\n                right_trees = generate_trees(i + 1, end)\n                \n                # Combine left and right trees with the root i\n                for left in left_trees:\n                    for right in right_trees:\n                        root = TreeNode(i)\n                        root.left = left\n                        root.right = right\n                        all_trees.append(root)\n            return all_trees\n        \n        return generate_trees(1, n)",
    "explanation": "The solution uses a recursive function `generate_trees` that generates all unique BSTs for a given range of values. The function works as follows:\n\n1. **Base Case**: If the `start` index is greater than the `end` index, it means there are no values to form a tree, so we return a list containing `None`.\n\n2. **Recursive Case**: For each value `i` in the range from `start` to `end`, we consider `i` as the root of the tree. We then recursively generate all possible left subtrees using values from `start` to `i-1` and all possible right subtrees using values from `i+1` to `end`.\n\n3. **Combining Trees**: For each combination of left and right subtrees, we create a new `TreeNode` with `i` as the value and attach the left and right subtrees. We add this tree to our list of all trees.\n\n4. **Final Return**: The function returns a list of all unique BSTs generated for the range from `1` to `n`.\n\n**Time Complexity**: The time complexity is O(4^n / n^(3/2)), which is derived from the Catalan number that counts the number of unique BSTs.\n\n**Space Complexity**: The space complexity is O(n), which is used for the recursion stack and to store the generated trees.\n\nThis approach efficiently generates all unique BSTs for the given number of nodes `n`."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmp5lbwfnbc.py\", line 124\n    expected_0 = [[1,null,2,null,3]\n                 ^\nSyntaxError: '[' was never closed\n"
  },
  "timestamp": "2025-04-01 18:00:33"
}