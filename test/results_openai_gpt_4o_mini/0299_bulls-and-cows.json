{
  "problem": {
    "id": "299",
    "frontend_id": "299",
    "title": "Bulls and Cows",
    "description": "You are playing the Bulls and Cows game with your friend.\nYou write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:\n\nThe number of \"bulls\", which are digits in the guess that are in the correct position.\nThe number of \"cows\", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.\n\nGiven the secret number secret and your friend's guess guess, return the hint for your friend's guess.\nThe hint should be formatted as \"xAyB\", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.\n \nExample 1:\n\nInput: secret = \"1807\", guess = \"7810\"\nOutput: \"1A3B\"\nExplanation: Bulls are connected with a '|' and cows are underlined:\n\"1807\"\n  |\n\"7810\"\nExample 2:\n\nInput: secret = \"1123\", guess = \"0111\"\nOutput: \"1A1B\"\nExplanation: Bulls are connected with a '|' and cows are underlined:\n\"1123\"        \"1123\"\n  |      or     |\n\"0111\"        \"0111\"\nNote that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.\n\n \nConstraints:\n\n1 <= secret.length, guess.length <= 1000\nsecret.length == guess.length\nsecret and guess consist of digits only.\n\n",
    "difficulty": "Medium",
    "examples": [
      "\"1807\"",
      "\"7810\"",
      "\"1123\"",
      "\"0111\""
    ],
    "structured_test_cases": [
      {
        "input": {
          "secret": "\"1807\"",
          "guess": "\"7810\""
        },
        "expected": "1A3B"
      },
      {
        "input": {
          "secret": "\"1123\"",
          "guess": "\"0111\""
        },
        "expected": "1A1B"
      }
    ],
    "python_starter": "class Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        ",
    "hints": [],
    "meta_data": {
      "name": "getHint",
      "params": [
        {
          "name": "secret",
          "type": "string"
        },
        {
          "name": "guess",
          "type": "string"
        }
      ],
      "return": {
        "type": "string"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        bulls = 0\n        cows = 0\n        \n        # Count occurrences of digits in secret and guess\n        secret_count = [0] * 10\n        guess_count = [0] * 10\n        \n        # First pass to count bulls and record unmatched digits\n        for s, g in zip(secret, guess):\n            if s == g:\n                bulls += 1\n            else:\n                secret_count[int(s)] += 1\n                guess_count[int(g)] += 1\n        \n        # Second pass to count cows\n        for i in range(10):\n            cows += min(secret_count[i], guess_count[i])\n        \n        return f\"{bulls}A{cows}B\"",
    "explanation": "The solution begins by initializing counters for bulls and cows. We also create two lists, `secret_count` and `guess_count`, to keep track of the frequency of unmatched digits in the `secret` and `guess` strings.\n\n1. **Counting Bulls**: We iterate through both strings simultaneously using `zip()`. For each pair of characters, if they match, we increment the `bulls` counter. If they do not match, we update the counts in `secret_count` and `guess_count` for the respective digits.\n\n2. **Counting Cows**: After identifying bulls, we loop through the digit counts (0-9) and calculate the number of cows by taking the minimum of the counts from `secret_count` and `guess_count`. This gives us the number of digits that are present in both strings but in different positions.\n\n3. **Returning the Result**: Finally, we format the result as \"xAyB\" and return it.\n\n**Time Complexity**: The solution runs in O(n) time, where n is the length of the input strings, since we make a single pass to count bulls and another pass to count cows.\n\n**Space Complexity**: The space complexity is O(1) because the size of the `secret_count` and `guess_count` arrays is constant (10 elements for digits 0-9), regardless of the input size."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:47"
}