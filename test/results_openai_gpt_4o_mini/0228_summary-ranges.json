{
  "problem": {
    "id": "228",
    "frontend_id": "228",
    "title": "Summary Ranges",
    "description": "You are given a sorted unique integer array nums.\nA range [a,b] is the set of all integers from a to b (inclusive).\nReturn the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.\nEach range [a,b] in the list should be output as:\n\n\"a->b\" if a != b\n\"a\" if a == b\n\n \nExample 1:\n\nInput: nums = [0,1,2,4,5,7]\nOutput: [\"0->2\",\"4->5\",\"7\"]\nExplanation: The ranges are:\n[0,2] --> \"0->2\"\n[4,5] --> \"4->5\"\n[7,7] --> \"7\"\n\nExample 2:\n\nInput: nums = [0,2,3,4,6,8,9]\nOutput: [\"0\",\"2->4\",\"6\",\"8->9\"]\nExplanation: The ranges are:\n[0,0] --> \"0\"\n[2,4] --> \"2->4\"\n[6,6] --> \"6\"\n[8,9] --> \"8->9\"\n\n \nConstraints:\n\n0 <= nums.length <= 20\n-231 <= nums[i] <= 231 - 1\nAll the values of nums are unique.\nnums is sorted in ascending order.\n\n",
    "difficulty": "Easy",
    "examples": [
      "[0,1,2,4,5,7]",
      "[0,2,3,4,6,8,9]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[0,1,2,4,5,7]"
        },
        "expected": "[0->2,4->5,7]"
      },
      {
        "input": {
          "nums": "[0,2,3,4,6,8,9]"
        },
        "expected": "[0,2->4,6,8->9]"
      }
    ],
    "python_starter": "class Solution:\n    def summaryRanges(self, nums: List[int]) -> List[str]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "summaryRanges",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "list<string>"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def summaryRanges(self, nums: List[int]) -> List[str]:\n        if not nums:\n            return []\n        \n        ranges = []\n        start = nums[0]\n        \n        for i in range(1, len(nums)):\n            # Check if the current number is not contiguous with the previous one\n            if nums[i] != nums[i - 1] + 1:\n                # If start equals the current number, it's a single number range\n                if start == nums[i - 1]:\n                    ranges.append(str(start))\n                else:\n                    # Otherwise, it's a range\n                    ranges.append(f\"{start}->{nums[i - 1]}\")\n                # Update start to the current number\n                start = nums[i]\n        \n        # Handle the last range\n        if start == nums[-1]:\n            ranges.append(str(start))\n        else:\n            ranges.append(f\"{start}->{nums[-1]}\")\n        \n        return ranges",
    "explanation": "The solution begins by checking if the input list `nums` is empty. If it is, we return an empty list. We then initialize an empty list `ranges` to store the resulting ranges and set the `start` variable to the first element of `nums`.\n\nWe iterate through the list starting from the second element. For each element, we check if it is contiguous with the previous element (i.e., if it is equal to the previous element plus one). If it is not contiguous, we finalize the current range. If the `start` is equal to the last number in the current range, we add it as a single number; otherwise, we format it as a range.\n\nAfter the loop, we handle the last range since it may not have been added during the loop. Finally, we return the list of ranges.\n\nThe time complexity of this solution is O(n) because we traverse the list once, and the space complexity is O(k) for storing the ranges, where k is the number of ranges generated."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpmzp4pv3n.py\", line 67\n    expected_0 = [0->2,4->5,7]\n                   ^^\nSyntaxError: invalid syntax\n"
  },
  "timestamp": "2025-04-01 18:00:44"
}