{
  "problem": {
    "id": "398",
    "frontend_id": "398",
    "title": "Random Pick Index",
    "description": "Given an integer array nums with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.\nImplement the Solution class:\n\nSolution(int[] nums) Initializes the object with the array nums.\nint pick(int target) Picks a random index i from nums where nums[i] == target. If there are multiple valid i's, then each index should have an equal probability of returning.\n\n \nExample 1:\n\nInput\n[\"Solution\", \"pick\", \"pick\", \"pick\"]\n[[[1, 2, 3, 3, 3]], [3], [1], [3]]\nOutput\n[null, 4, 0, 2]\n\nExplanation\nSolution solution = new Solution([1, 2, 3, 3, 3]);\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\nsolution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n\n \nConstraints:\n\n1 <= nums.length <= 2 * 104\n-231 <= nums[i] <= 231 - 1\ntarget is an integer from nums.\nAt most 104 calls will be made to pick.\n\n",
    "difficulty": "Medium",
    "examples": [
      "[\"Solution\",\"pick\",\"pick\",\"pick\"]",
      "[[[1,2,3,3,3]],[3],[1],[3]]"
    ],
    "structured_test_cases": [],
    "python_starter": "class Solution:\n\n    def __init__(self, nums: List[int]):\n        \n\n    def pick(self, target: int) -> int:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(nums)\n# param_1 = obj.pick(target)",
    "hints": [],
    "meta_data": {
      "classname": "Solution",
      "constructor": {
        "params": [
          {
            "name": "nums",
            "type": "integer[]"
          },
          {
            "type": "integer",
            "name": "numsSize",
            "lang": "c",
            "value": "size_1"
          }
        ]
      },
      "methods": [
        {
          "name": "pick",
          "params": [
            {
              "name": "target",
              "type": "integer"
            }
          ],
          "return": {
            "type": "integer"
          }
        }
      ],
      "systemdesign": true,
      "params": [
        {
          "name": "inputs",
          "type": "integer[]"
        },
        {
          "name": "inputs",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "list<String>",
        "dealloc": true
      }
    }
  },
  "solution": {
    "code": "import random\nfrom typing import List\n\nclass Solution:\n\n    def __init__(self, nums: List[int]):\n        # Initialize a dictionary to hold the indices of each number\n        self.indices = {}\n        for index, num in enumerate(nums):\n            if num not in self.indices:\n                self.indices[num] = []\n            self.indices[num].append(index)\n\n    def pick(self, target: int) -> int:\n        # Randomly pick an index from the list of indices for the target\n        return random.choice(self.indices[target])",
    "explanation": "The solution involves creating a class `Solution` that initializes with an integer array `nums`. During initialization, we create a dictionary called `indices` that maps each unique number in `nums` to a list of its indices. This allows us to quickly access all indices for any target number.\n\n1. **Initialization (`__init__` method)**:\n   - We iterate through the `nums` array using `enumerate`, which gives us both the index and the number.\n   - For each number, we check if it is already a key in the `indices` dictionary. If not, we create a new entry with an empty list.\n   - We then append the current index to the list corresponding to that number.\n\n2. **Picking an index (`pick` method)**:\n   - When the `pick` method is called with a target number, we simply retrieve the list of indices from the `indices` dictionary.\n   - We use `random.choice` to select one index from this list, ensuring that each index has an equal chance of being selected.\n\n**Time Complexity**:\n- The initialization takes O(n) time, where n is the length of the input array.\n- Each call to `pick` takes O(1) time on average.\n\n**Space Complexity**:\n- The space complexity is O(n) due to the storage of indices in the dictionary.\n\nThis solution is efficient and meets the problem's constraints, allowing for up to 10,000 calls to `pick` without performance issues."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\nTraceback (most recent call last):\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmp0xnz7gel.py\", line 43, in <module>\n    solution = Solution()\n               ^^^^^^^^^^\nTypeError: Solution.__init__() missing 1 required positional argument: 'nums'\n"
  },
  "timestamp": "2025-04-01 18:00:53"
}