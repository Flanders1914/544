{
  "problem": {
    "id": "530",
    "frontend_id": "530",
    "title": "Minimum Absolute Difference in BST",
    "description": "Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.\n \nExample 1:\n\n\nInput: root = [4,2,6,1,3]\nOutput: 1\n\nExample 2:\n\n\nInput: root = [1,0,48,null,null,12,49]\nOutput: 1\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [2, 104].\n0 <= Node.val <= 105\n\n \nNote: This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/\n",
    "difficulty": "Easy",
    "examples": [
      "[4,2,6,1,3]",
      "[1,0,48,null,null,12,49]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "root": "[4,2,6,1,3]"
        },
        "expected": "1"
      }
    ],
    "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getMinimumDifference(self, root: Optional[TreeNode]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "getMinimumDifference",
      "params": [
        {
          "name": "root",
          "type": "TreeNode"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def getMinimumDifference(self, root: Optional[TreeNode]) -> int:\n        # This will hold the values of the nodes in sorted order\n        values = []\n        \n        # In-order traversal to get the values in sorted order\n        def in_order_traversal(node):\n            if node:\n                in_order_traversal(node.left)\n                values.append(node.val)\n                in_order_traversal(node.right)\n        \n        in_order_traversal(root)\n        \n        # Initialize the minimum difference to a large value\n        min_diff = float('inf')\n        \n        # Calculate the minimum difference between consecutive values\n        for i in range(1, len(values)):\n            min_diff = min(min_diff, values[i] - values[i - 1])\n        \n        return min_diff",
    "explanation": "The solution begins by defining a helper function `in_order_traversal` that performs an in-order traversal of the BST. This function appends the values of the nodes to a list called `values`. The in-order traversal ensures that the values are collected in sorted order due to the properties of BSTs.\n\nAfter collecting the values, we initialize a variable `min_diff` to infinity. We then iterate through the `values` list, calculating the difference between each pair of consecutive values. The minimum of these differences is updated in `min_diff`.\n\nFinally, the function returns `min_diff`, which represents the minimum absolute difference between the values of any two different nodes in the BST.\n\n**Time Complexity**: O(n), where n is the number of nodes in the tree, due to the in-order traversal.\n\n**Space Complexity**: O(n) for storing the values of the nodes in the list."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:01:22"
}