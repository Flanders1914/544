{
  "problem": {
    "id": "87",
    "frontend_id": "87",
    "title": "Scramble String",
    "description": "We can scramble a string s to get a string t using the following algorithm:\n\nIf the length of the string is 1, stop.\nIf the length of the string is > 1, do the following:\n\t\nSplit the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\nRandomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\nApply step 1 recursively on each of the two substrings x and y.\n\n\n\nGiven two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.\n \nExample 1:\n\nInput: s1 = \"great\", s2 = \"rgeat\"\nOutput: true\nExplanation: One possible scenario applied on s1 is:\n\"great\" --> \"gr/eat\" // divide at random index.\n\"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n\"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n\"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n\"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n\"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\nThe algorithm stops now, and the result string is \"rgeat\" which is s2.\nAs one possible scenario led s1 to be scrambled to s2, we return true.\n\nExample 2:\n\nInput: s1 = \"abcde\", s2 = \"caebd\"\nOutput: false\n\nExample 3:\n\nInput: s1 = \"a\", s2 = \"a\"\nOutput: true\n\n \nConstraints:\n\ns1.length == s2.length\n1 <= s1.length <= 30\ns1 and s2 consist of lowercase English letters.\n\n",
    "difficulty": "Hard",
    "examples": [
      "\"great\"",
      "\"rgeat\"",
      "\"abcde\"",
      "\"caebd\"",
      "\"a\"",
      "\"a\""
    ],
    "structured_test_cases": [
      {
        "input": {
          "s1": "\"great\"",
          "s2": "\"rgeat\""
        },
        "expected": "true"
      },
      {
        "input": {
          "s1": "\"abcde\"",
          "s2": "\"caebd\""
        },
        "expected": "false"
      }
    ],
    "python_starter": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        ",
    "hints": [],
    "meta_data": {
      "name": "isScramble",
      "params": [
        {
          "name": "s1",
          "type": "string"
        },
        {
          "name": "s2",
          "type": "string"
        }
      ],
      "return": {
        "type": "boolean"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        # Memoization dictionary\n        memo = {}\n        \n        def helper(s1, s2):\n            # If the strings are equal, they are scrambled versions\n            if s1 == s2:\n                return True\n            # If the sorted characters do not match, they cannot be scrambled\n            if sorted(s1) != sorted(s2):\n                return False\n            # Check if the result is already computed\n            if (s1, s2) in memo:\n                return memo[(s1, s2)]\n            \n            n = len(s1)\n            # Try all possible split points\n            for i in range(1, n):\n                # Check without swapping\n                if helper(s1[:i], s2[:i]) and helper(s1[i:], s2[i:]):\n                    memo[(s1, s2)] = True\n                    return True\n                # Check with swapping\n                if helper(s1[:i], s2[-i:]) and helper(s1[i:], s2[:-i]):\n                    memo[(s1, s2)] = True\n                    return True\n            \n            # If no valid scramble found, store the result as False\n            memo[(s1, s2)] = False\n            return False\n        \n        return helper(s1, s2)",
    "explanation": "The solution uses a recursive approach with memoization to efficiently determine if one string is a scrambled version of another. \n\n1. **Base Cases**:\n   - If `s1` is equal to `s2`, we return `True`.\n   - If the sorted characters of `s1` and `s2` do not match, we return `False`.\n\n2. **Recursive Exploration**:\n   - We iterate through all possible split points of the strings. For each split, we check two scenarios:\n     - The left parts match and the right parts match.\n     - The left part of `s1` matches the right part of `s2` and vice versa.\n\n3. **Memoization**:\n   - We store results of previously computed pairs of substrings in a dictionary `memo` to avoid redundant calculations, which optimizes the performance.\n\n**Time Complexity**: The time complexity is O(n^4) in the worst case due to the recursive calls and the checks for each split point, where n is the length of the strings.\n\n**Space Complexity**: The space complexity is O(n^2) due to the memoization storage for substring pairs.\n\nThis approach efficiently checks if one string can be transformed into another through the defined scrambling process."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: True\nTest case 2:\n[PASS] Test passed: False\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:33"
}