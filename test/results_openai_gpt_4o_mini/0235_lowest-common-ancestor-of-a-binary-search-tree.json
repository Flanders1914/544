{
  "problem": {
    "id": "235",
    "frontend_id": "235",
    "title": "Lowest Common Ancestor of a Binary Search Tree",
    "description": "Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”\n \nExample 1:\n\n\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\nOutput: 6\nExplanation: The LCA of nodes 2 and 8 is 6.\n\nExample 2:\n\n\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\nOutput: 2\nExplanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n\nExample 3:\n\nInput: root = [2,1], p = 2, q = 1\nOutput: 2\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [2, 105].\n-109 <= Node.val <= 109\nAll Node.val are unique.\np != q\np and q will exist in the BST.\n\n",
    "difficulty": "Medium",
    "examples": [
      "[6,2,8,0,4,7,9,null,null,3,5]",
      "2",
      "8",
      "[6,2,8,0,4,7,9,null,null,3,5]",
      "2",
      "4",
      "[2,1]",
      "2",
      "1"
    ],
    "structured_test_cases": [
      {
        "input": {
          "root": "[6,2,8,0,4,7,9,null,null,3,5]",
          "p": "2",
          "q": "8"
        },
        "expected": "6"
      },
      {
        "input": {
          "root": "[6,2,8,0,4,7,9,null,null,3,5]",
          "p": "2",
          "q": "4"
        },
        "expected": "2"
      },
      {
        "input": {
          "root": "[2,1]",
          "p": "2",
          "q": "1"
        },
        "expected": "2"
      }
    ],
    "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        ",
    "hints": [],
    "meta_data": {
      "name": "lowestCommonAncestor",
      "params": [
        {
          "name": "root",
          "type": "TreeNode"
        },
        {
          "name": "p",
          "type": "integer"
        },
        {
          "name": "q",
          "type": "integer"
        }
      ],
      "return": {
        "type": "TreeNode"
      },
      "manual": true
    }
  },
  "solution": {
    "code": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        # Start from the root node of the BST\n        while root:\n            # If both p and q are less than root, LCA lies in the left subtree\n            if p.val < root.val and q.val < root.val:\n                root = root.left\n            # If both p and q are greater than root, LCA lies in the right subtree\n            elif p.val > root.val and q.val > root.val:\n                root = root.right\n            # We have found the split point, i.e., the LCA\n            else:\n                return root",
    "explanation": "The provided solution implements the logic to find the lowest common ancestor in a binary search tree. The function `lowestCommonAncestor` takes three parameters: the root of the BST and the two nodes `p` and `q` for which we want to find the LCA.\n\n1. We start at the root of the tree and enter a loop that continues until we find the LCA.\n2. Inside the loop, we check the values of `p` and `q` against the current node's value:\n   - If both `p` and `q` are less than the current node's value, we move to the left child.\n   - If both are greater, we move to the right child.\n   - If one is on the left and the other is on the right, or if one of them is equal to the current node, we have found the LCA, and we return the current node.\n\nThe time complexity of this solution is O(h), where h is the height of the tree. In the case of a balanced tree, this is O(log n), while in the worst case of a skewed tree, it can be O(n). The space complexity is O(1) since we are using a constant amount of space for the pointers."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:44"
}