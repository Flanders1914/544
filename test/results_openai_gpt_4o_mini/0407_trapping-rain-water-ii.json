{
  "problem": {
    "id": "407",
    "frontend_id": "407",
    "title": "Trapping Rain Water II",
    "description": "Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.\n \nExample 1:\n\n\nInput: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\nOutput: 4\nExplanation: After the rain, water is trapped between the blocks.\nWe have two small ponds 1 and 3 units trapped.\nThe total volume of water trapped is 4.\n\nExample 2:\n\n\nInput: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\nOutput: 10\n\n \nConstraints:\n\nm == heightMap.length\nn == heightMap[i].length\n1 <= m, n <= 200\n0 <= heightMap[i][j] <= 2 * 104\n\n",
    "difficulty": "Hard",
    "examples": [
      "[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]",
      "[[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "heightMap": "[[1,4,3,1,3,2]"
        },
        "expected": "4"
      },
      {
        "input": {
          "heightMap": "[[3,3,3,3,3]"
        },
        "expected": "10"
      }
    ],
    "python_starter": "class Solution:\n    def trapRainWater(self, heightMap: List[List[int]]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "trapRainWater",
      "params": [
        {
          "name": "heightMap",
          "type": "integer[][]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "import heapq\nfrom typing import List\n\nclass Solution:\n    def trapRainWater(self, heightMap: List[List[int]]) -> int:\n        if not heightMap or not heightMap[0]:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        visited = [[False] * n for _ in range(m)]\n        min_heap = []\n        \n        # Add all the boundary cells to the min-heap\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m - 1 or j == 0 or j == n - 1:\n                    heapq.heappush(min_heap, (heightMap[i][j], i, j))\n                    visited[i][j] = True\n        \n        water_trapped = 0\n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        \n        while min_heap:\n            height, x, y = heapq.heappop(min_heap)\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                \n                if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:\n                    # If the neighbor is lower than the current height, we can trap water\n                    if heightMap[nx][ny] < height:\n                        water_trapped += height - heightMap[nx][ny]\n                    \n                    # Mark the neighbor as visited and push it to the heap with the new height\n                    visited[nx][ny] = True\n                    heapq.heappush(min_heap, (max(height, heightMap[nx][ny]), nx, ny))\n        \n        return water_trapped",
    "explanation": "The solution uses a priority queue (min-heap) to efficiently manage the heights of the boundary cells of the heightMap. The algorithm follows these steps:\n\n1. **Boundary Initialization**: All boundary cells are added to the min-heap, and a visited matrix is used to track which cells have been processed.\n\n2. **Heap Processing**: The algorithm processes cells in order of their height. For each cell, it checks its neighbors. If a neighbor is lower than the current cell, it calculates the trapped water and updates the neighbor's height to ensure it can serve as a valid boundary for future calculations.\n\n3. **Complexity Analysis**:\n   - **Time Complexity**: O(m * n * log(m * n)), where m is the number of rows and n is the number of columns. This is due to the heap operations for each cell.\n   - **Space Complexity**: O(m * n) for the visited matrix and the heap.\n\nThis approach ensures that we efficiently calculate the total volume of water trapped in the 2D elevation map."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpa6b_n55v.py\", line 74\n    input_0_0 = [[1,4,3,1,3,2]\n                 ^^^^^^^^^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n"
  },
  "timestamp": "2025-04-01 18:00:53"
}