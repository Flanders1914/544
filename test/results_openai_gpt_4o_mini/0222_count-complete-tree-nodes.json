{
  "problem": {
    "id": "222",
    "frontend_id": "222",
    "title": "Count Complete Tree Nodes",
    "description": "Given the root of a complete binary tree, return the number of the nodes in the tree.\nAccording to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\nDesign an algorithm that runs in less than O(n) time complexity.\n \nExample 1:\n\n\nInput: root = [1,2,3,4,5,6]\nOutput: 6\n\nExample 2:\n\nInput: root = []\nOutput: 0\n\nExample 3:\n\nInput: root = [1]\nOutput: 1\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 5 * 104].\n0 <= Node.val <= 5 * 104\nThe tree is guaranteed to be complete.\n\n",
    "difficulty": "Easy",
    "examples": [
      "[1,2,3,4,5,6]",
      "[]",
      "[1]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "root": "[1,2,3,4,5,6]"
        },
        "expected": "6"
      }
    ],
    "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def countNodes(self, root: Optional[TreeNode]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "countNodes",
      "params": [
        {
          "name": "root",
          "type": "TreeNode"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def countNodes(self, root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n        \n        # Function to calculate the height of the tree\n        def getHeight(node):\n            height = 0\n            while node:\n                height += 1\n                node = node.left\n            return height\n        \n        height = getHeight(root)\n        \n        if height == 0:\n            return 0\n        \n        # Binary search to find the number of nodes in the last level\n        def exists(index, height, node):\n            left, right = 0, (1 << height) - 1  # 2^height - 1\n            for _ in range(height):\n                mid = (left + right) // 2\n                if index <= mid:\n                    node = node.left\n                    right = mid\n                else:\n                    node = node.right\n                    left = mid + 1\n            return node is not None\n        \n        # Count nodes\n        left, right = 1, (1 << height) - 1  # 1 to 2^height - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if exists(mid, height - 1, root):\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return (1 << (height - 1)) - 1 + left  # Total nodes = full tree nodes + last level nodes",
    "explanation": "The solution begins by defining a helper function `getHeight` that calculates the height of the tree by traversing down the leftmost path. This height is crucial for determining the number of nodes.\n\nNext, we define another helper function `exists` that checks if a node exists at a given index in the last level of the tree. This function uses binary search to efficiently determine the presence of nodes.\n\nFinally, we perform a binary search on the range of possible indices for the last level nodes (from 1 to `2^height - 1`). For each index, we use the `exists` function to check if a node exists at that index. The loop continues until we find the total number of nodes, which is the sum of the nodes in a complete tree of height `height - 1` and the count of nodes in the last level.\n\nThe time complexity of this solution is `O(log^2 n)` due to the height calculation and the binary search for each index, while the space complexity is `O(1)` since we are using a constant amount of space for variables."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:43"
}