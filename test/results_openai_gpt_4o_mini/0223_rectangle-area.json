{
  "problem": {
    "id": "223",
    "frontend_id": "223",
    "title": "Rectangle Area",
    "description": "Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.\nThe first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).\nThe second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).\n \nExample 1:\n\n\nInput: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2\nOutput: 45\n\nExample 2:\n\nInput: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2\nOutput: 16\n\n \nConstraints:\n\n-104 <= ax1 <= ax2 <= 104\n-104 <= ay1 <= ay2 <= 104\n-104 <= bx1 <= bx2 <= 104\n-104 <= by1 <= by2 <= 104\n\n",
    "difficulty": "Medium",
    "examples": [
      "-3",
      "0",
      "3",
      "4",
      "0",
      "-1",
      "9",
      "2",
      "-2",
      "-2",
      "2",
      "2",
      "-2",
      "-2",
      "2",
      "2"
    ],
    "structured_test_cases": [
      {
        "input": {
          "ax1": "-3",
          "ay1": "0",
          "ax2": "3",
          "ay2": "4",
          "bx1": "0",
          "by1": "-1",
          "bx2": "9",
          "by2": "2"
        },
        "expected": "45"
      }
    ],
    "python_starter": "class Solution:\n    def computeArea(self, ax1: int, ay1: int, ax2: int, ay2: int, bx1: int, by1: int, bx2: int, by2: int) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "computeArea",
      "params": [
        {
          "name": "ax1",
          "type": "integer"
        },
        {
          "name": "ay1",
          "type": "integer"
        },
        {
          "name": "ax2",
          "type": "integer"
        },
        {
          "name": "ay2",
          "type": "integer"
        },
        {
          "name": "bx1",
          "type": "integer"
        },
        {
          "name": "by1",
          "type": "integer"
        },
        {
          "name": "bx2",
          "type": "integer"
        },
        {
          "name": "by2",
          "type": "integer"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def computeArea(self, ax1: int, ay1: int, ax2: int, ay2: int, bx1: int, by1: int, bx2: int, by2: int) -> int:\n        # Calculate the area of the first rectangle\n        area1 = (ax2 - ax1) * (ay2 - ay1)\n        \n        # Calculate the area of the second rectangle\n        area2 = (bx2 - bx1) * (by2 - by1)\n        \n        # Calculate the coordinates of the overlapping rectangle\n        overlap_x1 = max(ax1, bx1)\n        overlap_x2 = min(ax2, bx2)\n        overlap_y1 = max(ay1, by1)\n        overlap_y2 = min(ay2, by2)\n        \n        # Calculate the area of the overlapping rectangle\n        overlap_area = max(0, overlap_x2 - overlap_x1) * max(0, overlap_y2 - overlap_y1)\n        \n        # Total area covered by both rectangles\n        total_area = area1 + area2 - overlap_area\n        \n        return total_area",
    "explanation": "The solution involves calculating the areas of two rectangles and their overlapping area, if any. \n\n1. **Area Calculation**: The areas of the two rectangles are computed using the width and height derived from their coordinates. This is straightforward and runs in constant time O(1).\n\n2. **Overlap Calculation**: The overlap is determined by finding the maximum of the left edges and the minimum of the right edges for both rectangles. This also runs in constant time O(1).\n\n3. **Final Area Calculation**: The total area is computed by adding the two rectangle areas and subtracting the overlapping area. \n\nOverall, the time complexity of the solution is O(1) since all operations are constant time calculations. The space complexity is also O(1) as we are using a fixed amount of space for variables regardless of the input size.\n\nThus,"
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 45\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:43"
}