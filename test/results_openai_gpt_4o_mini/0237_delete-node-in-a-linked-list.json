{
  "problem": {
    "id": "237",
    "frontend_id": "237",
    "title": "Delete Node in a Linked List",
    "description": "There is a singly-linked list head and we want to delete a node node in it.\nYou are given the node to be deleted node. You will not be given access to the first node of head.\nAll the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list.\nDelete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:\n\nThe value of the given node should not exist in the linked list.\nThe number of nodes in the linked list should decrease by one.\nAll the values before node should be in the same order.\nAll the values after node should be in the same order.\n\nCustom testing:\n\nFor the input, you should provide the entire linked list head and the node to be given node. node should not be the last node of the list and should be an actual node in the list.\nWe will build the linked list and pass the node to your function.\nThe output will be the entire list after calling your function.\n\n \nExample 1:\n\n\nInput: head = [4,5,1,9], node = 5\nOutput: [4,1,9]\nExplanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.\n\nExample 2:\n\n\nInput: head = [4,5,1,9], node = 1\nOutput: [4,5,9]\nExplanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.\n\n \nConstraints:\n\nThe number of the nodes in the given list is in the range [2, 1000].\n-1000 <= Node.val <= 1000\nThe value of each node in the list is unique.\nThe node to be deleted is in the list and is not a tail node.\n\n",
    "difficulty": "Medium",
    "examples": [
      "[4,5,1,9]",
      "5",
      "[4,5,1,9]",
      "1"
    ],
    "structured_test_cases": [
      {
        "input": {
          "head": "[4,5,1,9]",
          "node": "5"
        },
        "expected": "[4,1,9]"
      },
      {
        "input": {
          "head": "[4,5,1,9]",
          "node": "1"
        },
        "expected": "[4,5,9]"
      }
    ],
    "python_starter": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def deleteNode(self, node):\n        \"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        \"\"\"\n        ",
    "hints": [],
    "meta_data": {
      "name": "deleteNode",
      "params": [
        {
          "name": "head",
          "type": "ListNode"
        },
        {
          "name": "node",
          "type": "integer"
        }
      ],
      "return": {
        "type": "void"
      },
      "output": {
        "paramindex": 0
      },
      "manual": true,
      "languages": [
        "cpp",
        "java",
        "python",
        "c",
        "csharp",
        "javascript",
        "ruby",
        "swift",
        "golang",
        "python3",
        "scala",
        "kotlin",
        "php",
        "typescript"
      ]
    }
  },
  "solution": {
    "code": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def deleteNode(self, node):\n        \"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        \"\"\"\n        # Copy the value of the next node to the current node\n        node.val = node.next.val\n        # Bypass the next node\n        node.next = node.next.next",
    "explanation": "The solution involves modifying the node that we want to delete by copying the value from the next node and then linking it to the node after the next one. This effectively removes the node from the linked list without needing to traverse the list or access the head.\n\n### Time Complexity\nThe time complexity of this solution is O(1) because we are performing a constant number of operations regardless of the size of the linked list.\n\n### Space Complexity\nThe space complexity is O(1) as we are not using any additional data structures that grow with the input size; we are only modifying the existing nodes in place.\n\nThis solution is efficient and meets the problem's constraints, ensuring that the linked list remains intact and correctly ordered after the deletion operation."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:45"
}