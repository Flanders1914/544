{
  "problem": {
    "id": "35",
    "frontend_id": "35",
    "title": "Search Insert Position",
    "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\nYou must write an algorithm with O(log n) runtime complexity.\n \nExample 1:\n\nInput: nums = [1,3,5,6], target = 5\nOutput: 2\n\nExample 2:\n\nInput: nums = [1,3,5,6], target = 2\nOutput: 1\n\nExample 3:\n\nInput: nums = [1,3,5,6], target = 7\nOutput: 4\n\n \nConstraints:\n\n1 <= nums.length <= 104\n-104 <= nums[i] <= 104\nnums contains distinct values sorted in ascending order.\n-104 <= target <= 104\n\n",
    "difficulty": "Easy",
    "examples": [
      "[1,3,5,6]",
      "5",
      "[1,3,5,6]",
      "2",
      "[1,3,5,6]",
      "7"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[1,3,5,6]",
          "target": "5"
        },
        "expected": "2"
      }
    ],
    "python_starter": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "searchInsert",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "name": "target",
          "type": "integer"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        left, right = 0, len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2  # Avoids potential overflow\n            \n            if nums[mid] == target:\n                return mid  # Target found\n            elif nums[mid] < target:\n                left = mid + 1  # Search in the right half\n            else:\n                right = mid - 1  # Search in the left half\n        \n        return left  # Target not found, return the insertion point",
    "explanation": "The provided solution implements a binary search algorithm to efficiently find the index of the target value in a sorted array. \n\n1. **Initialization**: We start by defining two pointers, `left` and `right`, which represent the current search boundaries within the array.\n\n2. **Binary Search Loop**: We enter a while loop that continues as long as `left` is less than or equal to `right`. Inside the loop:\n   - We calculate the middle index `mid`.\n   - If the element at `mid` is equal to the target, we return `mid`.\n   - If the element at `mid` is less than the target, we adjust the `left` pointer to `mid + 1`, effectively discarding the left half of the search space.\n   - If the element at `mid` is greater than the target, we adjust the `right` pointer to `mid - 1`, discarding the right half.\n\n3. **Insertion Point**: If the loop exits without finding the target, the `left` pointer will be at the position where the target should be inserted to maintain the sorted order. We return `left`.\n\n**Time Complexity**: The time complexity of this algorithm is O(log n) because we halve the search space with each iteration.\n\n**Space Complexity**: The space complexity is O(1) since we are using a constant amount of space for the pointers.\n\nThis solution is efficient and meets the problem's constraints effectively."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 2\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:28"
}