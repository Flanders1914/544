{
  "problem": {
    "id": "21",
    "frontend_id": "21",
    "title": "Merge Two Sorted Lists",
    "description": "You are given the heads of two sorted linked lists list1 and list2.\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\nReturn the head of the merged linked list.\n \nExample 1:\n\n\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n\nExample 2:\n\nInput: list1 = [], list2 = []\nOutput: []\n\nExample 3:\n\nInput: list1 = [], list2 = [0]\nOutput: [0]\n\n \nConstraints:\n\nThe number of nodes in both lists is in the range [0, 50].\n-100 <= Node.val <= 100\nBoth list1 and list2 are sorted in non-decreasing order.\n\n",
    "difficulty": "Easy",
    "examples": [
      "[1,2,4]",
      "[1,3,4]",
      "[]",
      "[]",
      "[]",
      "[0]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "list1": "[1,2,4]",
          "list2": "[1,3,4]"
        },
        "expected": "[1,1,2,3,4,4]"
      }
    ],
    "python_starter": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "mergeTwoLists",
      "params": [
        {
          "name": "list1",
          "type": "ListNode",
          "dealloc": false
        },
        {
          "name": "list2",
          "type": "ListNode",
          "dealloc": false
        }
      ],
      "return": {
        "type": "ListNode",
        "dealloc": true
      }
    }
  },
  "solution": {
    "code": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        # Create a dummy node to simplify the merging process\n        dummy = ListNode(0)\n        current = dummy\n        \n        # Traverse both lists\n        while list1 and list2:\n            if list1.val < list2.val:\n                current.next = list1  # Append list1 node\n                list1 = list1.next    # Move to the next node in list1\n            else:\n                current.next = list2  # Append list2 node\n                list2 = list2.next    # Move to the next node in list2\n            current = current.next    # Move the current pointer\n        \n        # If there are remaining nodes in either list, append them\n        if list1:\n            current.next = list1\n        elif list2:\n            current.next = list2\n        \n        # Return the merged list, which starts from the next of dummy node\n        return dummy.next",
    "explanation": "The solution uses a dummy node to facilitate the merging of the two sorted linked lists. The `current` pointer is used to build the new merged list. We compare the values of the nodes from both lists and append the smaller node to the merged list. This process continues until we exhaust one of the lists. If there are remaining nodes in either list, we directly append them to the merged list since they are already sorted.\n\n### Time Complexity\nThe time complexity of this solution is O(n + m), where n is the number of nodes in `list1` and m is the number of nodes in `list2`. This is because we traverse each list once.\n\n### Space Complexity\nThe space complexity is O(1) since we are only using a constant amount of extra space (the dummy node and a few pointers), regardless of the input size."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:27"
}