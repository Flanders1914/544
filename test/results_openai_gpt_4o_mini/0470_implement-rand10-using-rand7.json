{
  "problem": {
    "id": "903",
    "frontend_id": "470",
    "title": "Implement Rand10() Using Rand7()",
    "description": "Given the API rand7() that generates a uniform random integer in the range [1, 7], write a function rand10() that generates a uniform random integer in the range [1, 10]. You can only call the API rand7(), and you shouldn't call any other API. Please do not use a language's built-in random API.\nEach test case will have one internal argument n, the number of times that your implemented function rand10() will be called while testing. Note that this is not an argument passed to rand10().\n \nExample 1:\nInput: n = 1\nOutput: [2]\nExample 2:\nInput: n = 2\nOutput: [2,8]\nExample 3:\nInput: n = 3\nOutput: [3,8,10]\n\n \nConstraints:\n\n1 <= n <= 105\n\n \nFollow up:\n\nWhat is the expected value for the number of calls to rand7() function?\nCould you minimize the number of calls to rand7()?\n\n",
    "difficulty": "Medium",
    "examples": [
      "1",
      "2",
      "3"
    ],
    "structured_test_cases": [
      {
        "input": {
          "n": "1"
        },
        "expected": "[2]"
      }
    ],
    "python_starter": "# The rand7() API is already defined for you.\n# def rand7():\n# @return a random integer in the range 1 to 7\n\nclass Solution:\n    def rand10(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        ",
    "hints": [],
    "meta_data": {
      "name": "rand10",
      "params": [
        {
          "name": "n",
          "type": "integer"
        }
      ],
      "manual": true,
      "typescriptCustomType": "function rand7(): number {\n    return Math.floor(Math.random() * (7)) + 1;\n}"
    }
  },
  "solution": {
    "code": "import random\n\ndef rand7():\n    return random.randint(1, 7)\n\nclass Solution:\n    def rand10(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        while True:\n            # Generate a number in the range [1, 49]\n            num = (rand7() - 1) * 7 + rand7()  # This gives us a number from 1 to 49\n            if num <= 40:  # We only want numbers from 1 to 40\n                return (num - 1) % 10 + 1  # Map to [1, 10]",
    "explanation": "The solution uses the `rand7()` function to generate random numbers in a controlled manner to achieve the desired output of `rand10()`. \n\n1. **Generating a number from 1 to 49**: By calling `rand7()` twice, we create a number in the range [1, 49]. The formula `(a - 1) * 7 + b` effectively maps the two calls into a single number.\n\n2. **Filtering for uniformity**: We only accept numbers from 1 to 40. This is because 40 is the largest multiple of 10 that fits within our generated range of 49. By discarding numbers greater than 40, we ensure that each of the numbers from 1 to 40 can be evenly divided into 10 groups, allowing us to map them uniformly to the range [1, 10].\n\n3. **Expected number of calls to rand7()**: The expected number of calls to `rand7()` can be calculated based on the probability of generating a valid number. Since we discard numbers greater than 40, the probability of success is 40/49. Therefore, the expected number of calls to `rand7()` is approximately 49/40, which is about 1.225 calls on average.\n\n4. **Time and Space Complexity**: The time complexity is O(1) on average, as we expect to generate a valid number in a constant number of iterations. The space complexity is O(1) since we are using a fixed amount of space regardless of the input size.\n\nThis approach efficiently generates a random integer in the desired range while adhering to the constraints of the problem."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:58"
}