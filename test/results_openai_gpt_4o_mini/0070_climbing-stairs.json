{
  "problem": {
    "id": "70",
    "frontend_id": "70",
    "title": "Climbing Stairs",
    "description": "You are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n \nExample 1:\n\nInput: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n\nExample 2:\n\nInput: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n\n \nConstraints:\n\n1 <= n <= 45\n\n",
    "difficulty": "Easy",
    "examples": [
      "2",
      "3"
    ],
    "structured_test_cases": [
      {
        "input": {
          "n": "2"
        },
        "expected": "2"
      },
      {
        "input": {
          "n": "3"
        },
        "expected": "3"
      }
    ],
    "python_starter": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        ",
    "hints": [
      "To reach nth step, what could have been your previous steps? (Think about the step sizes)"
    ],
    "meta_data": {
      "name": "climbStairs",
      "params": [
        {
          "name": "n",
          "type": "integer"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        # Initialize the first two steps\n        first = 1  # ways to climb to step 1\n        second = 2  # ways to climb to step 2\n        \n        # Calculate ways for steps 3 to n\n        for i in range(3, n + 1):\n            current = first + second  # current ways is the sum of the last two\n            first = second  # move the window\n            second = current  # update the second to current\n        \n        return second  # second now holds the number of ways to climb n steps",
    "explanation": "The solution uses an iterative approach to calculate the number of distinct ways to climb to the top of the staircase. We maintain two variables, `first` and `second`, which represent the number of ways to reach the last two steps. \n\n1. **Base Cases**: We handle the cases for `n = 1` and `n = 2` directly.\n2. **Iteration**: For each step from 3 to n, we calculate the number of ways to reach that step by summing the ways to reach the two preceding steps. We then update our variables accordingly.\n3. **Return Value**: Finally, we return the value stored in `second`, which contains the number of ways to reach the nth step.\n\n**Time Complexity**: O(n) - We iterate through the steps from 3 to n once.\n\n**Space Complexity**: O(1) - We only use a constant amount of space for the variables, regardless of the input size.\n\nThis approach is efficient and works well within the given constraints."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 2\nTest case 2:\n[PASS] Test passed: 3\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:31"
}