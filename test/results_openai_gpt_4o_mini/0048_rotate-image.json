{
  "problem": {
    "id": "48",
    "frontend_id": "48",
    "title": "Rotate Image",
    "description": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n \nExample 1:\n\n\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n\nExample 2:\n\n\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n\n \nConstraints:\n\nn == matrix.length == matrix[i].length\n1 <= n <= 20\n-1000 <= matrix[i][j] <= 1000\n\n",
    "difficulty": "Medium",
    "examples": [
      "[[1,2,3],[4,5,6],[7,8,9]]",
      "[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "matrix": "[[1,2,3]"
        },
        "expected": "[[7,4,1]"
      }
    ],
    "python_starter": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        ",
    "hints": [],
    "meta_data": {
      "name": "rotate",
      "params": [
        {
          "name": "matrix",
          "type": "integer[][]"
        }
      ],
      "return": {
        "type": "void"
      },
      "output": {
        "paramindex": 0
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        n = len(matrix)\n        \n        # Step 1: Transpose the matrix\n        for i in range(n):\n            for j in range(i + 1, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # Step 2: Reverse each row\n        for i in range(n):\n            matrix[i].reverse()",
    "explanation": "The solution consists of two main operations: transposing the matrix and reversing each row.\n\n1. **Transposing the Matrix**: We iterate through the upper triangle of the matrix (excluding the diagonal) and swap elements `matrix[i][j]` with `matrix[j][i]`. This effectively flips the matrix over its diagonal.\n\n2. **Reversing Each Row**: After the transposition, each row of the matrix is reversed. This is done using the `reverse()` method, which modifies the list in place.\n\n### Time Complexity\n- The time complexity of this solution is O(n^2), where n is the number of rows (or columns) in the matrix. This is because we are iterating through all elements of the matrix twice (once for transposing and once for reversing).\n\n### Space Complexity\n- The space complexity is O(1) since we are modifying the matrix in place and not using any additional data structures that grow with the input size.\n\nThis method is efficient and meets the problem's constraints, allowing us to rotate the matrix without using extra space."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmp8xkgh4mk.py\", line 51\n    input_0_0 = [[1,2,3]\n                 ^^^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n"
  },
  "timestamp": "2025-04-01 18:00:29"
}