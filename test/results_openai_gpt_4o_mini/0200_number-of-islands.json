{
  "problem": {
    "id": "200",
    "frontend_id": "200",
    "title": "Number of Islands",
    "description": "Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n \nExample 1:\n\nInput: grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\nOutput: 1\n\nExample 2:\n\nInput: grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]\nOutput: 3\n\n \nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 300\ngrid[i][j] is '0' or '1'.\n\n",
    "difficulty": "Medium",
    "examples": [
      "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
      "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "grid": "[   [\"1\",\"1\",\"1\",\"1\",\"0\"]"
        },
        "expected": "1"
      }
    ],
    "python_starter": "class Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "numIslands",
      "params": [
        {
          "name": "grid",
          "type": "character[][]"
        }
      ],
      "return": {
        "type": "integer"
      },
      "manual": true
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        if not grid:\n            return 0\n        \n        rows, cols = len(grid), len(grid[0])\n        island_count = 0\n        \n        def dfs(r: int, c: int):\n            # Check for out of bounds and if the cell is water\n            if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == '0':\n                return\n            # Mark the land as visited\n            grid[r][c] = '0'\n            # Explore all four directions\n            dfs(r + 1, c)  # down\n            dfs(r - 1, c)  # up\n            dfs(r, c + 1)  # right\n            dfs(r, c - 1)  # left\n        \n        for r in range(rows):\n            for c in range(cols):\n                if grid[r][c] == '1':  # Found an island\n                    island_count += 1\n                    dfs(r, c)  # Mark the entire island\n        \n        return island_count",
    "explanation": "The solution uses a Depth-First Search (DFS) approach to explore the grid. Here's a breakdown of the solution:\n\n1. **Initialization**: We first check if the grid is empty. If it is, we return 0. We then determine the number of rows and columns in the grid and initialize a counter for the islands.\n\n2. **DFS Function**: The `dfs` function is defined to explore the grid recursively. It checks if the current cell is out of bounds or if it is water ('0'). If it is land ('1'), we mark it as visited by changing it to '0' and then recursively call `dfs` for all four adjacent cells (down, up, right, left).\n\n3. **Main Loop**: We iterate through each cell in the grid. When we find a '1', it indicates the start of a new island. We increment our island count and call the `dfs` function to mark the entire island.\n\n4. **Return Result**: After traversing the entire grid, we return the total count of islands.\n\n**Time Complexity**: The time complexity is O(m * n), where m is the number of rows and n is the number of columns in the grid. Each cell is visited once.\n\n**Space Complexity**: The space complexity is O(m * n) in the worst case due to the recursion stack in DFS, but it can be O(h) where h is the height of the recursion stack in the case of a balanced grid."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpe7q29odu.py\", line 65\n    input_0_0 = [   [\"1\",\"1\",\"1\",\"1\",\"0\"]\n                ^\nSyntaxError: '[' was never closed\n"
  },
  "timestamp": "2025-04-01 18:00:41"
}