{
  "problem": {
    "id": "119",
    "frontend_id": "119",
    "title": "Pascal's Triangle II",
    "description": "Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n\n \nExample 1:\nInput: rowIndex = 3\nOutput: [1,3,3,1]\nExample 2:\nInput: rowIndex = 0\nOutput: [1]\nExample 3:\nInput: rowIndex = 1\nOutput: [1,1]\n\n \nConstraints:\n\n0 <= rowIndex <= 33\n\n \nFollow up: Could you optimize your algorithm to use only O(rowIndex) extra space?\n",
    "difficulty": "Easy",
    "examples": [
      "3",
      "0",
      "1"
    ],
    "structured_test_cases": [
      {
        "input": {
          "rowIndex": "3"
        },
        "expected": "[1,3,3,1]"
      }
    ],
    "python_starter": "class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "getRow",
      "params": [
        {
          "name": "rowIndex",
          "type": "integer"
        }
      ],
      "return": {
        "type": "list<integer>"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        # Initialize the row with the first element\n        row = [1] * (rowIndex + 1)\n        \n        # Calculate the values for the row using the relationship\n        for k in range(1, rowIndex):\n            row[k] = row[k - 1] * (rowIndex - k + 1) // k\n        \n        return row",
    "explanation": "The solution constructs the row of Pascal's triangle iteratively. We start by initializing a list `row` of size `rowIndex + 1` filled with 1s, since the first and last elements of any row in Pascal's triangle are always 1.\n\nWe then iterate from 1 to `rowIndex - 1` to compute the intermediate values. For each index `k`, we update `row[k]` using the previously computed value `row[k - 1]` and the formula:\n\n\\[ row[k] = row[k - 1] \\times \\frac{rowIndex - k + 1}{k} \\]\n\nThis formula allows us to compute the current element based on the previous one without needing to calculate factorials, thus avoiding large intermediate values and improving efficiency.\n\nThe time complexity of this solution is O(rowIndex) because we perform a single loop that runs `rowIndex` times. The space complexity is also O(rowIndex) due to the storage of the result list.\n\nOverall, this approach is efficient and meets the problem's constraints effectively."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: [1, 3, 3, 1]\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:36"
}