{
  "problem": {
    "id": "412",
    "frontend_id": "412",
    "title": "Fizz Buzz",
    "description": "Given an integer n, return a string array answer (1-indexed) where:\n\nanswer[i] == \"FizzBuzz\" if i is divisible by 3 and 5.\nanswer[i] == \"Fizz\" if i is divisible by 3.\nanswer[i] == \"Buzz\" if i is divisible by 5.\nanswer[i] == i (as a string) if none of the above conditions are true.\n\n \nExample 1:\nInput: n = 3\nOutput: [\"1\",\"2\",\"Fizz\"]\nExample 2:\nInput: n = 5\nOutput: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]\nExample 3:\nInput: n = 15\nOutput: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]\n\n \nConstraints:\n\n1 <= n <= 104\n\n",
    "difficulty": "Easy",
    "examples": [
      "3",
      "5",
      "15"
    ],
    "structured_test_cases": [
      {
        "input": {
          "n": "3"
        },
        "expected": "[1,2,Fizz]"
      }
    ],
    "python_starter": "class Solution:\n    def fizzBuzz(self, n: int) -> List[str]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "fizzBuzz",
      "params": [
        {
          "name": "n",
          "type": "integer"
        }
      ],
      "return": {
        "type": "list<string>"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def fizzBuzz(self, n: int) -> List[str]:\n        # Initialize an empty list to store the results\n        result = []\n        \n        # Iterate through numbers from 1 to n\n        for i in range(1, n + 1):\n            # Check divisibility and append the appropriate string\n            if i % 3 == 0 and i % 5 == 0:\n                result.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                result.append(\"Fizz\")\n            elif i % 5 == 0:\n                result.append(\"Buzz\")\n            else:\n                result.append(str(i))  # Append the number as a string\n        \n        return result",
    "explanation": "The solution iterates through each integer from 1 to n, checking the divisibility conditions for each integer. The conditions are checked in the following order:\n1. First, we check if the number is divisible by both 3 and 5. If true, we append \"FizzBuzz\" to the result list.\n2. If the first condition is false, we check if the number is divisible by 3. If true, we append \"Fizz\".\n3. If the second condition is false, we check if the number is divisible by 5. If true, we append \"Buzz\".\n4. If none of the conditions are met, we convert the number to a string and append it to the result list.\n\nThis method ensures that we efficiently build the result list in a single pass through the numbers, maintaining a time complexity of O(n) and a space complexity of O(n) due to the storage of the result list. The constraints (1 <= n <= 10^4) ensure that this approach will run efficiently within the limits."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:54"
}