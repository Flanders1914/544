{
  "problem": {
    "id": "162",
    "frontend_id": "162",
    "title": "Find Peak Element",
    "description": "A peak element is an element that is strictly greater than its neighbors.\nGiven a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\nYou may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.\nYou must write an algorithm that runs in O(log n) time.\n \nExample 1:\n\nInput: nums = [1,2,3,1]\nOutput: 2\nExplanation: 3 is a peak element and your function should return the index number 2.\nExample 2:\n\nInput: nums = [1,2,1,3,5,6,4]\nOutput: 5\nExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\n \nConstraints:\n\n1 <= nums.length <= 1000\n-231 <= nums[i] <= 231 - 1\nnums[i] != nums[i + 1] for all valid i.\n\n",
    "difficulty": "Medium",
    "examples": [
      "[1,2,3,1]",
      "[1,2,1,3,5,6,4]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[1,2,3,1]"
        },
        "expected": "2"
      },
      {
        "input": {
          "nums": "[1,2,1,3,5,6,4]"
        },
        "expected": "5"
      }
    ],
    "python_starter": "class Solution:\n    def findPeakElement(self, nums: List[int]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "findPeakElement",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def findPeakElement(self, nums: List[int]) -> int:\n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            # Compare mid with its right neighbor\n            if nums[mid] < nums[mid + 1]:\n                # If mid is less than the right neighbor, peak must be on the right side\n                left = mid + 1\n            else:\n                # If mid is greater than or equal to the right neighbor, peak must be on the left side (including mid)\n                right = mid\n        \n        # When left == right, we have found a peak\n        return left",
    "explanation": "The solution uses a binary search algorithm to efficiently find a peak element in the array. The process is as follows:\n\n1. Initialize two pointers, `left` and `right`, to represent the current search range.\n2. While `left` is less than `right`, calculate the middle index `mid`.\n3. Compare the element at `mid` with its right neighbor (`mid + 1`):\n   - If `nums[mid] < nums[mid + 1]`, it indicates that there is a peak in the right half of the array, so we move the `left` pointer to `mid + 1`.\n   - Otherwise, we move the `right` pointer to `mid`, indicating that a peak could be at `mid` or in the left half.\n4. The loop continues until `left` equals `right`, at which point we have found a peak element, and we return the index `left`.\n\nThe time complexity of this solution is O(log n) due to the halving of the search space in each iteration. The space complexity is O(1) since we are using a constant amount of extra space for the pointers."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 2\nTest case 2:\n[PASS] Test passed: 5\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:39"
}