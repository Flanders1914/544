{
  "problem": {
    "id": "13",
    "frontend_id": "13",
    "title": "Roman to Integer",
    "description": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\nI can be placed before V (5) and X (10) to make 4 and 9. \nX can be placed before L (50) and C (100) to make 40 and 90. \nC can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer.\n \nExample 1:\n\nInput: s = \"III\"\nOutput: 3\nExplanation: III = 3.\n\nExample 2:\n\nInput: s = \"LVIII\"\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\n\nExample 3:\n\nInput: s = \"MCMXCIV\"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n\n \nConstraints:\n\n1 <= s.length <= 15\ns contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').\nIt is guaranteed that s is a valid roman numeral in the range [1, 3999].\n\n",
    "difficulty": "Easy",
    "examples": [
      "\"III\"",
      "\"LVIII\"",
      "\"MCMXCIV\""
    ],
    "structured_test_cases": [
      {
        "input": {
          "s": "\"III\""
        },
        "expected": "3"
      },
      {
        "input": {
          "s": "\"LVIII\""
        },
        "expected": "58"
      },
      {
        "input": {
          "s": "\"MCMXCIV\""
        },
        "expected": "1994"
      }
    ],
    "python_starter": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        ",
    "hints": [
      "Problem is simpler to solve by working the string from back to front and using a map."
    ],
    "meta_data": {
      "name": "romanToInt",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        # Mapping of Roman numerals to their integer values\n        roman_to_int = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        \n        total = 0\n        n = len(s)\n        \n        for i in range(n):\n            # If the current numeral is less than the next one, we subtract its value\n            if i < n - 1 and roman_to_int[s[i]] < roman_to_int[s[i + 1]]:\n                total -= roman_to_int[s[i]]\n            else:\n                total += roman_to_int[s[i]]\n        \n        return total",
    "explanation": "The solution uses a dictionary to map each Roman numeral to its corresponding integer value. We iterate through the string `s` character by character. For each character, we check if it is less than the next character (which indicates a subtraction case). If it is, we subtract its value from the total; otherwise, we add its value.\n\n### Time Complexity\nThe time complexity of this solution is O(n), where n is the length of the input string `s`. This is because we make a single pass through the string.\n\n### Space Complexity\nThe space complexity is O(1) since we are using a fixed-size dictionary to store the Roman numeral values, and the space used does not depend on the size of the input.\n\nThis approach efficiently converts a Roman numeral to an integer while handling all the necessary cases for subtraction and addition."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:26"
}