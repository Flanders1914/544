{
  "problem": {
    "id": "479",
    "frontend_id": "479",
    "title": "Largest Palindrome Product",
    "description": "Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. Since the answer can be very large, return it modulo 1337.\n \nExample 1:\n\nInput: n = 2\nOutput: 987\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987\n\nExample 2:\n\nInput: n = 1\nOutput: 9\n\n \nConstraints:\n\n1 <= n <= 8\n\n",
    "difficulty": "Hard",
    "examples": [
      "2",
      "1"
    ],
    "structured_test_cases": [
      {
        "input": {
          "n": "2"
        },
        "expected": "987"
      },
      {
        "input": {
          "n": "1"
        },
        "expected": "9"
      }
    ],
    "python_starter": "class Solution:\n    def largestPalindrome(self, n: int) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "largestPalindrome",
      "params": [
        {
          "name": "n",
          "type": "integer"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def largestPalindrome(self, n: int) -> int:\n        if n == 1:\n            return 9  # The largest palindrome product of two 1-digit numbers is 9 (3*3)\n        \n        # The largest n-digit number\n        upper_limit = 10**n - 1\n        # The smallest n-digit number\n        lower_limit = 10**(n - 1)\n        \n        # Start from the largest possible palindrome\n        for i in range(upper_limit, lower_limit - 1, -1):\n            # Create a palindrome from the number i\n            palindrome = int(str(i) + str(i)[::-1])  # e.g., 99 -> 9999\n            \n            # Check if this palindrome can be factored into two n-digit numbers\n            for j in range(upper_limit, lower_limit - 1, -1):\n                if j * j < palindrome:  # No need to check further if j^2 is less than palindrome\n                    break\n                if palindrome % j == 0:\n                    other_factor = palindrome // j\n                    if lower_limit <= other_factor <= upper_limit:\n                        return palindrome % 1337  # Return the result modulo 1337\n\n        return 0  # Fallback, should not reach here for valid n",
    "explanation": "The solution begins by handling the special case for \\(n = 1\\), where the largest palindrome product is simply 9. For larger values of \\(n\\), we calculate the upper and lower limits for n-digit integers.\n\nWe then generate palindromic numbers by iterating from the largest n-digit integer downwards. For each integer \\(i\\), we create a palindrome by concatenating \\(i\\) with its reverse. \n\nNext, we check if this palindrome can be expressed as a product of two n-digit integers. We do this by iterating through potential factors \\(j\\) from the upper limit downwards. If \\(j\\) is a factor of the palindrome, we compute the other factor and check if it lies within the n-digit range.\n\nThe first valid palindrome we find is returned modulo 1337. The time complexity of this approach is approximately \\(O(n^2)\\) in the worst case, as we may need to check multiple palindromes and their factors. The space complexity is \\(O(1)\\) since we are using a constant amount of space for variables.\n\nOverall, this method efficiently finds the largest palindromic product of two n-digit integers while adhering to the constraints provided."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 987\nTest case 2:\n[PASS] Test passed: 9\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:59"
}