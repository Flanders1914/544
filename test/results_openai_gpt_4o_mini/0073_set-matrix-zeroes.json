{
  "problem": {
    "id": "73",
    "frontend_id": "73",
    "title": "Set Matrix Zeroes",
    "description": "Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\nYou must do it in place.\n \nExample 1:\n\n\nInput: matrix = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[1,0,1],[0,0,0],[1,0,1]]\n\nExample 2:\n\n\nInput: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\nOutput: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n\n \nConstraints:\n\nm == matrix.length\nn == matrix[0].length\n1 <= m, n <= 200\n-231 <= matrix[i][j] <= 231 - 1\n\n \nFollow up:\n\nA straightforward solution using O(mn) space is probably a bad idea.\nA simple improvement uses O(m + n) space, but still not the best solution.\nCould you devise a constant space solution?\n\n",
    "difficulty": "Medium",
    "examples": [
      "[[1,1,1],[1,0,1],[1,1,1]]",
      "[[0,1,2,0],[3,4,5,2],[1,3,1,5]]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "matrix": "[[1,1,1]"
        },
        "expected": "[[1,0,1]"
      }
    ],
    "python_starter": "class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        ",
    "hints": [
      "If any cell of the matrix has a zero we can record its row and column number using additional memory.\r\nBut if you don't want to use extra memory then you can manipulate the array instead. i.e. simulating exactly what the question says.",
      "Setting cell values to zero on the fly while iterating might lead to discrepancies. What if you use some other integer value as your marker?\r\nThere is still a better approach for this problem with 0(1) space.",
      "We could have used 2 sets to keep a record of rows/columns which need to be set to zero. But for an O(1) space solution, you can use one of the rows and and one of the columns to keep track of this information.",
      "We can use the first cell of every row and column as a flag. This flag would determine whether a row or column has been set to zero."
    ],
    "meta_data": {
      "name": "setZeroes",
      "params": [
        {
          "name": "matrix",
          "type": "integer[][]"
        }
      ],
      "return": {
        "type": "void"
      },
      "output": {
        "paramindex": 0
      },
      "manual": false
    }
  },
  "solution": {
    "code": "class Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        if not matrix or not matrix[0]:\n            return\n        \n        rows, cols = len(matrix), len(matrix[0])\n        row_zero = False  # To track if the first row needs to be zeroed\n        col_zero = False  # To track if the first column needs to be zeroed\n\n        # First pass: mark zeros in the first row and first column\n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == 0:\n                    if i == 0:\n                        row_zero = True\n                    if j == 0:\n                        col_zero = True\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n\n        # Second pass: use the markers to set zeros\n        for i in range(1, rows):\n            for j in range(1, cols):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n\n        # Finally, set the first row and first column to zero if needed\n        if row_zero:\n            for j in range(cols):\n                matrix[0][j] = 0\n        if col_zero:\n            for i in range(rows):\n                matrix[i][0] = 0",
    "explanation": "The solution works in two main passes over the matrix:\n\n1. **Marking Phase**: We iterate through the entire matrix to find any zeroes. If we find a zero, we mark the corresponding row and column by setting the first element of that row and the first element of that column to zero. We also keep track of whether the first row and first column themselves need to be zeroed out.\n\n2. **Setting Zeroes Phase**: In the second pass, we start from the second row and second column (to avoid overwriting our markers) and set the elements to zero if their corresponding row or column marker (in the first row or first column) is zero.\n\nFinally, we check if the first row or first column needs to be zeroed based on our earlier flags and set them accordingly.\n\n**Time Complexity**: O(m * n), where m is the number of rows and n is the number of columns, since we traverse the matrix a couple of times.\n\n**Space Complexity**: O(1), as we are using the input matrix itself for marking and not using any additional data structures.\n\nThis approach efficiently modifies the matrix in place while adhering to the constraints provided."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpv7fag3jl.py\", line 72\n    input_0_0 = [[1,1,1]\n                 ^^^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n"
  },
  "timestamp": "2025-04-01 18:00:31"
}