{
  "problem": {
    "id": "312",
    "frontend_id": "312",
    "title": "Burst Balloons",
    "description": "You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.\nIf you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.\nReturn the maximum coins you can collect by bursting the balloons wisely.\n \nExample 1:\n\nInput: nums = [3,1,5,8]\nOutput: 167\nExplanation:\nnums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167\nExample 2:\n\nInput: nums = [1,5]\nOutput: 10\n\n \nConstraints:\n\nn == nums.length\n1 <= n <= 300\n0 <= nums[i] <= 100\n\n",
    "difficulty": "Hard",
    "examples": [
      "[3,1,5,8]",
      "[1,5]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[3,1,5,8]"
        },
        "expected": "167"
      },
      {
        "input": {
          "nums": "[1,5]"
        },
        "expected": "10"
      }
    ],
    "python_starter": "class Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "maxCoins",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n        # Add 1 to both ends of the nums array to handle edge cases\n        nums = [1] + nums + [1]\n        n = len(nums)\n        \n        # Create a DP table\n        dp = [[0] * n for _ in range(n)]\n        \n        # Iterate over the length of the subarray\n        for length in range(2, n):  # length of the subarray\n            for left in range(n - length):  # left boundary\n                right = left + length  # right boundary\n                # Try bursting each balloon in the range [left, right]\n                for i in range(left + 1, right):  # i is the last balloon to burst\n                    # Calculate coins collected by bursting balloon i last\n                    coins = nums[left] * nums[i] * nums[right]\n                    # Add the maximum coins from the left and right subarrays\n                    coins += dp[left][i] + dp[i][right]\n                    # Update the DP table with the maximum coins\n                    dp[left][right] = max(dp[left][right], coins)\n        \n        # The result is the maximum coins we can collect from bursting all balloons\n        return dp[0][n - 1]",
    "explanation": "The solution uses dynamic programming to find the maximum coins that can be collected by bursting balloons in an optimal order. We first modify the input array `nums` by adding a 1 at both ends, which allows us to handle edge cases where the first or last balloon is burst.\n\nWe then initialize a 2D DP table `dp` where `dp[left][right]` will store the maximum coins that can be collected by bursting all balloons between indices `left` and `right`. We iterate over all possible lengths of subarrays and for each subarray, we consider each balloon as the last one to burst. The coins collected from bursting that balloon are calculated based on the values of the adjacent balloons (which are now guaranteed to be 1 due to our modification).\n\nThe time complexity of the solution is O(n^3) because we have three nested loops: one for the length of the subarray, one for the left boundary, and one for the last balloon to burst. The space complexity is O(n^2) due to the DP table used to store intermediate results.\n\nThis approach ensures that we explore all possible ways to burst the balloons and find the optimal solution efficiently within the given constraints."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 167\nTest case 2:\n[PASS] Test passed: 10\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:48"
}