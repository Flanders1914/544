{
  "problem": {
    "id": "150",
    "frontend_id": "150",
    "title": "Evaluate Reverse Polish Notation",
    "description": "You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.\nEvaluate the expression. Return an integer that represents the value of the expression.\nNote that:\n\nThe valid operators are '+', '-', '*', and '/'.\nEach operand may be an integer or another expression.\nThe division between two integers always truncates toward zero.\nThere will not be any division by zero.\nThe input represents a valid arithmetic expression in a reverse polish notation.\nThe answer and all the intermediate calculations can be represented in a 32-bit integer.\n\n \nExample 1:\n\nInput: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\nOutput: 9\nExplanation: ((2 + 1) * 3) = 9\n\nExample 2:\n\nInput: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\nOutput: 6\nExplanation: (4 + (13 / 5)) = 6\n\nExample 3:\n\nInput: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\nOutput: 22\nExplanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n\n \nConstraints:\n\n1 <= tokens.length <= 104\ntokens[i] is either an operator: \"+\", \"-\", \"*\", or \"/\", or an integer in the range [-200, 200].\n\n",
    "difficulty": "Medium",
    "examples": [
      "[\"2\",\"1\",\"+\",\"3\",\"*\"]",
      "[\"4\",\"13\",\"5\",\"/\",\"+\"]",
      "[\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "tokens": "[\"2\",\"1\",\"+\",\"3\",\"*\"]"
        },
        "expected": "9"
      },
      {
        "input": {
          "tokens": "[\"4\",\"13\",\"5\",\"/\",\"+\"]"
        },
        "expected": "6"
      },
      {
        "input": {
          "tokens": "[\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]"
        },
        "expected": "22"
      }
    ],
    "python_starter": "class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "evalRPN",
      "params": [
        {
          "name": "tokens",
          "type": "string[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        stack = []\n        \n        for token in tokens:\n            if token in \"+-*/\":\n                # Pop the top two elements from the stack\n                b = stack.pop()\n                a = stack.pop()\n                \n                # Perform the operation based on the token\n                if token == '+':\n                    result = a + b\n                elif token == '-':\n                    result = a - b\n                elif token == '*':\n                    result = a * b\n                elif token == '/':\n                    # Perform integer division that truncates towards zero\n                    result = int(a / b)  # Using int() to truncate towards zero\n                \n                # Push the result back onto the stack\n                stack.append(result)\n            else:\n                # If the token is a number, convert it to int and push onto the stack\n                stack.append(int(token))\n        \n        # The final result will be the only element left in the stack\n        return stack[0]",
    "explanation": "The solution uses a stack to evaluate the expression in Reverse Polish Notation. Here's a step-by-step breakdown of the approach:\n\n1. **Initialization**: We start by creating an empty stack to hold the operands.\n\n2. **Iterate through tokens**: For each token in the input list:\n   - If the token is an operator (`+`, `-`, `*`, `/`), we pop the top two elements from the stack. The first pop gives us the second operand (b), and the second pop gives us the first operand (a).\n   - We then perform the operation based on the operator:\n     - For addition, we compute `a + b`.\n     - For subtraction, we compute `a - b`.\n     - For multiplication, we compute `a * b`.\n     - For division, we compute `int(a / b)` to ensure truncation towards zero.\n   - The result of the operation is pushed back onto the stack.\n\n3. **Handling numbers**: If the token is a number, we convert it to an integer and push it onto the stack.\n\n4. **Final result**: After processing all tokens, the final result of the expression will be the only element left in the stack, which we return.\n\n**Time Complexity**: O(n), where n is the number of tokens. We process each token exactly once.\n\n**Space Complexity**: O(n) in the worst case, where all tokens are numbers and stored in the stack.\n\nThis solution efficiently evaluates the RPN expression while adhering to the constraints provided."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 9\nTest case 2:\n[PASS] Test passed: 6\nTest case 3:\n[PASS] Test passed: 22\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:39"
}