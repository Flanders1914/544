{
  "problem": {
    "id": "306",
    "frontend_id": "306",
    "title": "Additive Number",
    "description": "An additive number is a string whose digits can form an additive sequence.\nA valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.\nGiven a string containing only digits, return true if it is an additive number or false otherwise.\nNote: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.\n \nExample 1:\n\nInput: \"112358\"\nOutput: true\nExplanation: \nThe digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n\nExample 2:\n\nInput: \"199100199\"\nOutput: true\nExplanation: \nThe additive sequence is: 1, 99, 100, 199. \n1 + 99 = 100, 99 + 100 = 199\n\n \nConstraints:\n\n1 <= num.length <= 35\nnum consists only of digits.\n\n \nFollow up: How would you handle overflow for very large input integers?\n",
    "difficulty": "Medium",
    "examples": [
      "\"112358\"",
      "\"199100199\""
    ],
    "structured_test_cases": [
      {
        "input": {
          "param0": "\"112358\""
        },
        "expected": "true"
      },
      {
        "input": {
          "param0": "\"199100199\""
        },
        "expected": "true"
      }
    ],
    "python_starter": "class Solution:\n    def isAdditiveNumber(self, num: str) -> bool:\n        ",
    "hints": [],
    "meta_data": {
      "name": "isAdditiveNumber",
      "params": [
        {
          "name": "num",
          "type": "string"
        }
      ],
      "return": {
        "type": "boolean"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def isAdditiveNumber(self, num: str) -> bool:\n        n = len(num)\n        \n        # Function to check if the sequence is valid\n        def is_valid_sequence(first: str, second: str, start_index: int) -> bool:\n            # Generate the next number in the sequence\n            while start_index < n:\n                # Calculate the next number\n                next_num = str(int(first) + int(second))\n                # Check if the next number matches the substring in num\n                if not num.startswith(next_num, start_index):\n                    return False\n                # Move the start index forward\n                start_index += len(next_num)\n                # Update first and second for the next iteration\n                first, second = second, next_num\n            \n            return start_index == n\n        \n        # Try every possible pair of first and second numbers\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                # Get the first and second numbers\n                first = num[:i]\n                second = num[i:j]\n                \n                # Check for leading zeros\n                if (len(first) > 1 and first[0] == '0') or (len(second) > 1 and second[0] == '0'):\n                    continue\n                \n                # Check if the sequence is valid\n                if is_valid_sequence(first, second, j):\n                    return True\n        \n        return False",
    "explanation": "The solution involves a nested loop to explore all possible pairs of starting numbers in the string. The outer loop iterates through possible lengths for the first number, while the inner loop iterates through possible lengths for the second number. \n\n1. **Leading Zeros Check**: Before checking the sequence, we ensure that neither of the first two numbers has leading zeros unless they are \"0\".\n2. **Sequence Validation**: The `is_valid_sequence` function generates the next number in the sequence by summing the two previous numbers and checks if it matches the substring of the input string starting from the current index. If it matches, we continue; if not, we return false.\n3. **Termination**: If we successfully parse the entire string into a valid sequence, we return true. If all pairs are exhausted without finding a valid sequence, we return false.\n\n**Time Complexity**: The time complexity is O(n^3) in the worst case, where n is the length of the input string. This is due to the nested loops and the string operations involved in checking the sequence.\n\n**Space Complexity**: The space complexity is O(1) since we are using a constant amount of space for variables and not utilizing any additional data structures that grow with input size."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:47"
}