{
  "problem": {
    "id": "263",
    "frontend_id": "263",
    "title": "Ugly Number",
    "description": "An ugly number is a positive integer which does not have a prime factor other than 2, 3, and 5.\nGiven an integer n, return true if n is an ugly number.\n \nExample 1:\n\nInput: n = 6\nOutput: true\nExplanation: 6 = 2 × 3\n\nExample 2:\n\nInput: n = 1\nOutput: true\nExplanation: 1 has no prime factors.\n\nExample 3:\n\nInput: n = 14\nOutput: false\nExplanation: 14 is not ugly since it includes the prime factor 7.\n\n \nConstraints:\n\n-231 <= n <= 231 - 1\n\n",
    "difficulty": "Easy",
    "examples": [
      "6",
      "1",
      "14"
    ],
    "structured_test_cases": [
      {
        "input": {
          "n": "6"
        },
        "expected": "true"
      },
      {
        "input": {
          "n": "1"
        },
        "expected": "true"
      },
      {
        "input": {
          "n": "14"
        },
        "expected": "false"
      }
    ],
    "python_starter": "class Solution:\n    def isUgly(self, n: int) -> bool:\n        ",
    "hints": [],
    "meta_data": {
      "name": "isUgly",
      "params": [
        {
          "name": "n",
          "type": "integer"
        }
      ],
      "return": {
        "type": "boolean"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def isUgly(self, n: int) -> bool:\n        # Check if n is less than or equal to 0\n        if n <= 0:\n            return False\n        \n        # Divide n by 2, 3, and 5 as long as possible\n        for prime in [2, 3, 5]:\n            while n % prime == 0:\n                n //= prime\n        \n        # If n is reduced to 1, it is an ugly number\n        return n == 1",
    "explanation": "The solution checks if a given integer `n` is an ugly number by following these steps:\n\n1. **Input Validation**: The function first checks if `n` is less than or equal to 0. If it is, the function returns `False` since ugly numbers are defined as positive integers.\n\n2. **Dividing by Prime Factors**: The function then iterates over the list of prime factors `[2, 3, 5]`. For each prime factor, it uses a while loop to divide `n` by that factor as long as `n` is divisible by it. This effectively removes all occurrences of that prime factor from `n`.\n\n3. **Final Check**: After attempting to divide by all three prime factors, if `n` has been reduced to 1, it means that the original number was composed solely of the prime factors 2, 3, and 5, and thus it is an ugly number. If `n` is not 1, it means there were other prime factors involved, and the function returns `False`.\n\n**Time Complexity**: The time complexity of this solution is O(log n) because the number of divisions performed is proportional to the logarithm of `n` with respect to the prime factors.\n\n**Space Complexity**: The space complexity is O(1) since we are using a constant amount of space regardless of the input size.\n\nOverall, this solution is efficient and straightforward, effectively determining if a number is ugly based on its prime factorization."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: True\nTest case 2:\n[PASS] Test passed: True\nTest case 3:\n[PASS] Test passed: False\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:45"
}