{
  "problem": {
    "id": "226",
    "frontend_id": "226",
    "title": "Invert Binary Tree",
    "description": "Given the root of a binary tree, invert the tree, and return its root.\n \nExample 1:\n\n\nInput: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]\n\nExample 2:\n\n\nInput: root = [2,1,3]\nOutput: [2,3,1]\n\nExample 3:\n\nInput: root = []\nOutput: []\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\n\n",
    "difficulty": "Easy",
    "examples": [
      "[4,2,7,1,3,6,9]",
      "[2,1,3]",
      "[]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "root": "[4,2,7,1,3,6,9]"
        },
        "expected": "[4,7,2,9,6,3,1]"
      }
    ],
    "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "invertTree",
      "params": [
        {
          "name": "root",
          "type": "TreeNode"
        }
      ],
      "return": {
        "type": "TreeNode"
      }
    }
  },
  "solution": {
    "code": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        # Base case: if the current node is None, return None\n        if root is None:\n            return None\n        \n        # Recursively invert the left and right subtrees\n        left_inverted = self.invertTree(root.left)\n        right_inverted = self.invertTree(root.right)\n        \n        # Swap the left and right children\n        root.left, root.right = right_inverted, left_inverted\n        \n        return root",
    "explanation": "The `invertTree` function takes the root of a binary tree as input and returns the root of the inverted tree. The function works as follows:\n\n1. **Base Case**: If the `root` is `None`, we return `None`. This handles the case of an empty tree.\n2. **Recursive Calls**: We recursively call `invertTree` on the left and right children of the current node. This will continue until we reach the leaf nodes.\n3. **Swapping**: After inverting the left and right subtrees, we swap the left and right children of the current node.\n4. **Return**: Finally, we return the current node, which now represents the root of the inverted subtree.\n\nThe time complexity of this solution is O(n) because we visit each node exactly once. The space complexity is O(h), where h is the height of the tree, due to the recursion stack. In the worst case (a completely unbalanced tree), the height could be n, leading to O(n) space complexity, but in a balanced tree, it would be O(log n)."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:43"
}