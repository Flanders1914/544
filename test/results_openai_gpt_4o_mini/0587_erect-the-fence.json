{
  "problem": {
    "id": "587",
    "frontend_id": "587",
    "title": "Erect the Fence",
    "description": "You are given an array trees where trees[i] = [xi, yi] represents the location of a tree in the garden.\nFence the entire garden using the minimum length of rope, as it is expensive. The garden is well-fenced only if all the trees are enclosed.\nReturn the coordinates of trees that are exactly located on the fence perimeter. You may return the answer in any order.\n \nExample 1:\n\n\nInput: trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\nOutput: [[1,1],[2,0],[4,2],[3,3],[2,4]]\nExplanation: All the trees will be on the perimeter of the fence except the tree at [2, 2], which will be inside the fence.\n\nExample 2:\n\n\nInput: trees = [[1,2],[2,2],[4,2]]\nOutput: [[4,2],[2,2],[1,2]]\nExplanation: The fence forms a line that passes through all the trees.\n\n \nConstraints:\n\n1 <= trees.length <= 3000\ntrees[i].length == 2\n0 <= xi, yi <= 100\nAll the given positions are unique.\n\n",
    "difficulty": "Hard",
    "examples": [
      "[[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]",
      "[[1,2],[2,2],[4,2]]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "trees": "[[1,1]"
        },
        "expected": "[[1,1]"
      },
      {
        "input": {
          "trees": "[[1,2]"
        },
        "expected": "[[4,2]"
      }
    ],
    "python_starter": "class Solution:\n    def outerTrees(self, trees: List[List[int]]) -> List[List[int]]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "outerTrees",
      "params": [
        {
          "name": "trees",
          "type": "integer[][]"
        }
      ],
      "return": {
        "type": "integer[][]"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def outerTrees(self, trees: List[List[int]]) -> List[List[int]]:\n        # Sort the points\n        trees = sorted(trees)\n\n        # Function to determine the orientation of the triplet (p, q, r)\n        # Returns a positive value if counter-clockwise, negative if clockwise, and zero if collinear\n        def orientation(p, q, r):\n            return (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n\n        # Build the lower hull\n        lower = []\n        for p in trees:\n            while len(lower) >= 2 and orientation(lower[-2], lower[-1], p) < 0:\n                lower.pop()\n            lower.append(p)\n\n        # Build the upper hull\n        upper = []\n        for p in reversed(trees):\n            while len(upper) >= 2 and orientation(upper[-2], upper[-1], p) < 0:\n                upper.pop()\n            upper.append(p)\n\n        # Remove the last point of each half because it is repeated at the beginning of the other half\n        return list(set(lower + upper))",
    "explanation": "The provided solution uses the Andrew's monotone chain algorithm to compute the Convex Hull of the given points (trees). \n\n1. **Sorting**: The trees are first sorted based on their x-coordinates, and in case of ties, by their y-coordinates. This sorting step takes O(n log n) time.\n\n2. **Orientation Function**: The `orientation` function determines the relative orientation of three points. It helps in deciding whether to include a point in the hull or not based on the cross product.\n\n3. **Building the Hulls**: \n   - The lower hull is constructed by iterating through the sorted points and maintaining a list of points that form the hull. If adding a new point would create a clockwise turn (indicating that the last two points in the hull and the new point do not form a convex shape), the last point is removed.\n   - The upper hull is constructed similarly but iterates through the points in reverse order.\n\n4. **Combining Hulls**: Finally, the unique points from both the lower and upper hulls are combined to form the final list of points that are on the perimeter of the fence.\n\n**Time Complexity**: The overall time complexity is O(n log n) due to the sorting step, while the hull construction takes O(n).\n\n**Space Complexity**: The space complexity is O(n) for storing the points in the hulls.\n\nThis solution efficiently finds the points that need to be included in the fence, ensuring that all trees are enclosed with the minimum length of rope."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpwbwm4nte.py\", line 64\n    input_0_0 = [[1,1]\n                 ^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n"
  },
  "timestamp": "2025-04-01 18:01:27"
}