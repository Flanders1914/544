{
  "problem": {
    "id": "413",
    "frontend_id": "413",
    "title": "Arithmetic Slices",
    "description": "An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\n\nFor example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.\n\nGiven an integer array nums, return the number of arithmetic subarrays of nums.\nA subarray is a contiguous subsequence of the array.\n \nExample 1:\n\nInput: nums = [1,2,3,4]\nOutput: 3\nExplanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.\n\nExample 2:\n\nInput: nums = [1]\nOutput: 0\n\n \nConstraints:\n\n1 <= nums.length <= 5000\n-1000 <= nums[i] <= 1000\n\n",
    "difficulty": "Medium",
    "examples": [
      "[1,2,3,4]",
      "[1]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[1,2,3,4]"
        },
        "expected": "3"
      },
      {
        "input": {
          "nums": "[1]"
        },
        "expected": "0"
      }
    ],
    "python_starter": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "numberOfArithmeticSlices",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        count = 0  # Total number of arithmetic slices\n        current = 0  # Length of the current arithmetic slice\n        \n        # Start from the third element and check for arithmetic slices\n        for i in range(2, len(nums)):\n            # Check if the current triplet forms an arithmetic sequence\n            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]:\n                current += 1  # Extend the current arithmetic slice\n                count += current  # Add the number of new slices formed\n            else:\n                current = 0  # Reset current if not an arithmetic sequence\n        \n        return count",
    "explanation": "The solution uses a single pass through the input array to count the number of arithmetic slices. We start from the third element (index 2) and check if the current element, the previous element, and the one before that form an arithmetic sequence. If they do, we increment the `current` variable, which keeps track of how many new arithmetic slices can be formed by extending the previous slices. Each time we find a valid triplet, we add the value of `current` to `count`, which accumulates the total number of arithmetic slices.\n\nThe time complexity of this solution is O(n) because we only make a single pass through the array, where n is the length of the input array. The space complexity is O(1) since we are using a fixed amount of extra space regardless of the input size.\n\nIn summary, this approach efficiently counts the number of arithmetic slices by leveraging the properties of arithmetic sequences and maintaining a running count of valid slices."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 3\nTest case 2:\n[PASS] Test passed: 0\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:54"
}