{
  "problem": {
    "id": "4",
    "frontend_id": "4",
    "title": "Median of Two Sorted Arrays",
    "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time complexity should be O(log (m+n)).\n \nExample 1:\n\nInput: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\n\nExample 2:\n\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n\n \nConstraints:\n\nnums1.length == m\nnums2.length == n\n0 <= m <= 1000\n0 <= n <= 1000\n1 <= m + n <= 2000\n-106 <= nums1[i], nums2[i] <= 106\n\n",
    "difficulty": "Hard",
    "examples": [
      "[1,3]",
      "[2]",
      "[1,2]",
      "[3,4]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums1": "[1,3]",
          "nums2": "[2]"
        },
        "expected": "2.00000"
      },
      {
        "input": {
          "nums1": "[1,2]",
          "nums2": "[3,4]"
        },
        "expected": "2.50000"
      }
    ],
    "python_starter": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        ",
    "hints": [],
    "meta_data": {
      "name": "findMedianSortedArrays",
      "params": [
        {
          "name": "nums1",
          "type": "integer[]"
        },
        {
          "name": "nums2",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "double"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        # Ensure nums1 is the smaller array\n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        \n        x, y = len(nums1), len(nums2)\n        low, high = 0, x\n        \n        while low <= high:\n            partitionX = (low + high) // 2\n            partitionY = (x + y + 1) // 2 - partitionX\n            \n            # If partitionX is 0 it means nothing is there on left side. Use -inf for maxLeftX\n            # If partitionX is length of input then there is nothing on right side. Use +inf for minRightX\n            maxLeftX = float('-inf') if partitionX == 0 else nums1[partitionX - 1]\n            minRightX = float('inf') if partitionX == x else nums1[partitionX]\n            \n            maxLeftY = float('-inf') if partitionY == 0 else nums2[partitionY - 1]\n            minRightY = float('inf') if partitionY == y else nums2[partitionY]\n            \n            if maxLeftX <= minRightY and maxLeftY <= minRightX:\n                # We have partitioned array at correct place\n                if (x + y) % 2 == 0:\n                    return (max(maxLeftX, maxLeftY) + min(minRightX, minRightY)) / 2\n                else:\n                    return max(maxLeftX, maxLeftY)\n            elif maxLeftX > minRightY:\n                # We are too far on right side for partitionX. Go on left side.\n                high = partitionX - 1\n            else:\n                # We are too far on left side for partitionX. Go on right side.\n                low = partitionX + 1",
    "explanation": "The solution uses a binary search approach to find the median of two sorted arrays. The key steps are as follows:\n\n1. **Input Handling**: We first ensure that `nums1` is the smaller of the two arrays to minimize the search space.\n2. **Binary Search**: We perform a binary search on the smaller array (`nums1`). The search space is defined by `low` and `high`, which represent the current bounds of our search.\n3. **Partitioning**: For each iteration, we calculate the partition indices for both arrays. The left and right partitions are defined based on these indices.\n4. **Condition Checking**: We check if the maximum of the left partitions is less than or equal to the minimum of the right partitions. If this condition is satisfied, we have found the correct partitions.\n5. **Median Calculation**: Depending on whether the total number of elements is odd or even, we calculate the median accordingly.\n6. **Time Complexity**: The time complexity of this approach is O(log(min(m, n))) due to the binary search on the smaller array.\n7. **Space Complexity**: The space complexity is O(1) since we are using a constant amount of space for variables.\n\nThis efficient approach allows us to find the median without merging the arrays, thus adhering to the required time complexity constraints."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n"
  },
  "timestamp": "2025-04-01 18:00:25"
}