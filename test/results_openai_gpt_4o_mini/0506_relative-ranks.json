{
  "problem": {
    "id": "506",
    "frontend_id": "506",
    "title": "Relative Ranks",
    "description": "You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique.\nThe athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. The placement of each athlete determines their rank:\n\nThe 1st place athlete's rank is \"Gold Medal\".\nThe 2nd place athlete's rank is \"Silver Medal\".\nThe 3rd place athlete's rank is \"Bronze Medal\".\nFor the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete's rank is \"x\").\n\nReturn an array answer of size n where answer[i] is the rank of the ith athlete.\n \nExample 1:\n\nInput: score = [5,4,3,2,1]\nOutput: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\nExplanation: The placements are [1st, 2nd, 3rd, 4th, 5th].\nExample 2:\n\nInput: score = [10,3,8,9,4]\nOutput: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]\nExplanation: The placements are [1st, 5th, 3rd, 2nd, 4th].\n\n\n \nConstraints:\n\nn == score.length\n1 <= n <= 104\n0 <= score[i] <= 106\nAll the values in score are unique.\n\n",
    "difficulty": "Easy",
    "examples": [
      "[5,4,3,2,1]",
      "[10,3,8,9,4]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "score": "[5,4,3,2,1]"
        },
        "expected": "[Gold Medal,Silver Medal,Bronze Medal,4,5]"
      },
      {
        "input": {
          "score": "[10,3,8,9,4]"
        },
        "expected": "[Gold Medal,5,Bronze Medal,Silver Medal,4]"
      }
    ],
    "python_starter": "class Solution:\n    def findRelativeRanks(self, score: List[int]) -> List[str]:\n        ",
    "hints": [],
    "meta_data": {
      "name": "findRelativeRanks",
      "params": [
        {
          "name": "score",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "string[]"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def findRelativeRanks(self, score: List[int]) -> List[str]:\n        # Step 1: Sort the scores and keep track of the original indices\n        sorted_scores = sorted(score, reverse=True)\n        \n        # Step 2: Create a mapping from score to rank\n        rank_map = {}\n        for i, s in enumerate(sorted_scores):\n            if i == 0:\n                rank_map[s] = \"Gold Medal\"\n            elif i == 1:\n                rank_map[s] = \"Silver Medal\"\n            elif i == 2:\n                rank_map[s] = \"Bronze Medal\"\n            else:\n                rank_map[s] = str(i + 1)  # Rank is 1-based index\n        \n        # Step 3: Build the result based on the original score order\n        result = [rank_map[s] for s in score]\n        return result",
    "explanation": "The solution begins by sorting the scores in descending order, which allows us to easily determine the ranks based on their positions. We then create a dictionary (`rank_map`) that maps each score to its corresponding rank. The first three scores are assigned special titles (\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\"), while all subsequent scores are assigned their respective ranks as strings.\n\nAfter constructing the mapping, we iterate through the original `score` list to build the final result array, which contains the ranks in the order corresponding to the original scores.\n\n### Time Complexity\n- Sorting the scores takes O(n log n).\n- Constructing the rank mapping takes O(n).\n- Building the result array also takes O(n).\nThus, the overall time complexity is O(n log n).\n\n### Space Complexity\n- The space complexity is O(n) due to the storage of the sorted scores and the rank mapping.\n\nThis solution efficiently computes the relative ranks of athletes based on their unique scores."
  },
  "test_result": {
    "success": false,
    "output": "Execution error:\n  File \"C:\\Users\\PC\\AppData\\Local\\Temp\\tmpid37c8ji.py\", line 60\n    expected_0 = [Gold Medal,Silver Medal,Bronze Medal,4,5]\n                  ^^^^^^^^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n"
  },
  "timestamp": "2025-04-01 18:01:21"
}