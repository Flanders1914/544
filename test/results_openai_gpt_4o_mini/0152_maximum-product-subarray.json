{
  "problem": {
    "id": "152",
    "frontend_id": "152",
    "title": "Maximum Product Subarray",
    "description": "Given an integer array nums, find a subarray that has the largest product, and return the product.\nThe test cases are generated so that the answer will fit in a 32-bit integer.\n \nExample 1:\n\nInput: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\n\nExample 2:\n\nInput: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\n\n \nConstraints:\n\n1 <= nums.length <= 2 * 104\n-10 <= nums[i] <= 10\nThe product of any subarray of nums is guaranteed to fit in a 32-bit integer.\n\n",
    "difficulty": "Medium",
    "examples": [
      "[2,3,-2,4]",
      "[-2,0,-1]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[2,3,-2,4]"
        },
        "expected": "6"
      },
      {
        "input": {
          "nums": "[-2,0,-1]"
        },
        "expected": "0"
      }
    ],
    "python_starter": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "maxProduct",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "from typing import List\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        # Initialize the maximum product, minimum product, and the result\n        max_so_far = nums[0]\n        min_so_far = nums[0]\n        result = nums[0]\n        \n        # Iterate through the array starting from the second element\n        for i in range(1, len(nums)):\n            current = nums[i]\n            \n            # If current is negative, swap max and min\n            if current < 0:\n                max_so_far, min_so_far = min_so_far, max_so_far\n            \n            # Update max_so_far and min_so_far\n            max_so_far = max(current, max_so_far * current)\n            min_so_far = min(current, min_so_far * current)\n            \n            # Update the result with the maximum product found so far\n            result = max(result, max_so_far)\n        \n        return result",
    "explanation": "The solution begins by initializing three variables: `max_so_far`, `min_so_far`, and `result`, all set to the first element of the input array. As we iterate through the array starting from the second element, we check if the current number is negative. If it is, we swap `max_so_far` and `min_so_far` because multiplying by a negative number will turn the maximum product into a minimum product and vice versa.\n\nNext, we update `max_so_far` to be the maximum of the current number itself or the product of `max_so_far` and the current number. Similarly, we update `min_so_far` to be the minimum of the current number or the product of `min_so_far` and the current number. This ensures that we are always keeping track of the potential maximum and minimum products at each step.\n\nFinally, we update the `result` with the maximum value found so far. After iterating through the entire array, we return the `result`, which contains the maximum product of any subarray.\n\nThe time complexity of this solution is O(n) because we traverse the array once, and the space complexity is O(1) since we are using a fixed number of variables regardless of the input size."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 6\nTest case 2:\n[PASS] Test passed: 0\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:39"
}