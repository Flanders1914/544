{
  "problem": {
    "id": "128",
    "frontend_id": "128",
    "title": "Longest Consecutive Sequence",
    "description": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\nYou must write an algorithm that runs in O(n) time.\n \nExample 1:\n\nInput: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n\nExample 2:\n\nInput: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9\n\nExample 3:\n\nInput: nums = [1,0,1,2]\nOutput: 3\n\n \nConstraints:\n\n0 <= nums.length <= 105\n-109 <= nums[i] <= 109\n\n",
    "difficulty": "Medium",
    "examples": [
      "[100,4,200,1,3,2]",
      "[0,3,7,2,5,8,4,6,0,1]",
      "[1,0,1,2]"
    ],
    "structured_test_cases": [
      {
        "input": {
          "nums": "[100,4,200,1,3,2]"
        },
        "expected": "4"
      },
      {
        "input": {
          "nums": "[0,3,7,2,5,8,4,6,0,1]"
        },
        "expected": "9"
      }
    ],
    "python_starter": "class Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        ",
    "hints": [],
    "meta_data": {
      "name": "longestConsecutive",
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        }
      ],
      "return": {
        "type": "integer"
      }
    }
  },
  "solution": {
    "code": "class Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        # Create a set from the nums list for O(1) lookups\n        num_set = set(nums)\n        longest_streak = 0\n        \n        # Iterate through each number in the set\n        for num in num_set:\n            # Check if it's the start of a sequence\n            if num - 1 not in num_set:\n                current_num = num\n                current_streak = 1\n                \n                # Count the length of the sequence\n                while current_num + 1 in num_set:\n                    current_num += 1\n                    current_streak += 1\n                \n                # Update the longest streak found\n                longest_streak = max(longest_streak, current_streak)\n        \n        return longest_streak",
    "explanation": "The solution uses a set to store the numbers from the input list, allowing for O(1) average time complexity for lookups. We iterate through each number in the set and check if it is the start of a new sequence by verifying that the previous number (num - 1) is not in the set. If it is the start, we then count how many consecutive numbers follow it by incrementing a counter while the next number (current_num + 1) exists in the set.\n\nThe time complexity of this solution is O(n) because we make a single pass through the list to create the set and another pass through the set to find the longest consecutive sequence. The space complexity is also O(n) due to the storage of the numbers in the set.\n\nOverall, this approach efficiently finds the longest consecutive sequence in linear time, adhering to the problem's constraints."
  },
  "test_result": {
    "success": true,
    "output": "Test case 1:\n[PASS] Test passed: 4\nTest case 2:\n[PASS] Test passed: 9\n\n[PASS] All tests passed!\n"
  },
  "timestamp": "2025-04-01 18:00:37"
}