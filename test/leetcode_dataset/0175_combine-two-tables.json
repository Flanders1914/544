{
  "id": "175",
  "frontend_id": "175",
  "title": "Combine Two Tables",
  "description": "Table: Person\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| personId    | int     |\n| lastName    | varchar |\n| firstName   | varchar |\n+-------------+---------+\npersonId is the primary key (column with unique values) for this table.\nThis table contains information about the ID of some persons and their first and last names.\n\n \nTable: Address\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| addressId   | int     |\n| personId    | int     |\n| city        | varchar |\n| state       | varchar |\n+-------------+---------+\naddressId is the primary key (column with unique values) for this table.\nEach row of this table contains information about the city and state of one person with ID = PersonId.\n\n \nWrite a solution to report the first name, last name, city, and state of each person in the Person table. If the address of a personId is not present in the Address table, report null instead.\nReturn the result table in any order.\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nPerson table:\n+----------+----------+-----------+\n| personId | lastName | firstName |\n+----------+----------+-----------+\n| 1        | Wang     | Allen     |\n| 2        | Alice    | Bob       |\n+----------+----------+-----------+\nAddress table:\n+-----------+----------+---------------+------------+\n| addressId | personId | city          | state      |\n+-----------+----------+---------------+------------+\n| 1         | 2        | New York City | New York   |\n| 2         | 3        | Leetcode      | California |\n+-----------+----------+---------------+------------+\nOutput: \n+-----------+----------+---------------+----------+\n| firstName | lastName | city          | state    |\n+-----------+----------+---------------+----------+\n| Allen     | Wang     | Null          | Null     |\n| Bob       | Alice    | New York City | New York |\n+-----------+----------+---------------+----------+\nExplanation: \nThere is no address in the address table for the personId = 1 so we return null in their city and state.\naddressId = 1 contains information about the address of personId = 2.\n\n",
  "difficulty": "Easy",
  "examples": [
    "{\"headers\":{\"Person\":[\"personId\",\"lastName\",\"firstName\"],\"Address\":[\"addressId\",\"personId\",\"city\",\"state\"]},\"rows\":{\"Person\":[[1,\"Wang\",\"Allen\"],[2,\"Alice\",\"Bob\"]],\"Address\":[[1,2,\"New York City\",\"New York\"],[2,3,\"Leetcode\",\"California\"]]}}"
  ],
  "structured_test_cases": [
    {
      "input": {
        "param0": "Person table: +----------+----------+-----------+ | personId | lastName | firstName | +----------+----------+-----------+ | 1        | Wang     | Allen     | | 2        | Alice    | Bob       | +----------+----------+-----------+ Address table: +-----------+----------+---------------+------------+ | addressId | personId | city          | state      | +-----------+----------+---------------+------------+ | 1         | 2        | New York City | New York   | | 2         | 3        | Leetcode      | California | +-----------+----------+---------------+------------+"
      },
      "expected": "+-----------+----------+---------------+----------+"
    }
  ],
  "python_starter": null,
  "hints": [],
  "meta_data": {
    "mysql": [
      "Create table If Not Exists Person (personId int, firstName varchar(255), lastName varchar(255))",
      "Create table If Not Exists Address (addressId int, personId int, city varchar(255), state varchar(255))"
    ],
    "mssql": [
      "Create table Person (personId int, firstName varchar(255), lastName varchar(255))",
      "Create table Address (addressId int, personId int, city varchar(255), state varchar(255))"
    ],
    "oraclesql": [
      "Create table Person (personId int, firstName varchar(255), lastName varchar(255))",
      "Create table Address (addressId int, personId int, city varchar(255), state varchar(255))"
    ],
    "database": true,
    "name": "combine_two_tables",
    "pythondata": [
      "Person = pd.DataFrame([], columns=['personId', 'firstName', 'lastName']).astype({'personId':'Int64', 'firstName':'object', 'lastName':'object'})",
      "Address = pd.DataFrame([], columns=['addressId', 'personId', 'city', 'state']).astype({'addressId':'Int64', 'personId':'Int64', 'city':'object', 'state':'object'})"
    ],
    "manual": true,
    "database_schema": {
      "Person": {
        "personId": "INT",
        "firstName": "VARCHAR(255)",
        "lastName": "VARCHAR(255)"
      },
      "Address": {
        "addressId": "INT",
        "personId": "INT",
        "city": "VARCHAR(255)",
        "state": "VARCHAR(255)"
      }
    }
  }
}