{
  "id": "33",
  "frontend_id": "33",
  "title": "Search in Rotated Sorted Array",
  "description": "There is an integer array nums sorted in ascending order (with distinct values).\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\nYou must write an algorithm with O(log n) runtime complexity.\n \nExample 1:\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\nExample 2:\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\nExample 3:\nInput: nums = [1], target = 0\nOutput: -1\n\n \nConstraints:\n\n1 <= nums.length <= 5000\n-104 <= nums[i] <= 104\nAll values of nums are unique.\nnums is an ascending array that is possibly rotated.\n-104 <= target <= 104\n\n",
  "difficulty": "Medium",
  "examples": [
    "[4,5,6,7,0,1,2]",
    "0",
    "[4,5,6,7,0,1,2]",
    "3",
    "[1]",
    "0"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[4,5,6,7,0,1,2]",
        "target": "0"
      },
      "expected": "4"
    }
  ],
  "python_starter": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "search",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}