{
  "id": "140",
  "frontend_id": "140",
  "title": "Word Break II",
  "description": "Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\n \nExample 1:\n\nInput: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\nOutput: [\"cats and dog\",\"cat sand dog\"]\n\nExample 2:\n\nInput: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\nOutput: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\nExplanation: Note that you are allowed to reuse a dictionary word.\n\nExample 3:\n\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: []\n\n \nConstraints:\n\n1 <= s.length <= 20\n1 <= wordDict.length <= 1000\n1 <= wordDict[i].length <= 10\ns and wordDict[i] consist of only lowercase English letters.\nAll the strings of wordDict are unique.\nInput is generated in a way that the length of the answer doesn't exceed 105.\n\n",
  "difficulty": "Hard",
  "examples": [
    "\"catsanddog\"",
    "[\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]",
    "\"pineapplepenapple\"",
    "[\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]",
    "\"catsandog\"",
    "[\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "s": "\"catsanddog\"",
        "wordDict": "[\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]"
      },
      "expected": "[cats and dog,cat sand dog]"
    },
    {
      "input": {
        "s": "\"catsandog\"",
        "wordDict": "[\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]"
      },
      "expected": "[]"
    }
  ],
  "python_starter": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "wordBreak",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "wordDict",
        "type": "list<string>"
      }
    ],
    "return": {
      "type": "list<string>",
      "dealloc": true
    }
  }
}