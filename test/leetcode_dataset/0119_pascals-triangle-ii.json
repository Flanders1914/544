{
  "id": "119",
  "frontend_id": "119",
  "title": "Pascal's Triangle II",
  "description": "Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n\n \nExample 1:\nInput: rowIndex = 3\nOutput: [1,3,3,1]\nExample 2:\nInput: rowIndex = 0\nOutput: [1]\nExample 3:\nInput: rowIndex = 1\nOutput: [1,1]\n\n \nConstraints:\n\n0 <= rowIndex <= 33\n\n \nFollow up: Could you optimize your algorithm to use only O(rowIndex) extra space?\n",
  "difficulty": "Easy",
  "examples": [
    "3",
    "0",
    "1"
  ],
  "structured_test_cases": [
    {
      "input": {
        "rowIndex": "3"
      },
      "expected": "[1,3,3,1]"
    }
  ],
  "python_starter": "class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "getRow",
    "params": [
      {
        "name": "rowIndex",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<integer>"
    }
  }
}