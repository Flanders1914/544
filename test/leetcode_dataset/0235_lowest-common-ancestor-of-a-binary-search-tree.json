{
  "id": "235",
  "frontend_id": "235",
  "title": "Lowest Common Ancestor of a Binary Search Tree",
  "description": "Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”\n \nExample 1:\n\n\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\nOutput: 6\nExplanation: The LCA of nodes 2 and 8 is 6.\n\nExample 2:\n\n\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\nOutput: 2\nExplanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n\nExample 3:\n\nInput: root = [2,1], p = 2, q = 1\nOutput: 2\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [2, 105].\n-109 <= Node.val <= 109\nAll Node.val are unique.\np != q\np and q will exist in the BST.\n\n",
  "difficulty": "Medium",
  "examples": [
    "[6,2,8,0,4,7,9,null,null,3,5]",
    "2",
    "8",
    "[6,2,8,0,4,7,9,null,null,3,5]",
    "2",
    "4",
    "[2,1]",
    "2",
    "1"
  ],
  "structured_test_cases": [
    {
      "input": {
        "root": "[6,2,8,0,4,7,9,null,null,3,5]",
        "p": "2",
        "q": "8"
      },
      "expected": "6"
    },
    {
      "input": {
        "root": "[6,2,8,0,4,7,9,null,null,3,5]",
        "p": "2",
        "q": "4"
      },
      "expected": "2"
    },
    {
      "input": {
        "root": "[2,1]",
        "p": "2",
        "q": "1"
      },
      "expected": "2"
    }
  ],
  "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        ",
  "hints": [],
  "meta_data": {
    "name": "lowestCommonAncestor",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      },
      {
        "name": "p",
        "type": "integer"
      },
      {
        "name": "q",
        "type": "integer"
      }
    ],
    "return": {
      "type": "TreeNode"
    },
    "manual": true
  }
}