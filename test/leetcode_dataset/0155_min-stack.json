{
  "id": "155",
  "frontend_id": "155",
  "title": "Min Stack",
  "description": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\nImplement the MinStack class:\n\nMinStack() initializes the stack object.\nvoid push(int val) pushes the element val onto the stack.\nvoid pop() removes the element on the top of the stack.\nint top() gets the top element of the stack.\nint getMin() retrieves the minimum element in the stack.\n\nYou must implement a solution with O(1) time complexity for each function.\n \nExample 1:\n\nInput\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]\n\nOutput\n[null,null,null,null,-3,null,0,-2]\n\nExplanation\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n\n \nConstraints:\n\n-231 <= val <= 231 - 1\nMethods pop, top and getMin operations will always be called on non-empty stacks.\nAt most 3 * 104 calls will be made to push, pop, top, and getMin.\n\n",
  "difficulty": "Medium",
  "examples": [
    "[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]",
    "[[],[-2],[0],[-3],[],[],[],[]]"
  ],
  "structured_test_cases": [],
  "python_starter": "class MinStack:\n\n    def __init__(self):\n        \n\n    def push(self, val: int) -> None:\n        \n\n    def pop(self) -> None:\n        \n\n    def top(self) -> int:\n        \n\n    def getMin(self) -> int:\n        \n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()",
  "hints": [
    "Consider each node in the stack having a minimum value. (Credits to @aakarshmadhavan)"
  ],
  "meta_data": {
    "classname": "MinStack",
    "constructor": {
      "params": []
    },
    "methods": [
      {
        "params": [
          {
            "type": "integer",
            "name": "val"
          }
        ],
        "return": {
          "type": "void"
        },
        "name": "push"
      },
      {
        "params": [],
        "return": {
          "type": "void"
        },
        "name": "pop"
      },
      {
        "params": [],
        "return": {
          "type": "integer"
        },
        "name": "top"
      },
      {
        "params": [],
        "return": {
          "type": "integer"
        },
        "name": "getMin"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "systemdesign": true
  }
}