{
  "id": "108",
  "frontend_id": "108",
  "title": "Convert Sorted Array to Binary Search Tree",
  "description": "Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n \nExample 1:\n\n\nInput: nums = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: [0,-10,5,null,-3,null,9] is also accepted:\n\n\nExample 2:\n\n\nInput: nums = [1,3]\nOutput: [3,1]\nExplanation: [1,null,3] and [3,1] are both height-balanced BSTs.\n\n \nConstraints:\n\n1 <= nums.length <= 104\n-104 <= nums[i] <= 104\nnums is sorted in a strictly increasing order.\n\n",
  "difficulty": "Easy",
  "examples": [
    "[-10,-3,0,5,9]",
    "[1,3]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[-10,-3,0,5,9]"
      },
      "expected": "[0,-3,9,-10,null,5]"
    },
    {
      "input": {
        "nums": "[1,3]"
      },
      "expected": "[3,1]"
    }
  ],
  "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "sortedArrayToBST",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "TreeNode",
      "dealloc": true
    }
  }
}