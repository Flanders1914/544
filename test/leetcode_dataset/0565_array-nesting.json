{
  "id": "565",
  "frontend_id": "565",
  "title": "Array Nesting",
  "description": "You are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1].\nYou should build a set s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... } subjected to the following rule:\n\nThe first element in s[k] starts with the selection of the element nums[k] of index = k.\nThe next element in s[k] should be nums[nums[k]], and then nums[nums[nums[k]]], and so on.\nWe stop adding right before a duplicate element occurs in s[k].\n\nReturn the longest length of a set s[k].\n \nExample 1:\n\nInput: nums = [5,4,0,3,1,6,2]\nOutput: 4\nExplanation: \nnums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2.\nOne of the longest sets s[k]:\ns[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0}\n\nExample 2:\n\nInput: nums = [0,1,2]\nOutput: 1\n\n \nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] < nums.length\nAll the values of nums are unique.\n\n",
  "difficulty": "Medium",
  "examples": [
    "[5,4,0,3,1,6,2]",
    "[0,1,2]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[5,4,0,3,1,6,2]"
      },
      "expected": "4"
    },
    {
      "input": {
        "nums": "[0,1,2]"
      },
      "expected": "1"
    }
  ],
  "python_starter": "class Solution:\n    def arrayNesting(self, nums: List[int]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "arrayNesting",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}