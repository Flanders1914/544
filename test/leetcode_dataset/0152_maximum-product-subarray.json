{
  "id": "152",
  "frontend_id": "152",
  "title": "Maximum Product Subarray",
  "description": "Given an integer array nums, find a subarray that has the largest product, and return the product.\nThe test cases are generated so that the answer will fit in a 32-bit integer.\n \nExample 1:\n\nInput: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\n\nExample 2:\n\nInput: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\n\n \nConstraints:\n\n1 <= nums.length <= 2 * 104\n-10 <= nums[i] <= 10\nThe product of any subarray of nums is guaranteed to fit in a 32-bit integer.\n\n",
  "difficulty": "Medium",
  "examples": [
    "[2,3,-2,4]",
    "[-2,0,-1]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[2,3,-2,4]"
      },
      "expected": "6"
    },
    {
      "input": {
        "nums": "[-2,0,-1]"
      },
      "expected": "0"
    }
  ],
  "python_starter": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "maxProduct",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}