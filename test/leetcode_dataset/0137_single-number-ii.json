{
  "id": "137",
  "frontend_id": "137",
  "title": "Single Number II",
  "description": "Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.\nYou must implement a solution with a linear runtime complexity and use only constant extra space.\n \nExample 1:\nInput: nums = [2,2,3,2]\nOutput: 3\nExample 2:\nInput: nums = [0,1,0,1,0,1,99]\nOutput: 99\n\n \nConstraints:\n\n1 <= nums.length <= 3 * 104\n-231 <= nums[i] <= 231 - 1\nEach element in nums appears exactly three times except for one element which appears once.\n\n",
  "difficulty": "Medium",
  "examples": [
    "[2,2,3,2]",
    "[0,1,0,1,0,1,99]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[2,2,3,2]"
      },
      "expected": "3"
    }
  ],
  "python_starter": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "singleNumber",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}