{
  "id": "764",
  "frontend_id": "429",
  "title": "N-ary Tree Level Order Traversal",
  "description": "Given an n-ary tree, return the level order traversal of its nodes' values.\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\n \nExample 1:\n\n\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: [[1],[3,2,4],[5,6]]\n\nExample 2:\n\n\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\n\n \nConstraints:\n\nThe height of the n-ary tree is less than or equal to 1000\nThe total number of nodes is between [0, 104]\n\n",
  "difficulty": "Medium",
  "examples": [
    "[1,null,3,2,4,null,5,6]",
    "[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "root": "[1,null,3,2,4,null,5,6]"
      },
      "expected": "[[1]"
    }
  ],
  "python_starter": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val: Optional[int] = None, children: Optional[List['Node']] = None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution:\n    def levelOrder(self, root: 'Node') -> List[List[int]]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "levelOrder",
    "params": [
      {
        "name": "root",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>"
    },
    "languages": [
      "cpp",
      "java",
      "python",
      "csharp",
      "javascript",
      "python3",
      "golang",
      "ruby",
      "c",
      "kotlin",
      "scala",
      "php",
      "swift",
      "typescript"
    ],
    "manual": true,
    "typescriptCustomType": "class _Node {\n    val: number\n    children: _Node[]\n    \n    constructor(v: number) {\n        this.val = v;\n        this.children = [];\n    }\n}\n"
  }
}