{
  "id": "335",
  "frontend_id": "335",
  "title": "Self Crossing",
  "description": "You are given an array of integers distance.\nYou start at the point (0, 0) on an X-Y plane, and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.\nReturn true if your path crosses itself or false if it does not.\n \nExample 1:\n\n\nInput: distance = [2,1,1,2]\nOutput: true\nExplanation: The path crosses itself at the point (0, 1).\n\nExample 2:\n\n\nInput: distance = [1,2,3,4]\nOutput: false\nExplanation: The path does not cross itself at any point.\n\nExample 3:\n\n\nInput: distance = [1,1,1,2,1]\nOutput: true\nExplanation: The path crosses itself at the point (0, 0).\n\n \nConstraints:\n\n1 <= distance.length <= 105\n1 <= distance[i] <= 105\n\n",
  "difficulty": "Hard",
  "examples": [
    "[2,1,1,2]",
    "[1,2,3,4]",
    "[1,1,1,2,1]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "distance": "[2,1,1,2]"
      },
      "expected": "true"
    },
    {
      "input": {
        "distance": "[1,2,3,4]"
      },
      "expected": "false"
    },
    {
      "input": {
        "distance": "[1,1,1,2,1]"
      },
      "expected": "true"
    }
  ],
  "python_starter": "class Solution:\n    def isSelfCrossing(self, distance: List[int]) -> bool:\n        ",
  "hints": [],
  "meta_data": {
    "name": "isSelfCrossing",
    "params": [
      {
        "name": "distance",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "boolean"
    }
  }
}