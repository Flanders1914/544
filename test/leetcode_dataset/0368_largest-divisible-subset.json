{
  "id": "368",
  "frontend_id": "368",
  "title": "Largest Divisible Subset",
  "description": "Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:\n\nanswer[i] % answer[j] == 0, or\nanswer[j] % answer[i] == 0\n\nIf there are multiple solutions, return any of them.\n \nExample 1:\n\nInput: nums = [1,2,3]\nOutput: [1,2]\nExplanation: [1,3] is also accepted.\n\nExample 2:\n\nInput: nums = [1,2,4,8]\nOutput: [1,2,4,8]\n\n \nConstraints:\n\n1 <= nums.length <= 1000\n1 <= nums[i] <= 2 * 109\nAll the integers in nums are unique.\n\n",
  "difficulty": "Medium",
  "examples": [
    "[1,2,3]",
    "[1,2,4,8]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[1,2,3]"
      },
      "expected": "[1,2]"
    },
    {
      "input": {
        "nums": "[1,2,4,8]"
      },
      "expected": "[1,2,4,8]"
    }
  ],
  "python_starter": "class Solution:\n    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "largestDivisibleSubset",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<integer>"
    }
  }
}