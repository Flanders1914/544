{
  "id": "521",
  "frontend_id": "521",
  "title": "Longest Uncommon Subsequence I",
  "description": "Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If no such uncommon subsequence exists, return -1.\nAn uncommon subsequence between two strings is a string that is a subsequence of exactly one of them.\n \nExample 1:\n\nInput: a = \"aba\", b = \"cdc\"\nOutput: 3\nExplanation: One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\".\nNote that \"cdc\" is also a longest uncommon subsequence.\n\nExample 2:\n\nInput: a = \"aaa\", b = \"bbb\"\nOutput: 3\nExplanation: The longest uncommon subsequences are \"aaa\" and \"bbb\".\n\nExample 3:\n\nInput: a = \"aaa\", b = \"aaa\"\nOutput: -1\nExplanation: Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a. So the answer would be -1.\n\n \nConstraints:\n\n1 <= a.length, b.length <= 100\na and b consist of lower-case English letters.\n\n",
  "difficulty": "Easy",
  "examples": [
    "\"aba\"",
    "\"cdc\"",
    "\"aaa\"",
    "\"bbb\"",
    "\"aaa\"",
    "\"aaa\""
  ],
  "structured_test_cases": [
    {
      "input": {
        "a": "\"aba\"",
        "b": "\"cdc\""
      },
      "expected": "3"
    },
    {
      "input": {
        "a": "\"aaa\"",
        "b": "\"bbb\""
      },
      "expected": "3"
    },
    {
      "input": {
        "a": "\"aaa\"",
        "b": "\"aaa\""
      },
      "expected": "-1"
    }
  ],
  "python_starter": "class Solution:\n    def findLUSlength(self, a: str, b: str) -> int:\n        ",
  "hints": [
    "Think very simple.",
    "If <code>a == b</code>, the answer is -1.",
    "Otherwise, the answer is the string <code>a</code> or the string <code>b</code>."
  ],
  "meta_data": {
    "name": "findLUSlength",
    "params": [
      {
        "name": "a",
        "type": "string"
      },
      {
        "name": "b",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}