{
  "id": "300",
  "frontend_id": "300",
  "title": "Longest Increasing Subsequence",
  "description": "Given an integer array nums, return the length of the longest strictly increasing subsequence.\n \nExample 1:\n\nInput: nums = [10,9,2,5,3,7,101,18]\nOutput: 4\nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n\nExample 2:\n\nInput: nums = [0,1,0,3,2,3]\nOutput: 4\n\nExample 3:\n\nInput: nums = [7,7,7,7,7,7,7]\nOutput: 1\n\n \nConstraints:\n\n1 <= nums.length <= 2500\n-104 <= nums[i] <= 104\n\n \nFollow up: Can you come up with an algorithm that runs in O(n log(n)) time complexity?\n",
  "difficulty": "Medium",
  "examples": [
    "[10,9,2,5,3,7,101,18]",
    "[0,1,0,3,2,3]",
    "[7,7,7,7,7,7,7]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[10,9,2,5,3,7,101,18]"
      },
      "expected": "4"
    },
    {
      "input": {
        "nums": "[0,1,0,3,2,3]"
      },
      "expected": "4"
    }
  ],
  "python_starter": "class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "lengthOfLIS",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}