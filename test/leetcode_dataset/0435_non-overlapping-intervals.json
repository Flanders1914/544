{
  "id": "435",
  "frontend_id": "435",
  "title": "Non-overlapping Intervals",
  "description": "Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\nNote that intervals which only touch at a point are non-overlapping. For example, [1, 2] and [2, 3] are non-overlapping.\n \nExample 1:\n\nInput: intervals = [[1,2],[2,3],[3,4],[1,3]]\nOutput: 1\nExplanation: [1,3] can be removed and the rest of the intervals are non-overlapping.\n\nExample 2:\n\nInput: intervals = [[1,2],[1,2],[1,2]]\nOutput: 2\nExplanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.\n\nExample 3:\n\nInput: intervals = [[1,2],[2,3]]\nOutput: 0\nExplanation: You don't need to remove any of the intervals since they're already non-overlapping.\n\n \nConstraints:\n\n1 <= intervals.length <= 105\nintervals[i].length == 2\n-5 * 104 <= starti < endi <= 5 * 104\n\n",
  "difficulty": "Medium",
  "examples": [
    "[[1,2],[2,3],[3,4],[1,3]]",
    "[[1,2],[1,2],[1,2]]",
    "[[1,2],[2,3]]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "intervals": "[[1,2]"
      },
      "expected": "1"
    },
    {
      "input": {
        "intervals": "[[1,2]"
      },
      "expected": "2"
    },
    {
      "input": {
        "intervals": "[[1,2]"
      },
      "expected": "0"
    }
  ],
  "python_starter": "class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "eraseOverlapIntervals",
    "params": [
      {
        "name": "intervals",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}