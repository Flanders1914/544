{
  "id": "290",
  "frontend_id": "290",
  "title": "Word Pattern",
  "description": "Given a pattern and a string s, find if s follows the same pattern.\nHere follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s. Specifically:\n\nEach letter in pattern maps to exactly one unique word in s.\nEach unique word in s maps to exactly one letter in pattern.\nNo two letters map to the same word, and no two words map to the same letter.\n\n \nExample 1:\n\nInput: pattern = \"abba\", s = \"dog cat cat dog\"\nOutput: true\nExplanation:\nThe bijection can be established as:\n\n'a' maps to \"dog\".\n'b' maps to \"cat\".\n\n\nExample 2:\n\nInput: pattern = \"abba\", s = \"dog cat cat fish\"\nOutput: false\n\nExample 3:\n\nInput: pattern = \"aaaa\", s = \"dog cat cat dog\"\nOutput: false\n\n \nConstraints:\n\n1 <= pattern.length <= 300\npattern contains only lower-case English letters.\n1 <= s.length <= 3000\ns contains only lowercase English letters and spaces ' '.\ns does not contain any leading or trailing spaces.\nAll the words in s are separated by a single space.\n\n",
  "difficulty": "Easy",
  "examples": [
    "\"abba\"",
    "\"dog cat cat dog\"",
    "\"abba\"",
    "\"dog cat cat fish\"",
    "\"aaaa\"",
    "\"dog cat cat dog\""
  ],
  "structured_test_cases": [
    {
      "input": {
        "pattern": "\"abba\"",
        "s": "\"dog cat cat dog\""
      },
      "expected": "true"
    },
    {
      "input": {
        "pattern": "\"abba\"",
        "s": "\"dog cat cat fish\""
      },
      "expected": "false"
    }
  ],
  "python_starter": "class Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        ",
  "hints": [],
  "meta_data": {
    "name": "wordPattern",
    "params": [
      {
        "name": "pattern",
        "type": "string"
      },
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    }
  }
}