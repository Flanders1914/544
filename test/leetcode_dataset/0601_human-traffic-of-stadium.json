{
  "id": "601",
  "frontend_id": "601",
  "title": "Human Traffic of Stadium",
  "description": "Table: Stadium\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| visit_date    | date    |\n| people        | int     |\n+---------------+---------+\nvisit_date is the column with unique values for this table.\nEach row of this table contains the visit date and visit id to the stadium with the number of people during the visit.\nAs the id increases, the date increases as well.\n\n \nWrite a solution to display the records with three or more rows with consecutive id's, and the number of people is greater than or equal to 100 for each.\nReturn the result table ordered by visit_date in ascending order.\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nStadium table:\n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 1    | 2017-01-01 | 10        |\n| 2    | 2017-01-02 | 109       |\n| 3    | 2017-01-03 | 150       |\n| 4    | 2017-01-04 | 99        |\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+\nOutput: \n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+\nExplanation: \nThe four rows with ids 5, 6, 7, and 8 have consecutive ids and each of them has >= 100 people attended. Note that row 8 was included even though the visit_date was not the next day after row 7.\nThe rows with ids 2 and 3 are not included because we need at least three consecutive ids.\n\n",
  "difficulty": "Hard",
  "examples": [
    "{\"headers\": {\"Stadium\": [\"id\", \"visit_date\", \"people\"]}, \"rows\": {\"Stadium\": [[1, \"2017-01-01\", 10], [2, \"2017-01-02\", 109], [3, \"2017-01-03\", 150], [4, \"2017-01-04\", 99], [5, \"2017-01-05\", 145], [6, \"2017-01-06\", 1455], [7, \"2017-01-07\", 199], [8, \"2017-01-09\", 188]]}}"
  ],
  "structured_test_cases": [
    {
      "input": {
        "param0": "Stadium table: +------+------------+-----------+ | id   | visit_date | people    | +------+------------+-----------+ | 1    | 2017-01-01 | 10        | | 2    | 2017-01-02 | 109       | | 3    | 2017-01-03 | 150       | | 4    | 2017-01-04 | 99        | | 5    | 2017-01-05 | 145       | | 6    | 2017-01-06 | 1455      | | 7    | 2017-01-07 | 199       | | 8    | 2017-01-09 | 188       | +------+------------+-----------+"
      },
      "expected": "+------+------------+-----------+"
    }
  ],
  "python_starter": null,
  "hints": [],
  "meta_data": {
    "mysql": [
      "Create table If Not Exists Stadium (id int, visit_date DATE NULL, people int)"
    ],
    "mssql": [
      "Create table Stadium (id int, visit_date DATE NULL, people int)"
    ],
    "oraclesql": [
      "Create table Stadium (id int, visit_date DATE, people int)",
      "ALTER SESSION SET nls_date_format='YYYY-MM-DD'"
    ],
    "database": true,
    "name": "human_traffic",
    "pythondata": [
      "Stadium = pd.DataFrame([], columns=['id', 'visit_date', 'people']).astype({'id':'Int64', 'visit_date':'datetime64[ns]', 'people':'Int64'})\n"
    ],
    "postgresql": [
      "\nCreate table If Not Exists Stadium (id int, visit_date DATE NULL, people int)"
    ],
    "database_schema": {
      "Stadium": {
        "id": "INT",
        "visit_date": "DATE",
        "people": "INT"
      }
    }
  }
}