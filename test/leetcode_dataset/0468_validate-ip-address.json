{
  "id": "468",
  "frontend_id": "468",
  "title": "Validate IP Address",
  "description": "Given a string queryIP, return \"IPv4\" if IP is a valid IPv4 address, \"IPv6\" if IP is a valid IPv6 address or \"Neither\" if IP is not a correct IP of any type.\nA valid IPv4 address is an IP in the form \"x1.x2.x3.x4\" where 0 <= xi <= 255 and xi cannot contain leading zeros. For example, \"192.168.1.1\" and \"192.168.1.0\" are valid IPv4 addresses while \"192.168.01.1\", \"192.168.1.00\", and \"192.168@1.1\" are invalid IPv4 addresses.\nA valid IPv6 address is an IP in the form \"x1:x2:x3:x4:x5:x6:x7:x8\" where:\n\n1 <= xi.length <= 4\nxi is a hexadecimal string which may contain digits, lowercase English letter ('a' to 'f') and upper-case English letters ('A' to 'F').\nLeading zeros are allowed in xi.\n\nFor example, \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\" and \"2001:db8:85a3:0:0:8A2E:0370:7334\" are valid IPv6 addresses, while \"2001:0db8:85a3::8A2E:037j:7334\" and \"02001:0db8:85a3:0000:0000:8a2e:0370:7334\" are invalid IPv6 addresses.\n \nExample 1:\n\nInput: queryIP = \"172.16.254.1\"\nOutput: \"IPv4\"\nExplanation: This is a valid IPv4 address, return \"IPv4\".\n\nExample 2:\n\nInput: queryIP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\nOutput: \"IPv6\"\nExplanation: This is a valid IPv6 address, return \"IPv6\".\n\nExample 3:\n\nInput: queryIP = \"256.256.256.256\"\nOutput: \"Neither\"\nExplanation: This is neither a IPv4 address nor a IPv6 address.\n\n \nConstraints:\n\nqueryIP consists only of English letters, digits and the characters '.' and ':'.\n\n",
  "difficulty": "Medium",
  "examples": [
    "\"172.16.254.1\"",
    "\"2001:0db8:85a3:0:0:8A2E:0370:7334\"",
    "\"256.256.256.256\""
  ],
  "structured_test_cases": [
    {
      "input": {
        "queryIP": "\"172.16.254.1\""
      },
      "expected": "IPv4"
    },
    {
      "input": {
        "queryIP": "\"2001:0db8:85a3:0:0:8A2E:0370:7334\""
      },
      "expected": "IPv6"
    },
    {
      "input": {
        "queryIP": "\"256.256.256.256\""
      },
      "expected": "Neither"
    }
  ],
  "python_starter": "class Solution:\n    def validIPAddress(self, queryIP: str) -> str:\n        ",
  "hints": [],
  "meta_data": {
    "name": "validIPAddress",
    "params": [
      {
        "name": "queryIP",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    }
  }
}