{
  "id": "336",
  "frontend_id": "336",
  "title": "Palindrome Pairs",
  "description": "You are given a 0-indexed array of unique strings words.\nA palindrome pair is a pair of integers (i, j) such that:\n\n0 <= i, j < words.length,\ni != j, and\nwords[i] + words[j] (the concatenation of the two strings) is a palindrome.\n\nReturn an array of all the palindrome pairs of words.\nYou must write an algorithm with O(sum of words[i].length) runtime complexity.\n \nExample 1:\n\nInput: words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\nOutput: [[0,1],[1,0],[3,2],[2,4]]\nExplanation: The palindromes are [\"abcddcba\",\"dcbaabcd\",\"slls\",\"llssssll\"]\n\nExample 2:\n\nInput: words = [\"bat\",\"tab\",\"cat\"]\nOutput: [[0,1],[1,0]]\nExplanation: The palindromes are [\"battab\",\"tabbat\"]\n\nExample 3:\n\nInput: words = [\"a\",\"\"]\nOutput: [[0,1],[1,0]]\nExplanation: The palindromes are [\"a\",\"a\"]\n\n \nConstraints:\n\n1 <= words.length <= 5000\n0 <= words[i].length <= 300\nwords[i] consists of lowercase English letters.\n\n",
  "difficulty": "Hard",
  "examples": [
    "[\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]",
    "[\"bat\",\"tab\",\"cat\"]",
    "[\"a\",\"\"]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "words": "[\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]"
      },
      "expected": "[[0,1]"
    },
    {
      "input": {
        "words": "[\"bat\",\"tab\",\"cat\"]"
      },
      "expected": "[[0,1]"
    },
    {
      "input": {
        "words": "[\"a\",\"\"]"
      },
      "expected": "[[0,1]"
    }
  ],
  "python_starter": "class Solution:\n    def palindromePairs(self, words: List[str]) -> List[List[int]]:\n        ",
  "hints": [
    "Checking every two pairs will exceed the time limit. It will be O(n^2 * k). We need a faster way.",
    "If we hash every string in the array, how can we check if two pairs form a palindrome after the concatenation?",
    "We can check every string in words and consider it as words[j] (i.e., the suffix of the target palindrome). We can check if there is a hash of string that can be the prefix to make it a palindrome."
  ],
  "meta_data": {
    "name": "palindromePairs",
    "params": [
      {
        "name": "words",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>"
    }
  }
}