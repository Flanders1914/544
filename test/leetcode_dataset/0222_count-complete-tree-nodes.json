{
  "id": "222",
  "frontend_id": "222",
  "title": "Count Complete Tree Nodes",
  "description": "Given the root of a complete binary tree, return the number of the nodes in the tree.\nAccording to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\nDesign an algorithm that runs in less than O(n) time complexity.\n \nExample 1:\n\n\nInput: root = [1,2,3,4,5,6]\nOutput: 6\n\nExample 2:\n\nInput: root = []\nOutput: 0\n\nExample 3:\n\nInput: root = [1]\nOutput: 1\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 5 * 104].\n0 <= Node.val <= 5 * 104\nThe tree is guaranteed to be complete.\n\n",
  "difficulty": "Easy",
  "examples": [
    "[1,2,3,4,5,6]",
    "[]",
    "[1]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "root": "[1,2,3,4,5,6]"
      },
      "expected": "6"
    }
  ],
  "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def countNodes(self, root: Optional[TreeNode]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "countNodes",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}