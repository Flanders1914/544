{
  "id": "467",
  "frontend_id": "467",
  "title": "Unique Substrings in Wraparound String",
  "description": "We define the string base to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so base will look like this:\n\n\"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".\n\nGiven a string s, return the number of unique non-empty substrings of s are present in base.\n \nExample 1:\n\nInput: s = \"a\"\nOutput: 1\nExplanation: Only the substring \"a\" of s is in base.\n\nExample 2:\n\nInput: s = \"cac\"\nOutput: 2\nExplanation: There are two substrings (\"a\", \"c\") of s in base.\n\nExample 3:\n\nInput: s = \"zab\"\nOutput: 6\nExplanation: There are six substrings (\"z\", \"a\", \"b\", \"za\", \"ab\", and \"zab\") of s in base.\n\n \nConstraints:\n\n1 <= s.length <= 105\ns consists of lowercase English letters.\n\n",
  "difficulty": "Medium",
  "examples": [
    "\"a\"",
    "\"cac\"",
    "\"zab\""
  ],
  "structured_test_cases": [
    {
      "input": {
        "s": "\"a\""
      },
      "expected": "1"
    },
    {
      "input": {
        "s": "\"cac\""
      },
      "expected": "2"
    },
    {
      "input": {
        "s": "\"zab\""
      },
      "expected": "6"
    }
  ],
  "python_starter": "class Solution:\n    def findSubstringInWraproundString(self, s: str) -> int:\n        ",
  "hints": [
    "One possible solution might be to consider allocating an array size of 26 for each character in the alphabet. (Credits to @r2ysxu)"
  ],
  "meta_data": {
    "name": "findSubstringInWraproundString",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}