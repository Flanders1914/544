{
  "id": "56",
  "frontend_id": "56",
  "title": "Merge Intervals",
  "description": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n \nExample 1:\n\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n\nExample 2:\n\nInput: intervals = [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\n\n \nConstraints:\n\n1 <= intervals.length <= 104\nintervals[i].length == 2\n0 <= starti <= endi <= 104\n\n",
  "difficulty": "Medium",
  "examples": [
    "[[1,3],[2,6],[8,10],[15,18]]",
    "[[1,4],[4,5]]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "intervals": "[[1,3]"
      },
      "expected": "[[1,6]"
    },
    {
      "input": {
        "intervals": "[[1,4]"
      },
      "expected": "[[1,5]"
    }
  ],
  "python_starter": "class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "merge",
    "params": [
      {
        "name": "intervals",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer[][]"
    }
  }
}