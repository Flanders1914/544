{
  "id": "399",
  "frontend_id": "399",
  "title": "Evaluate Division",
  "description": "You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.\nYou are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.\nReturn the answers to all queries. If a single answer cannot be determined, return -1.0.\nNote: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.\nNote: The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.\n \nExample 1:\n\nInput: equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\nOutput: [6.00000,0.50000,-1.00000,1.00000,-1.00000]\nExplanation: \nGiven: a / b = 2.0, b / c = 3.0\nqueries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? \nreturn: [6.0, 0.5, -1.0, 1.0, -1.0 ]\nnote: x is undefined => -1.0\nExample 2:\n\nInput: equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]\nOutput: [3.75000,0.40000,5.00000,0.20000]\n\nExample 3:\n\nInput: equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]\nOutput: [0.50000,2.00000,-1.00000,-1.00000]\n\n \nConstraints:\n\n1 <= equations.length <= 20\nequations[i].length == 2\n1 <= Ai.length, Bi.length <= 5\nvalues.length == equations.length\n0.0 < values[i] <= 20.0\n1 <= queries.length <= 20\nqueries[i].length == 2\n1 <= Cj.length, Dj.length <= 5\nAi, Bi, Cj, Dj consist of lower case English letters and digits.\n\n",
  "difficulty": "Medium",
  "examples": [
    "[[\"a\",\"b\"],[\"b\",\"c\"]]",
    "[2.0,3.0]",
    "[[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]",
    "[[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]]",
    "[1.5,2.5,5.0]",
    "[[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]",
    "[[\"a\",\"b\"]]",
    "[0.5]",
    "[[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "equations": "[[\"a\",\"b\"]",
        "values": "[2.0,3.0]",
        "queries": "[[\"a\",\"c\"]"
      },
      "expected": "[6.00000,0.50000,-1.00000,1.00000,-1.00000]"
    },
    {
      "input": {
        "equations": "[[\"a\",\"b\"]",
        "values": "[1.5,2.5,5.0]",
        "queries": "[[\"a\",\"c\"]"
      },
      "expected": "[3.75000,0.40000,5.00000,0.20000]"
    }
  ],
  "python_starter": "class Solution:\n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:\n        ",
  "hints": [
    "Do you recognize this as a graph problem?"
  ],
  "meta_data": {
    "name": "calcEquation",
    "params": [
      {
        "name": "equations",
        "type": "list<list<string>>"
      },
      {
        "name": "values",
        "type": "double[]"
      },
      {
        "name": "queries",
        "type": "list<list<string>>"
      }
    ],
    "return": {
      "type": "double[]"
    }
  }
}