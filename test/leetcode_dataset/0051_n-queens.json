{
  "id": "51",
  "frontend_id": "51",
  "title": "N-Queens",
  "description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\n \nExample 1:\n\n\nInput: n = 4\nOutput: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n\nExample 2:\n\nInput: n = 1\nOutput: [[\"Q\"]]\n\n \nConstraints:\n\n1 <= n <= 9\n\n",
  "difficulty": "Hard",
  "examples": [
    "4",
    "1"
  ],
  "structured_test_cases": [
    {
      "input": {
        "n": "4"
      },
      "expected": "[[.Q..,...Q,Q...,..Q.]"
    },
    {
      "input": {
        "n": "1"
      },
      "expected": "[[Q]"
    }
  ],
  "python_starter": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "solveNQueens",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<string>>",
      "colsize": "param_1",
      "dealloc": true
    }
  }
}