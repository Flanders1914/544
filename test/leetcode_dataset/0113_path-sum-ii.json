{
  "id": "113",
  "frontend_id": "113",
  "title": "Path Sum II",
  "description": "Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\nA root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.\n \nExample 1:\n\n\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\nOutput: [[5,4,11,2],[5,8,4,5]]\nExplanation: There are two paths whose sum equals targetSum:\n5 + 4 + 11 + 2 = 22\n5 + 8 + 4 + 5 = 22\n\nExample 2:\n\n\nInput: root = [1,2,3], targetSum = 5\nOutput: []\n\nExample 3:\n\nInput: root = [1,2], targetSum = 0\nOutput: []\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 5000].\n-1000 <= Node.val <= 1000\n-1000 <= targetSum <= 1000\n\n",
  "difficulty": "Medium",
  "examples": [
    "[5,4,8,11,null,13,4,7,2,null,null,5,1]",
    "22",
    "[1,2,3]",
    "5",
    "[1,2]",
    "0"
  ],
  "structured_test_cases": [
    {
      "input": {
        "root": "[5,4,8,11,null,13,4,7,2,null,null,5,1]",
        "targetSum": "22"
      },
      "expected": "[[5,4,11,2]"
    },
    {
      "input": {
        "root": "[1,2,3]",
        "targetSum": "5"
      },
      "expected": "[]"
    }
  ],
  "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "pathSum",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      },
      {
        "name": "targetSum",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    }
  }
}