{
  "id": "2",
  "frontend_id": "2",
  "title": "Add Two Numbers",
  "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n \nExample 1:\n\n\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n\nExample 2:\n\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n\nExample 3:\n\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n\n \nConstraints:\n\nThe number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.\n\n",
  "difficulty": "Medium",
  "examples": [
    "[2,4,3]",
    "[5,6,4]",
    "[0]",
    "[0]",
    "[9,9,9,9,9,9,9]",
    "[9,9,9,9]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "l1": "[2,4,3]",
        "l2": "[5,6,4]"
      },
      "expected": "[7,0,8]"
    },
    {
      "input": {
        "l1": "[0]",
        "l2": "[0]"
      },
      "expected": "[0]"
    }
  ],
  "python_starter": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "addTwoNumbers",
    "params": [
      {
        "name": "l1",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "l2",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    }
  }
}