{
  "id": "75",
  "frontend_id": "75",
  "title": "Sort Colors",
  "description": "Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\nWe will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\nYou must solve this problem without using the library's sort function.\n \nExample 1:\n\nInput: nums = [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]\n\nExample 2:\n\nInput: nums = [2,0,1]\nOutput: [0,1,2]\n\n \nConstraints:\n\nn == nums.length\n1 <= n <= 300\nnums[i] is either 0, 1, or 2.\n\n \nFollow up: Could you come up with a one-pass algorithm using only constant extra space?\n",
  "difficulty": "Medium",
  "examples": [
    "[2,0,2,1,1,0]",
    "[2,0,1]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[2,0,2,1,1,0]"
      },
      "expected": "[0,0,1,1,2,2]"
    }
  ],
  "python_starter": "class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        ",
  "hints": [
    "A rather straight forward solution is a two-pass algorithm using counting sort.",
    "Iterate the array counting number of 0's, 1's, and 2's.",
    "Overwrite array with the total number of 0's, then 1's and followed by 2's."
  ],
  "meta_data": {
    "name": "sortColors",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "manual": false
  }
}