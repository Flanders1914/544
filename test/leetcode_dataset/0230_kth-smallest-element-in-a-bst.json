{
  "id": "230",
  "frontend_id": "230",
  "title": "Kth Smallest Element in a BST",
  "description": "Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.\n \nExample 1:\n\n\nInput: root = [3,1,4,null,2], k = 1\nOutput: 1\n\nExample 2:\n\n\nInput: root = [5,3,6,2,4,null,null,1], k = 3\nOutput: 3\n\n \nConstraints:\n\nThe number of nodes in the tree is n.\n1 <= k <= n <= 104\n0 <= Node.val <= 104\n\n \nFollow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?\n",
  "difficulty": "Medium",
  "examples": [
    "[3,1,4,null,2]",
    "1",
    "[5,3,6,2,4,null,null,1]",
    "3"
  ],
  "structured_test_cases": [
    {
      "input": {
        "root": "[3,1,4,null,2]",
        "k": "1"
      },
      "expected": "1"
    }
  ],
  "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:\n        ",
  "hints": [
    "Try to utilize the property of a BST.",
    "Try in-order traversal. (Credits to @chan13)",
    "What if you could modify the BST node's structure?",
    "The optimal runtime complexity is O(height of BST)."
  ],
  "meta_data": {
    "name": "kthSmallest",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}