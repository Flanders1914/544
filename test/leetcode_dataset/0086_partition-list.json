{
  "id": "86",
  "frontend_id": "86",
  "title": "Partition List",
  "description": "Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\nYou should preserve the original relative order of the nodes in each of the two partitions.\n \nExample 1:\n\n\nInput: head = [1,4,3,2,5,2], x = 3\nOutput: [1,2,2,4,3,5]\n\nExample 2:\n\nInput: head = [2,1], x = 2\nOutput: [1,2]\n\n \nConstraints:\n\nThe number of nodes in the list is in the range [0, 200].\n-100 <= Node.val <= 100\n-200 <= x <= 200\n\n",
  "difficulty": "Medium",
  "examples": [
    "[1,4,3,2,5,2]",
    "3",
    "[2,1]",
    "2"
  ],
  "structured_test_cases": [
    {
      "input": {
        "head": "[1,4,3,2,5,2]",
        "x": "3"
      },
      "expected": "[1,2,2,4,3,5]"
    }
  ],
  "python_starter": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "partition",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "x",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    }
  }
}