{
  "id": "621",
  "frontend_id": "621",
  "title": "Task Scheduler",
  "description": "You are given an array of CPU tasks, each labeled with a letter from A to Z, and a number n. Each CPU interval can be idle or allow the completion of one task. Tasks can be completed in any order, but there's a constraint: there has to be a gap of at least n intervals between two tasks with the same label.\nReturn the minimum number of CPU intervals required to complete all tasks.\n \nExample 1:\n\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\nOutput: 8\nExplanation: A possible sequence is: A -> B -> idle -> A -> B -> idle -> A -> B.\nAfter completing task A, you must wait two intervals before doing A again. The same applies to task B. In the 3rd interval, neither A nor B can be done, so you idle. By the 4th interval, you can do A again as 2 intervals have passed.\n\nExample 2:\n\nInput: tasks = [\"A\",\"C\",\"A\",\"B\",\"D\",\"B\"], n = 1\nOutput: 6\nExplanation: A possible sequence is: A -> B -> C -> D -> A -> B.\nWith a cooling interval of 1, you can repeat a task after just one other task.\n\nExample 3:\n\nInput: tasks = [\"A\",\"A\",\"A\", \"B\",\"B\",\"B\"], n = 3\nOutput: 10\nExplanation: A possible sequence is: A -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B.\nThere are only two types of tasks, A and B, which need to be separated by 3 intervals. This leads to idling twice between repetitions of these tasks.\n\n \nConstraints:\n\n1 <= tasks.length <= 104\ntasks[i] is an uppercase English letter.\n0 <= n <= 100\n\n",
  "difficulty": "Medium",
  "examples": [
    "[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]",
    "2",
    "[\"A\",\"C\",\"A\",\"B\",\"D\",\"B\"]",
    "1",
    "[\"A\",\"A\",\"A\", \"B\",\"B\",\"B\"]",
    "3"
  ],
  "structured_test_cases": [
    {
      "input": {
        "tasks": "[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]",
        "n": "2"
      },
      "expected": "8"
    },
    {
      "input": {
        "tasks": "[\"A\",\"C\",\"A\",\"B\",\"D\",\"B\"]",
        "n": "1"
      },
      "expected": "6"
    },
    {
      "input": {
        "tasks": "[\"A\",\"A\",\"A\", \"B\",\"B\",\"B\"]",
        "n": "3"
      },
      "expected": "10"
    }
  ],
  "python_starter": "class Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        ",
  "hints": [
    "There are many different solutions for this problem, including a greedy algorithm.",
    "For every cycle, find the most frequent letter that can be placed in this cycle. After placing, decrease the frequency of that letter by one.",
    "Use Priority Queue."
  ],
  "meta_data": {
    "name": "leastInterval",
    "params": [
      {
        "name": "tasks",
        "type": "character[]"
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}