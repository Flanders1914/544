{
  "id": "150",
  "frontend_id": "150",
  "title": "Evaluate Reverse Polish Notation",
  "description": "You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.\nEvaluate the expression. Return an integer that represents the value of the expression.\nNote that:\n\nThe valid operators are '+', '-', '*', and '/'.\nEach operand may be an integer or another expression.\nThe division between two integers always truncates toward zero.\nThere will not be any division by zero.\nThe input represents a valid arithmetic expression in a reverse polish notation.\nThe answer and all the intermediate calculations can be represented in a 32-bit integer.\n\n \nExample 1:\n\nInput: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\nOutput: 9\nExplanation: ((2 + 1) * 3) = 9\n\nExample 2:\n\nInput: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\nOutput: 6\nExplanation: (4 + (13 / 5)) = 6\n\nExample 3:\n\nInput: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\nOutput: 22\nExplanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n\n \nConstraints:\n\n1 <= tokens.length <= 104\ntokens[i] is either an operator: \"+\", \"-\", \"*\", or \"/\", or an integer in the range [-200, 200].\n\n",
  "difficulty": "Medium",
  "examples": [
    "[\"2\",\"1\",\"+\",\"3\",\"*\"]",
    "[\"4\",\"13\",\"5\",\"/\",\"+\"]",
    "[\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "tokens": "[\"2\",\"1\",\"+\",\"3\",\"*\"]"
      },
      "expected": "9"
    },
    {
      "input": {
        "tokens": "[\"4\",\"13\",\"5\",\"/\",\"+\"]"
      },
      "expected": "6"
    },
    {
      "input": {
        "tokens": "[\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]"
      },
      "expected": "22"
    }
  ],
  "python_starter": "class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "evalRPN",
    "params": [
      {
        "name": "tokens",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}