{
  "id": "62",
  "frontend_id": "62",
  "title": "Unique Paths",
  "description": "There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\nThe test cases are generated so that the answer will be less than or equal to 2 * 109.\n \nExample 1:\n\n\nInput: m = 3, n = 7\nOutput: 28\n\nExample 2:\n\nInput: m = 3, n = 2\nOutput: 3\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Down -> Down\n2. Down -> Down -> Right\n3. Down -> Right -> Down\n\n \nConstraints:\n\n1 <= m, n <= 100\n\n",
  "difficulty": "Medium",
  "examples": [
    "3",
    "7",
    "3",
    "2"
  ],
  "structured_test_cases": [
    {
      "input": {
        "m": "3",
        "n": "7"
      },
      "expected": "28"
    }
  ],
  "python_starter": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "uniquePaths",
    "params": [
      {
        "name": "m",
        "type": "integer"
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}