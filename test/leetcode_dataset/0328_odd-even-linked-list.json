{
  "id": "328",
  "frontend_id": "328",
  "title": "Odd Even Linked List",
  "description": "Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.\nThe first node is considered odd, and the second node is even, and so on.\nNote that the relative order inside both the even and odd groups should remain as it was in the input.\nYou must solve the problem in O(1) extra space complexity and O(n) time complexity.\n \nExample 1:\n\n\nInput: head = [1,2,3,4,5]\nOutput: [1,3,5,2,4]\n\nExample 2:\n\n\nInput: head = [2,1,3,5,6,4,7]\nOutput: [2,3,6,7,1,5,4]\n\n \nConstraints:\n\nThe number of nodes in the linked list is in the range [0, 104].\n-106 <= Node.val <= 106\n\n",
  "difficulty": "Medium",
  "examples": [
    "[1,2,3,4,5]",
    "[2,1,3,5,6,4,7]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "head": "[1,2,3,4,5]"
      },
      "expected": "[1,3,5,2,4]"
    }
  ],
  "python_starter": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "oddEvenList",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    }
  }
}