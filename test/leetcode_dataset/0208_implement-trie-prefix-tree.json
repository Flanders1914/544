{
  "id": "208",
  "frontend_id": "208",
  "title": "Implement Trie (Prefix Tree)",
  "description": "A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\nImplement the Trie class:\n\nTrie() Initializes the trie object.\nvoid insert(String word) Inserts the string word into the trie.\nboolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\nboolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n\n \nExample 1:\n\nInput\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\nOutput\n[null, null, true, false, true, null, true]\n\nExplanation\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True\n\n \nConstraints:\n\n1 <= word.length, prefix.length <= 2000\nword and prefix consist only of lowercase English letters.\nAt most 3 * 104 calls in total will be made to insert, search, and startsWith.\n\n",
  "difficulty": "Medium",
  "examples": [
    "[\"Trie\",\"insert\",\"search\",\"search\",\"startsWith\",\"insert\",\"search\"]",
    "[[],[\"apple\"],[\"apple\"],[\"app\"],[\"app\"],[\"app\"],[\"app\"]]"
  ],
  "structured_test_cases": [],
  "python_starter": "class Trie:\n\n    def __init__(self):\n        \n\n    def insert(self, word: str) -> None:\n        \n\n    def search(self, word: str) -> bool:\n        \n\n    def startsWith(self, prefix: str) -> bool:\n        \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)",
  "hints": [],
  "meta_data": {
    "classname": "Trie",
    "constructor": {
      "params": []
    },
    "methods": [
      {
        "params": [
          {
            "type": "string",
            "name": "word"
          }
        ],
        "name": "insert",
        "return": {
          "type": "void"
        }
      },
      {
        "params": [
          {
            "type": "string",
            "name": "word"
          }
        ],
        "name": "search",
        "return": {
          "type": "boolean"
        }
      },
      {
        "params": [
          {
            "type": "string",
            "name": "prefix"
          }
        ],
        "name": "startsWith",
        "return": {
          "type": "boolean"
        }
      }
    ],
    "return": {
      "type": "boolean"
    },
    "systemdesign": true
  }
}