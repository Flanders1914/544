{
  "id": "115",
  "frontend_id": "115",
  "title": "Distinct Subsequences",
  "description": "Given two strings s and t, return the number of distinct subsequences of s which equals t.\nThe test cases are generated so that the answer fits on a 32-bit signed integer.\n \nExample 1:\n\nInput: s = \"rabbbit\", t = \"rabbit\"\nOutput: 3\nExplanation:\nAs shown below, there are 3 ways you can generate \"rabbit\" from s.\nrabbbit\nrabbbit\nrabbbit\n\nExample 2:\n\nInput: s = \"babgbag\", t = \"bag\"\nOutput: 5\nExplanation:\nAs shown below, there are 5 ways you can generate \"bag\" from s.\nbabgbag\nbabgbag\nbabgbag\nbabgbag\nbabgbag\n \nConstraints:\n\n1 <= s.length, t.length <= 1000\ns and t consist of English letters.\n\n",
  "difficulty": "Hard",
  "examples": [
    "\"rabbbit\"",
    "\"rabbit\"",
    "\"babgbag\"",
    "\"bag\""
  ],
  "structured_test_cases": [
    {
      "input": {
        "s": "\"rabbbit\"",
        "t": "\"rabbit\""
      },
      "expected": "3"
    },
    {
      "input": {
        "s": "\"babgbag\"",
        "t": "\"bag\""
      },
      "expected": "5"
    }
  ],
  "python_starter": "class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "numDistinct",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "t",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}