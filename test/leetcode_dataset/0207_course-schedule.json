{
  "id": "207",
  "frontend_id": "207",
  "title": "Course Schedule",
  "description": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n\nFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\n\nReturn true if you can finish all courses. Otherwise, return false.\n \nExample 1:\n\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: true\nExplanation: There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0. So it is possible.\n\nExample 2:\n\nInput: numCourses = 2, prerequisites = [[1,0],[0,1]]\nOutput: false\nExplanation: There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n\n \nConstraints:\n\n1 <= numCourses <= 2000\n0 <= prerequisites.length <= 5000\nprerequisites[i].length == 2\n0 <= ai, bi < numCourses\nAll the pairs prerequisites[i] are unique.\n\n",
  "difficulty": "Medium",
  "examples": [
    "2",
    "[[1,0]]",
    "2",
    "[[1,0],[0,1]]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "numCourses": "2",
        "prerequisites": "[[1,0]"
      },
      "expected": "true"
    },
    {
      "input": {
        "numCourses": "2",
        "prerequisites": "[[1,0]"
      },
      "expected": "false"
    }
  ],
  "python_starter": "class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        ",
  "hints": [
    "This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.",
    "<a href=\"https://www.cs.princeton.edu/~wayne/kleinberg-tardos/pdf/03Graphs.pdf\" target=\"_blank\">Topological Sort via DFS</a> - A great tutorial explaining the basic concepts of Topological Sort.",
    "Topological sort could also be done via <a href=\"http://en.wikipedia.org/wiki/Topological_sorting#Algorithms\" target=\"_blank\">BFS</a>."
  ],
  "meta_data": {
    "name": "canFinish",
    "params": [
      {
        "name": "numCourses",
        "type": "integer"
      },
      {
        "name": "prerequisites",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "boolean"
    }
  }
}