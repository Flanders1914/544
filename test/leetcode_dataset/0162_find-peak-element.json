{
  "id": "162",
  "frontend_id": "162",
  "title": "Find Peak Element",
  "description": "A peak element is an element that is strictly greater than its neighbors.\nGiven a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\nYou may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.\nYou must write an algorithm that runs in O(log n) time.\n \nExample 1:\n\nInput: nums = [1,2,3,1]\nOutput: 2\nExplanation: 3 is a peak element and your function should return the index number 2.\nExample 2:\n\nInput: nums = [1,2,1,3,5,6,4]\nOutput: 5\nExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\n \nConstraints:\n\n1 <= nums.length <= 1000\n-231 <= nums[i] <= 231 - 1\nnums[i] != nums[i + 1] for all valid i.\n\n",
  "difficulty": "Medium",
  "examples": [
    "[1,2,3,1]",
    "[1,2,1,3,5,6,4]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[1,2,3,1]"
      },
      "expected": "2"
    },
    {
      "input": {
        "nums": "[1,2,1,3,5,6,4]"
      },
      "expected": "5"
    }
  ],
  "python_starter": "class Solution:\n    def findPeakElement(self, nums: List[int]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "findPeakElement",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}