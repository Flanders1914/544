{
  "id": "581",
  "frontend_id": "581",
  "title": "Shortest Unsorted Continuous Subarray",
  "description": "Given an integer array nums, you need to find one continuous subarray such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order.\nReturn the shortest such subarray and output its length.\n \nExample 1:\n\nInput: nums = [2,6,4,8,10,9,15]\nOutput: 5\nExplanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.\n\nExample 2:\n\nInput: nums = [1,2,3,4]\nOutput: 0\n\nExample 3:\n\nInput: nums = [1]\nOutput: 0\n\n \nConstraints:\n\n1 <= nums.length <= 104\n-105 <= nums[i] <= 105\n\n \nFollow up: Can you solve it in O(n) time complexity?",
  "difficulty": "Medium",
  "examples": [
    "[2,6,4,8,10,9,15]",
    "[1,2,3,4]",
    "[1]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[2,6,4,8,10,9,15]"
      },
      "expected": "5"
    },
    {
      "input": {
        "nums": "[1,2,3,4]"
      },
      "expected": "0"
    }
  ],
  "python_starter": "class Solution:\n    def findUnsortedSubarray(self, nums: List[int]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "findUnsortedSubarray",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}