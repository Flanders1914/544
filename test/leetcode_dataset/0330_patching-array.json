{
  "id": "330",
  "frontend_id": "330",
  "title": "Patching Array",
  "description": "Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.\nReturn the minimum number of patches required.\n \nExample 1:\n\nInput: nums = [1,3], n = 6\nOutput: 1\nExplanation:\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\nSo we only need 1 patch.\n\nExample 2:\n\nInput: nums = [1,5,10], n = 20\nOutput: 2\nExplanation: The two patches can be [2, 4].\n\nExample 3:\n\nInput: nums = [1,2,2], n = 5\nOutput: 0\n\n \nConstraints:\n\n1 <= nums.length <= 1000\n1 <= nums[i] <= 104\nnums is sorted in ascending order.\n1 <= n <= 231 - 1\n\n",
  "difficulty": "Hard",
  "examples": [
    "[1,3]",
    "6",
    "[1,5,10]",
    "20",
    "[1,2,2]",
    "5"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[1,3]",
        "n": "6"
      },
      "expected": "1"
    },
    {
      "input": {
        "nums": "[1,5,10]",
        "n": "20"
      },
      "expected": "2"
    },
    {
      "input": {
        "nums": "[1,2,2]",
        "n": "5"
      },
      "expected": "0"
    }
  ],
  "python_starter": "class Solution:\n    def minPatches(self, nums: List[int], n: int) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "minPatches",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}