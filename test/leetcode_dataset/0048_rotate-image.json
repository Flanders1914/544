{
  "id": "48",
  "frontend_id": "48",
  "title": "Rotate Image",
  "description": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n \nExample 1:\n\n\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n\nExample 2:\n\n\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n\n \nConstraints:\n\nn == matrix.length == matrix[i].length\n1 <= n <= 20\n-1000 <= matrix[i][j] <= 1000\n\n",
  "difficulty": "Medium",
  "examples": [
    "[[1,2,3],[4,5,6],[7,8,9]]",
    "[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "matrix": "[[1,2,3]"
      },
      "expected": "[[7,4,1]"
    }
  ],
  "python_starter": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        ",
  "hints": [],
  "meta_data": {
    "name": "rotate",
    "params": [
      {
        "name": "matrix",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    }
  }
}