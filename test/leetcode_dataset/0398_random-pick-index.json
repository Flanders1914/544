{
  "id": "398",
  "frontend_id": "398",
  "title": "Random Pick Index",
  "description": "Given an integer array nums with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.\nImplement the Solution class:\n\nSolution(int[] nums) Initializes the object with the array nums.\nint pick(int target) Picks a random index i from nums where nums[i] == target. If there are multiple valid i's, then each index should have an equal probability of returning.\n\n \nExample 1:\n\nInput\n[\"Solution\", \"pick\", \"pick\", \"pick\"]\n[[[1, 2, 3, 3, 3]], [3], [1], [3]]\nOutput\n[null, 4, 0, 2]\n\nExplanation\nSolution solution = new Solution([1, 2, 3, 3, 3]);\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\nsolution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n\n \nConstraints:\n\n1 <= nums.length <= 2 * 104\n-231 <= nums[i] <= 231 - 1\ntarget is an integer from nums.\nAt most 104 calls will be made to pick.\n\n",
  "difficulty": "Medium",
  "examples": [
    "[\"Solution\",\"pick\",\"pick\",\"pick\"]",
    "[[[1,2,3,3,3]],[3],[1],[3]]"
  ],
  "structured_test_cases": [],
  "python_starter": "class Solution:\n\n    def __init__(self, nums: List[int]):\n        \n\n    def pick(self, target: int) -> int:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(nums)\n# param_1 = obj.pick(target)",
  "hints": [],
  "meta_data": {
    "classname": "Solution",
    "constructor": {
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "type": "integer",
          "name": "numsSize",
          "lang": "c",
          "value": "size_1"
        }
      ]
    },
    "methods": [
      {
        "name": "pick",
        "params": [
          {
            "name": "target",
            "type": "integer"
          }
        ],
        "return": {
          "type": "integer"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    }
  }
}