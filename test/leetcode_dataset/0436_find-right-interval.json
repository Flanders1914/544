{
  "id": "436",
  "frontend_id": "436",
  "title": "Find Right Interval",
  "description": "You are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique.\nThe right interval for an interval i is an interval j such that startj >= endi and startj is minimized. Note that i may equal j.\nReturn an array of right interval indices for each interval i. If no right interval exists for interval i, then put -1 at index i.\n \nExample 1:\n\nInput: intervals = [[1,2]]\nOutput: [-1]\nExplanation: There is only one interval in the collection, so it outputs -1.\n\nExample 2:\n\nInput: intervals = [[3,4],[2,3],[1,2]]\nOutput: [-1,0,1]\nExplanation: There is no right interval for [3,4].\nThe right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.\nThe right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2.\n\nExample 3:\n\nInput: intervals = [[1,4],[2,3],[3,4]]\nOutput: [-1,2,-1]\nExplanation: There is no right interval for [1,4] and [3,4].\nThe right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3.\n\n \nConstraints:\n\n1 <= intervals.length <= 2 * 104\nintervals[i].length == 2\n-106 <= starti <= endi <= 106\nThe start point of each interval is unique.\n\n",
  "difficulty": "Medium",
  "examples": [
    "[[1,2]]",
    "[[3,4],[2,3],[1,2]]",
    "[[1,4],[2,3],[3,4]]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "intervals": "[[1,2]"
      },
      "expected": "[-1]"
    },
    {
      "input": {
        "intervals": "[[3,4]"
      },
      "expected": "[-1,0,1]"
    },
    {
      "input": {
        "intervals": "[[1,4]"
      },
      "expected": "[-1,2,-1]"
    }
  ],
  "python_starter": "class Solution:\n    def findRightInterval(self, intervals: List[List[int]]) -> List[int]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "findRightInterval",
    "params": [
      {
        "name": "intervals",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer[]"
    }
  }
}