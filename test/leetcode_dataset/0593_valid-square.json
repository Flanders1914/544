{
  "id": "593",
  "frontend_id": "593",
  "title": "Valid Square",
  "description": "Given the coordinates of four points in 2D space p1, p2, p3 and p4, return true if the four points construct a square.\nThe coordinate of a point pi is represented as [xi, yi]. The input is not given in any order.\nA valid square has four equal sides with positive length and four equal angles (90-degree angles).\n \nExample 1:\n\nInput: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\nOutput: true\n\nExample 2:\n\nInput: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]\nOutput: false\n\nExample 3:\n\nInput: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]\nOutput: true\n\n \nConstraints:\n\np1.length == p2.length == p3.length == p4.length == 2\n-104 <= xi, yi <= 104\n\n",
  "difficulty": "Medium",
  "examples": [
    "[0,0]",
    "[1,1]",
    "[1,0]",
    "[0,1]",
    "[0,0]",
    "[1,1]",
    "[1,0]",
    "[0,12]",
    "[1,0]",
    "[-1,0]",
    "[0,1]",
    "[0,-1]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "p1": "[0,0]",
        "p2": "[1,1]",
        "p3": "[1,0]",
        "p4": "[0,1]"
      },
      "expected": "true"
    }
  ],
  "python_starter": "class Solution:\n    def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:\n        ",
  "hints": [],
  "meta_data": {
    "name": "validSquare",
    "params": [
      {
        "name": "p1",
        "type": "integer[]"
      },
      {
        "name": "p2",
        "type": "integer[]"
      },
      {
        "name": "p3",
        "type": "integer[]"
      },
      {
        "name": "p4",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "boolean"
    }
  }
}