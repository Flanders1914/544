{
  "id": "126",
  "frontend_id": "126",
  "title": "Word Ladder II",
  "description": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\n\nEvery adjacent pair of words differs by a single letter.\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\nsk == endWord\n\nGiven two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].\n \nExample 1:\n\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\nExplanation: There are 2 shortest transformation sequences:\n\"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n\"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"\n\nExample 2:\n\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nOutput: []\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n\n \nConstraints:\n\n1 <= beginWord.length <= 5\nendWord.length == beginWord.length\n1 <= wordList.length <= 500\nwordList[i].length == beginWord.length\nbeginWord, endWord, and wordList[i] consist of lowercase English letters.\nbeginWord != endWord\nAll the words in wordList are unique.\nThe sum of all shortest transformation sequences does not exceed 105.\n\n",
  "difficulty": "Hard",
  "examples": [
    "\"hit\"",
    "\"cog\"",
    "[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
    "\"hit\"",
    "\"cog\"",
    "[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "beginWord": "\"hit\"",
        "endWord": "\"cog\"",
        "wordList": "[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]"
      },
      "expected": "[[hit,hot,dot,dog,cog]"
    },
    {
      "input": {
        "beginWord": "\"hit\"",
        "endWord": "\"cog\"",
        "wordList": "[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]"
      },
      "expected": "[]"
    }
  ],
  "python_starter": "class Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "findLadders",
    "params": [
      {
        "name": "beginWord",
        "type": "string"
      },
      {
        "name": "endWord",
        "type": "string"
      },
      {
        "name": "wordList",
        "type": "list<string>"
      }
    ],
    "return": {
      "type": "list<list<string>>"
    }
  }
}