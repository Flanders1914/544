{
  "id": "338",
  "frontend_id": "338",
  "title": "Counting Bits",
  "description": "Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.\n \nExample 1:\n\nInput: n = 2\nOutput: [0,1,1]\nExplanation:\n0 --> 0\n1 --> 1\n2 --> 10\n\nExample 2:\n\nInput: n = 5\nOutput: [0,1,1,2,1,2]\nExplanation:\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101\n\n \nConstraints:\n\n0 <= n <= 105\n\n \nFollow up:\n\nIt is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass?\nCan you do it without using any built-in function (i.e., like __builtin_popcount in C++)?\n\n",
  "difficulty": "Easy",
  "examples": [
    "2",
    "5"
  ],
  "structured_test_cases": [
    {
      "input": {
        "n": "2"
      },
      "expected": "[0,1,1]"
    },
    {
      "input": {
        "n": "5"
      },
      "expected": "[0,1,1,2,1,2]"
    }
  ],
  "python_starter": "class Solution:\n    def countBits(self, n: int) -> List[int]:\n        ",
  "hints": [
    "You should make use of what you have produced already.",
    "Divide the numbers in ranges like [2-3], [4-7], [8-15] and so on. And try to generate new range from previous.",
    "Or does the odd/even status of the number help you in calculating the number of 1s?"
  ],
  "meta_data": {
    "name": "countBits",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[]"
    }
  }
}