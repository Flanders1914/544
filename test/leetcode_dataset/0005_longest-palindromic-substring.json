{
  "id": "5",
  "frontend_id": "5",
  "title": "Longest Palindromic Substring",
  "description": "Given a string s, return the longest palindromic substring in s.\n \nExample 1:\n\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\n\nExample 2:\n\nInput: s = \"cbbd\"\nOutput: \"bb\"\n\n \nConstraints:\n\n1 <= s.length <= 1000\ns consist of only digits and English letters.\n\n",
  "difficulty": "Medium",
  "examples": [
    "\"babad\"",
    "\"cbbd\""
  ],
  "structured_test_cases": [
    {
      "input": {
        "s": "\"babad\""
      },
      "expected": "bab"
    },
    {
      "input": {
        "s": "\"cbbd\""
      },
      "expected": "bb"
    }
  ],
  "python_starter": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        ",
  "hints": [
    "How can we reuse a previously computed palindrome to compute a larger palindrome?",
    "If “aba” is a palindrome, is “xabax” a palindrome? Similarly is “xabay” a palindrome?",
    "Complexity based hint:</br>\r\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation."
  ],
  "meta_data": {
    "name": "longestPalindrome",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    }
  }
}