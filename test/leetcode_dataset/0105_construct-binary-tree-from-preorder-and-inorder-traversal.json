{
  "id": "105",
  "frontend_id": "105",
  "title": "Construct Binary Tree from Preorder and Inorder Traversal",
  "description": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\n \nExample 1:\n\n\nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n\nExample 2:\n\nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]\n\n \nConstraints:\n\n1 <= preorder.length <= 3000\ninorder.length == preorder.length\n-3000 <= preorder[i], inorder[i] <= 3000\npreorder and inorder consist of unique values.\nEach value of inorder also appears in preorder.\npreorder is guaranteed to be the preorder traversal of the tree.\ninorder is guaranteed to be the inorder traversal of the tree.\n\n",
  "difficulty": "Medium",
  "examples": [
    "[3,9,20,15,7]",
    "[9,3,15,20,7]",
    "[-1]",
    "[-1]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "preorder": "[3,9,20,15,7]",
        "inorder": "[9,3,15,20,7]"
      },
      "expected": "[3,9,20,null,null,15,7]"
    }
  ],
  "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "buildTree",
    "params": [
      {
        "name": "preorder",
        "type": "integer[]"
      },
      {
        "name": "inorder",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "TreeNode",
      "dealloc": true
    }
  }
}