{
  "id": "41",
  "frontend_id": "41",
  "title": "First Missing Positive",
  "description": "Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.\nYou must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.\n \nExample 1:\n\nInput: nums = [1,2,0]\nOutput: 3\nExplanation: The numbers in the range [1,2] are all in the array.\n\nExample 2:\n\nInput: nums = [3,4,-1,1]\nOutput: 2\nExplanation: 1 is in the array but 2 is missing.\n\nExample 3:\n\nInput: nums = [7,8,9,11,12]\nOutput: 1\nExplanation: The smallest positive integer 1 is missing.\n\n \nConstraints:\n\n1 <= nums.length <= 105\n-231 <= nums[i] <= 231 - 1\n\n",
  "difficulty": "Hard",
  "examples": [
    "[1,2,0]",
    "[3,4,-1,1]",
    "[7,8,9,11,12]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[1,2,0]"
      },
      "expected": "3"
    },
    {
      "input": {
        "nums": "[3,4,-1,1]"
      },
      "expected": "2"
    },
    {
      "input": {
        "nums": "[7,8,9,11,12]"
      },
      "expected": "1"
    }
  ],
  "python_starter": "class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        ",
  "hints": [
    "Think about how you would solve the problem in non-constant space.  Can you apply that logic to the existing space?",
    "We don't care about duplicates or non-positive integers",
    "Remember that O(2n) = O(n)"
  ],
  "meta_data": {
    "name": "firstMissingPositive",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}