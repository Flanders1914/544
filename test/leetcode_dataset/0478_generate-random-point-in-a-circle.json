{
  "id": "915",
  "frontend_id": "478",
  "title": "Generate Random Point in a Circle",
  "description": "Given the radius and the position of the center of a circle, implement the function randPoint which generates a uniform random point inside the circle.\nImplement the Solution class:\n\nSolution(double radius, double x_center, double y_center) initializes the object with the radius of the circle radius and the position of the center (x_center, y_center).\nrandPoint() returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array [x, y].\n\n \nExample 1:\n\nInput\n[\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]\n[[1.0, 0.0, 0.0], [], [], []]\nOutput\n[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]\n\nExplanation\nSolution solution = new Solution(1.0, 0.0, 0.0);\nsolution.randPoint(); // return [-0.02493, -0.38077]\nsolution.randPoint(); // return [0.82314, 0.38945]\nsolution.randPoint(); // return [0.36572, 0.17248]\n\n \nConstraints:\n\n0 < radius <= 108\n-107 <= x_center, y_center <= 107\nAt most 3 * 104 calls will be made to randPoint.\n\n",
  "difficulty": "Medium",
  "examples": [
    "[\"Solution\",\"randPoint\",\"randPoint\",\"randPoint\"]",
    "[[1.0,0.0,0.0],[],[],[]]"
  ],
  "structured_test_cases": [],
  "python_starter": "class Solution:\n\n    def __init__(self, radius: float, x_center: float, y_center: float):\n        \n\n    def randPoint(self) -> List[float]:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(radius, x_center, y_center)\n# param_1 = obj.randPoint()",
  "hints": [],
  "meta_data": {
    "classname": "Solution",
    "maxbytesperline": 200000,
    "constructor": {
      "params": [
        {
          "name": "radius",
          "type": "double"
        },
        {
          "name": "x_center",
          "type": "double"
        },
        {
          "name": "y_center",
          "type": "double"
        }
      ]
    },
    "methods": [
      {
        "name": "randPoint",
        "params": [],
        "return": {
          "type": "double[]"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    }
  }
}