{
  "id": "224",
  "frontend_id": "224",
  "title": "Basic Calculator",
  "description": "Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\n \nExample 1:\n\nInput: s = \"1 + 1\"\nOutput: 2\n\nExample 2:\n\nInput: s = \" 2-1 + 2 \"\nOutput: 3\n\nExample 3:\n\nInput: s = \"(1+(4+5+2)-3)+(6+8)\"\nOutput: 23\n\n \nConstraints:\n\n1 <= s.length <= 3 * 105\ns consists of digits, '+', '-', '(', ')', and ' '.\ns represents a valid expression.\n'+' is not used as a unary operation (i.e., \"+1\" and \"+(2 + 3)\" is invalid).\n'-' could be used as a unary operation (i.e., \"-1\" and \"-(2 + 3)\" is valid).\nThere will be no two consecutive operators in the input.\nEvery number and running calculation will fit in a signed 32-bit integer.\n\n",
  "difficulty": "Hard",
  "examples": [
    "\"1 + 1\"",
    "\" 2-1 + 2 \"",
    "\"(1+(4+5+2)-3)+(6+8)\""
  ],
  "structured_test_cases": [
    {
      "input": {
        "s": "\"1 + 1\""
      },
      "expected": "2"
    }
  ],
  "python_starter": "class Solution:\n    def calculate(self, s: str) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "calculate",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}