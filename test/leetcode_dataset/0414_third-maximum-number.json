{
  "id": "414",
  "frontend_id": "414",
  "title": "Third Maximum Number",
  "description": "Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.\n \nExample 1:\n\nInput: nums = [3,2,1]\nOutput: 1\nExplanation:\nThe first distinct maximum is 3.\nThe second distinct maximum is 2.\nThe third distinct maximum is 1.\n\nExample 2:\n\nInput: nums = [1,2]\nOutput: 2\nExplanation:\nThe first distinct maximum is 2.\nThe second distinct maximum is 1.\nThe third distinct maximum does not exist, so the maximum (2) is returned instead.\n\nExample 3:\n\nInput: nums = [2,2,3,1]\nOutput: 1\nExplanation:\nThe first distinct maximum is 3.\nThe second distinct maximum is 2 (both 2's are counted together since they have the same value).\nThe third distinct maximum is 1.\n\n \nConstraints:\n\n1 <= nums.length <= 104\n-231 <= nums[i] <= 231 - 1\n\n \nFollow up: Can you find an O(n) solution?",
  "difficulty": "Easy",
  "examples": [
    "[3,2,1]",
    "[1,2]",
    "[2,2,3,1]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[3,2,1]"
      },
      "expected": "1"
    },
    {
      "input": {
        "nums": "[1,2]"
      },
      "expected": "2"
    },
    {
      "input": {
        "nums": "[2,2,3,1]"
      },
      "expected": "1"
    }
  ],
  "python_starter": "class Solution:\n    def thirdMax(self, nums: List[int]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "thirdMax",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}