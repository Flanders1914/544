{
  "id": "97",
  "frontend_id": "97",
  "title": "Interleaving String",
  "description": "Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\nAn interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\n\ns = s1 + s2 + ... + sn\nt = t1 + t2 + ... + tm\n|n - m| <= 1\nThe interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\n\nNote: a + b is the concatenation of strings a and b.\n \nExample 1:\n\n\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\nOutput: true\nExplanation: One way to obtain s3 is:\nSplit s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\nInterleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\nSince s3 can be obtained by interleaving s1 and s2, we return true.\n\nExample 2:\n\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\nOutput: false\nExplanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.\n\nExample 3:\n\nInput: s1 = \"\", s2 = \"\", s3 = \"\"\nOutput: true\n\n \nConstraints:\n\n0 <= s1.length, s2.length <= 100\n0 <= s3.length <= 200\ns1, s2, and s3 consist of lowercase English letters.\n\n \nFollow up: Could you solve it using only O(s2.length) additional memory space?\n",
  "difficulty": "Medium",
  "examples": [
    "\"aabcc\"",
    "\"dbbca\"",
    "\"aadbbcbcac\"",
    "\"aabcc\"",
    "\"dbbca\"",
    "\"aadbbbaccc\"",
    "\"\"",
    "\"\"",
    "\"\""
  ],
  "structured_test_cases": [
    {
      "input": {
        "s1": "\"aabcc\"",
        "s2": "\"dbbca\"",
        "s3": "\"aadbbcbcac\""
      },
      "expected": "true"
    },
    {
      "input": {
        "s1": "\"aabcc\"",
        "s2": "\"dbbca\"",
        "s3": "\"aadbbbaccc\""
      },
      "expected": "false"
    },
    {
      "input": {
        "s1": "\"\"",
        "s2": "\"\"",
        "s3": "\"\""
      },
      "expected": "true"
    }
  ],
  "python_starter": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        ",
  "hints": [],
  "meta_data": {
    "name": "isInterleave",
    "params": [
      {
        "name": "s1",
        "type": "string"
      },
      {
        "name": "s2",
        "type": "string"
      },
      {
        "name": "s3",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    }
  }
}