{
  "id": "493",
  "frontend_id": "493",
  "title": "Reverse Pairs",
  "description": "Given an integer array nums, return the number of reverse pairs in the array.\nA reverse pair is a pair (i, j) where:\n\n0 <= i < j < nums.length and\nnums[i] > 2 * nums[j].\n\n \nExample 1:\n\nInput: nums = [1,3,2,3,1]\nOutput: 2\nExplanation: The reverse pairs are:\n(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1\n(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1\n\nExample 2:\n\nInput: nums = [2,4,3,5,1]\nOutput: 3\nExplanation: The reverse pairs are:\n(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1\n(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1\n(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1\n\n \nConstraints:\n\n1 <= nums.length <= 5 * 104\n-231 <= nums[i] <= 231 - 1\n\n",
  "difficulty": "Hard",
  "examples": [
    "[1,3,2,3,1]",
    "[2,4,3,5,1]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[1,3,2,3,1]"
      },
      "expected": "2"
    },
    {
      "input": {
        "nums": "[2,4,3,5,1]"
      },
      "expected": "3"
    }
  ],
  "python_starter": "class Solution:\n    def reversePairs(self, nums: List[int]) -> int:\n        ",
  "hints": [
    "Use the merge-sort technique.",
    "Divide the array into two parts and sort them.",
    "For each integer in the first part, count the number of integers that satisfy the condition from the second part. Use the pointer to help you in the counting process."
  ],
  "meta_data": {
    "name": "reversePairs",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}