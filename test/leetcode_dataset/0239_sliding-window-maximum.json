{
  "id": "239",
  "frontend_id": "239",
  "title": "Sliding Window Maximum",
  "description": "You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\nReturn the max sliding window.\n \nExample 1:\n\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n\nExample 2:\n\nInput: nums = [1], k = 1\nOutput: [1]\n\n \nConstraints:\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n1 <= k <= nums.length\n\n",
  "difficulty": "Hard",
  "examples": [
    "[1,3,-1,-3,5,3,6,7]",
    "3",
    "[1]",
    "1"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[1,3,-1,-3,5,3,6,7]",
        "k": "3"
      },
      "expected": "[3,3,5,5,6,7]"
    },
    {
      "input": {
        "nums": "[1]",
        "k": "1"
      },
      "expected": "[1]"
    }
  ],
  "python_starter": "class Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        ",
  "hints": [
    "How about using a data structure such as deque (double-ended queue)?",
    "The queue size need not be the same as the window’s size.",
    "Remove redundant elements and the queue should store only elements that need to be considered."
  ],
  "meta_data": {
    "name": "maxSlidingWindow",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[]"
    }
  }
}