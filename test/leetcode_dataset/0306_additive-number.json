{
  "id": "306",
  "frontend_id": "306",
  "title": "Additive Number",
  "description": "An additive number is a string whose digits can form an additive sequence.\nA valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.\nGiven a string containing only digits, return true if it is an additive number or false otherwise.\nNote: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.\n \nExample 1:\n\nInput: \"112358\"\nOutput: true\nExplanation: \nThe digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n\nExample 2:\n\nInput: \"199100199\"\nOutput: true\nExplanation: \nThe additive sequence is: 1, 99, 100, 199. \n1 + 99 = 100, 99 + 100 = 199\n\n \nConstraints:\n\n1 <= num.length <= 35\nnum consists only of digits.\n\n \nFollow up: How would you handle overflow for very large input integers?\n",
  "difficulty": "Medium",
  "examples": [
    "\"112358\"",
    "\"199100199\""
  ],
  "structured_test_cases": [
    {
      "input": {
        "param0": "\"112358\""
      },
      "expected": "true"
    },
    {
      "input": {
        "param0": "\"199100199\""
      },
      "expected": "true"
    }
  ],
  "python_starter": "class Solution:\n    def isAdditiveNumber(self, num: str) -> bool:\n        ",
  "hints": [],
  "meta_data": {
    "name": "isAdditiveNumber",
    "params": [
      {
        "name": "num",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    }
  }
}