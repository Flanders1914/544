{
  "id": "199",
  "frontend_id": "199",
  "title": "Binary Tree Right Side View",
  "description": "Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\n \nExample 1:\n\nInput: root = [1,2,3,null,5,null,4]\nOutput: [1,3,4]\nExplanation:\n\n\nExample 2:\n\nInput: root = [1,2,3,4,null,null,null,5]\nOutput: [1,3,4,5]\nExplanation:\n\n\nExample 3:\n\nInput: root = [1,null,3]\nOutput: [1,3]\n\nExample 4:\n\nInput: root = []\nOutput: []\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\n\n",
  "difficulty": "Medium",
  "examples": [
    "[1,2,3,null,5,null,4]",
    "[1,2,3,4,null,null,null,5]",
    "[1,null,3]",
    "[]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "root": "[1,2,3,null,5,null,4]"
      },
      "expected": "[1,3,4]"
    },
    {
      "input": {
        "root": "[1,2,3,4,null,null,null,5]"
      },
      "expected": "[1,3,4,5]"
    },
    {
      "input": {
        "root": "[1,null,3]"
      },
      "expected": "[1,3]"
    }
  ],
  "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "rightSideView",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<integer>",
      "dealloc": true
    }
  }
}