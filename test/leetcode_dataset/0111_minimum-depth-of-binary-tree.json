{
  "id": "111",
  "frontend_id": "111",
  "title": "Minimum Depth of Binary Tree",
  "description": "Given a binary tree, find its minimum depth.\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\nNote: A leaf is a node with no children.\n \nExample 1:\n\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: 2\n\nExample 2:\n\nInput: root = [2,null,3,null,4,null,5,null,6]\nOutput: 5\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 105].\n-1000 <= Node.val <= 1000\n\n",
  "difficulty": "Easy",
  "examples": [
    "[3,9,20,null,null,15,7]",
    "[2,null,3,null,4,null,5,null,6]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "root": "[3,9,20,null,null,15,7]"
      },
      "expected": "2"
    }
  ],
  "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "minDepth",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}