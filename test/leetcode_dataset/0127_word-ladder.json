{
  "id": "127",
  "frontend_id": "127",
  "title": "Word Ladder",
  "description": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\n\nEvery adjacent pair of words differs by a single letter.\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\nsk == endWord\n\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\n \nExample 1:\n\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: 5\nExplanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.\n\nExample 2:\n\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nOutput: 0\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n\n \nConstraints:\n\n1 <= beginWord.length <= 10\nendWord.length == beginWord.length\n1 <= wordList.length <= 5000\nwordList[i].length == beginWord.length\nbeginWord, endWord, and wordList[i] consist of lowercase English letters.\nbeginWord != endWord\nAll the words in wordList are unique.\n\n",
  "difficulty": "Hard",
  "examples": [
    "\"hit\"",
    "\"cog\"",
    "[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
    "\"hit\"",
    "\"cog\"",
    "[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "beginWord": "\"hit\"",
        "endWord": "\"cog\"",
        "wordList": "[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]"
      },
      "expected": "5"
    },
    {
      "input": {
        "beginWord": "\"hit\"",
        "endWord": "\"cog\"",
        "wordList": "[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]"
      },
      "expected": "0"
    }
  ],
  "python_starter": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "ladderLength",
    "params": [
      {
        "name": "beginWord",
        "type": "string"
      },
      {
        "name": "endWord",
        "type": "string"
      },
      {
        "name": "wordList",
        "type": "list<string>"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}