{
  "id": "216",
  "frontend_id": "216",
  "title": "Combination Sum III",
  "description": "Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\n\nOnly numbers 1 through 9 are used.\nEach number is used at most once.\n\nReturn a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.\n \nExample 1:\n\nInput: k = 3, n = 7\nOutput: [[1,2,4]]\nExplanation:\n1 + 2 + 4 = 7\nThere are no other valid combinations.\nExample 2:\n\nInput: k = 3, n = 9\nOutput: [[1,2,6],[1,3,5],[2,3,4]]\nExplanation:\n1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations.\n\nExample 3:\n\nInput: k = 4, n = 1\nOutput: []\nExplanation: There are no valid combinations.\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.\n\n \nConstraints:\n\n2 <= k <= 9\n1 <= n <= 60\n\n",
  "difficulty": "Medium",
  "examples": [
    "3",
    "7",
    "3",
    "9",
    "4",
    "1"
  ],
  "structured_test_cases": [
    {
      "input": {
        "k": "3",
        "n": "7"
      },
      "expected": "[[1,2,4]"
    },
    {
      "input": {
        "k": "3",
        "n": "9"
      },
      "expected": "[[1,2,6]"
    },
    {
      "input": {
        "k": "4",
        "n": "1"
      },
      "expected": "[]"
    }
  ],
  "python_starter": "class Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "combinationSum3",
    "params": [
      {
        "name": "k",
        "type": "integer"
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    }
  }
}