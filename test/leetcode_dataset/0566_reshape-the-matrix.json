{
  "id": "566",
  "frontend_id": "566",
  "title": "Reshape the Matrix",
  "description": "In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.\nYou are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix.\nThe reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.\nIf the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.\n \nExample 1:\n\n\nInput: mat = [[1,2],[3,4]], r = 1, c = 4\nOutput: [[1,2,3,4]]\n\nExample 2:\n\n\nInput: mat = [[1,2],[3,4]], r = 2, c = 4\nOutput: [[1,2],[3,4]]\n\n \nConstraints:\n\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 100\n-1000 <= mat[i][j] <= 1000\n1 <= r, c <= 300\n\n",
  "difficulty": "Easy",
  "examples": [
    "[[1,2],[3,4]]",
    "1",
    "4",
    "[[1,2],[3,4]]",
    "2",
    "4"
  ],
  "structured_test_cases": [
    {
      "input": {
        "mat": "[[1,2]",
        "r": "1",
        "c": "4"
      },
      "expected": "[[1,2,3,4]"
    }
  ],
  "python_starter": "class Solution:\n    def matrixReshape(self, mat: List[List[int]], r: int, c: int) -> List[List[int]]:\n        ",
  "hints": [
    "Do you know how 2d matrix is stored in 1d memory? Try to map 2-dimensions into one.",
    "M[i][j]=M[n*i+j] , where n is the number of cols. \r\nThis is the one way of converting 2-d indices into one 1-d index.  \r\nNow, how will you convert 1-d index into 2-d indices?",
    "Try to use division and modulus to convert 1-d index into 2-d indices.",
    "M[i] =>  M[i/n][i%n] Will it result in right mapping? Take some example and check this formula."
  ],
  "meta_data": {
    "name": "matrixReshape",
    "params": [
      {
        "name": "mat",
        "type": "integer[][]"
      },
      {
        "name": "r",
        "type": "integer"
      },
      {
        "name": "c",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[][]"
    }
  }
}