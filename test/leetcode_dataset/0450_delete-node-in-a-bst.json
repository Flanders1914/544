{
  "id": "450",
  "frontend_id": "450",
  "title": "Delete Node in a BST",
  "description": "Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.\nBasically, the deletion can be divided into two stages:\n\nSearch for a node to remove.\nIf the node is found, delete the node.\n\n \nExample 1:\n\n\nInput: root = [5,3,6,2,4,null,7], key = 3\nOutput: [5,4,6,2,null,null,7]\nExplanation: Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.\n\n\nExample 2:\n\nInput: root = [5,3,6,2,4,null,7], key = 0\nOutput: [5,3,6,2,4,null,7]\nExplanation: The tree does not contain a node with value = 0.\n\nExample 3:\n\nInput: root = [], key = 0\nOutput: []\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [0, 104].\n-105 <= Node.val <= 105\nEach node has a unique value.\nroot is a valid binary search tree.\n-105 <= key <= 105\n\n \nFollow up: Could you solve it with time complexity O(height of tree)?\n",
  "difficulty": "Medium",
  "examples": [
    "[5,3,6,2,4,null,7]",
    "3",
    "[5,3,6,2,4,null,7]",
    "0",
    "[]",
    "0"
  ],
  "structured_test_cases": [
    {
      "input": {
        "root": "[5,3,6,2,4,null,7]",
        "key": "3"
      },
      "expected": "[5,4,6,2,null,null,7]"
    },
    {
      "input": {
        "root": "[5,3,6,2,4,null,7]",
        "key": "0"
      },
      "expected": "[5,3,6,2,4,null,7]"
    },
    {
      "input": {
        "root": "[]",
        "key": "0"
      },
      "expected": "[]"
    }
  ],
  "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "deleteNode",
    "params": [
      {
        "name": "root",
        "type": "TreeNode",
        "dealloc": false
      },
      {
        "name": "key",
        "type": "integer"
      }
    ],
    "return": {
      "type": "TreeNode"
    }
  }
}