{
  "id": "3",
  "frontend_id": "3",
  "title": "Longest Substring Without Repeating Characters",
  "description": "Given a string s, find the length of the longest substring without duplicate characters.\n \nExample 1:\n\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n\nExample 2:\n\nInput: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\n\nExample 3:\n\nInput: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n\n \nConstraints:\n\n0 <= s.length <= 5 * 104\ns consists of English letters, digits, symbols and spaces.\n\n",
  "difficulty": "Medium",
  "examples": [
    "\"abcabcbb\"",
    "\"bbbbb\"",
    "\"pwwkew\""
  ],
  "structured_test_cases": [
    {
      "input": {
        "s": "\"abcabcbb\""
      },
      "expected": "3"
    },
    {
      "input": {
        "s": "\"bbbbb\""
      },
      "expected": "1"
    },
    {
      "input": {
        "s": "\"pwwkew\""
      },
      "expected": "3"
    }
  ],
  "python_starter": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        ",
  "hints": [
    "Generate all possible substrings & check for each substring if it's valid and keep updating maxLen accordingly."
  ],
  "meta_data": {
    "name": "lengthOfLongestSubstring",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}