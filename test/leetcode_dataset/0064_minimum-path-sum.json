{
  "id": "64",
  "frontend_id": "64",
  "title": "Minimum Path Sum",
  "description": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\nNote: You can only move either down or right at any point in time.\n \nExample 1:\n\n\nInput: grid = [[1,3,1],[1,5,1],[4,2,1]]\nOutput: 7\nExplanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.\n\nExample 2:\n\nInput: grid = [[1,2,3],[4,5,6]]\nOutput: 12\n\n \nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 200\n0 <= grid[i][j] <= 200\n\n",
  "difficulty": "Medium",
  "examples": [
    "[[1,3,1],[1,5,1],[4,2,1]]",
    "[[1,2,3],[4,5,6]]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "grid": "[[1,3,1]"
      },
      "expected": "7"
    },
    {
      "input": {
        "grid": "[[1,2,3]"
      },
      "expected": "12"
    }
  ],
  "python_starter": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "minPathSum",
    "params": [
      {
        "name": "grid",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}