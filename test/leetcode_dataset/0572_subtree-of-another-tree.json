{
  "id": "572",
  "frontend_id": "572",
  "title": "Subtree of Another Tree",
  "description": "Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.\nA subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.\n \nExample 1:\n\n\nInput: root = [3,4,5,1,2], subRoot = [4,1,2]\nOutput: true\n\nExample 2:\n\n\nInput: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]\nOutput: false\n\n \nConstraints:\n\nThe number of nodes in the root tree is in the range [1, 2000].\nThe number of nodes in the subRoot tree is in the range [1, 1000].\n-104 <= root.val <= 104\n-104 <= subRoot.val <= 104\n\n",
  "difficulty": "Easy",
  "examples": [
    "[3,4,5,1,2]",
    "[4,1,2]",
    "[3,4,5,1,2,null,null,null,null,0]",
    "[4,1,2]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "root": "[3,4,5,1,2]",
        "subRoot": "[4,1,2]"
      },
      "expected": "true"
    }
  ],
  "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:\n        ",
  "hints": [
    "Which approach is better here- recursive or iterative?",
    "If recursive approach is better, can you write recursive function with its parameters?",
    "Two trees <b>s</b> and <b>t</b> are said to be identical if their root values are same and their left and right subtrees are identical. Can you write this in form of recursive formulae?",
    "Recursive formulae can be: \r\nisIdentical(s,t)= s.val==t.val AND isIdentical(s.left,t.left) AND isIdentical(s.right,t.right)"
  ],
  "meta_data": {
    "name": "isSubtree",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      },
      {
        "name": "subRoot",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "boolean"
    }
  }
}