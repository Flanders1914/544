{
  "id": "530",
  "frontend_id": "530",
  "title": "Minimum Absolute Difference in BST",
  "description": "Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.\n \nExample 1:\n\n\nInput: root = [4,2,6,1,3]\nOutput: 1\n\nExample 2:\n\n\nInput: root = [1,0,48,null,null,12,49]\nOutput: 1\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [2, 104].\n0 <= Node.val <= 105\n\n \nNote: This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/\n",
  "difficulty": "Easy",
  "examples": [
    "[4,2,6,1,3]",
    "[1,0,48,null,null,12,49]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "root": "[4,2,6,1,3]"
      },
      "expected": "1"
    }
  ],
  "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getMinimumDifference(self, root: Optional[TreeNode]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "getMinimumDifference",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}