{
  "id": "384",
  "frontend_id": "384",
  "title": "Shuffle an Array",
  "description": "Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling.\nImplement the Solution class:\n\nSolution(int[] nums) Initializes the object with the integer array nums.\nint[] reset() Resets the array to its original configuration and returns it.\nint[] shuffle() Returns a random shuffling of the array.\n\n \nExample 1:\n\nInput\n[\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n[[[1, 2, 3]], [], [], []]\nOutput\n[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n\nExplanation\nSolution solution = new Solution([1, 2, 3]);\nsolution.shuffle();    // Shuffle the array [1,2,3] and return its result.\n                       // Any permutation of [1,2,3] must be equally likely to be returned.\n                       // Example: return [3, 1, 2]\nsolution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]\nsolution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]\n\n\n \nConstraints:\n\n1 <= nums.length <= 50\n-106 <= nums[i] <= 106\nAll the elements of nums are unique.\nAt most 104 calls in total will be made to reset and shuffle.\n\n",
  "difficulty": "Medium",
  "examples": [
    "[\"Solution\",\"shuffle\",\"reset\",\"shuffle\"]",
    "[[[1,2,3]],[],[],[]]"
  ],
  "structured_test_cases": [],
  "python_starter": "class Solution:\n\n    def __init__(self, nums: List[int]):\n        \n\n    def reset(self) -> List[int]:\n        \n\n    def shuffle(self) -> List[int]:\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(nums)\n# param_1 = obj.reset()\n# param_2 = obj.shuffle()",
  "hints": [
    "The solution expects that we always use the original array to shuffle() else some of the test cases fail. (Credits; @snehasingh31)"
  ],
  "meta_data": {
    "classname": "Solution",
    "constructor": {
      "params": [
        {
          "type": "integer[]",
          "name": "nums"
        }
      ]
    },
    "methods": [
      {
        "params": [],
        "name": "reset",
        "return": {
          "type": "integer[]"
        }
      },
      {
        "params": [],
        "return": {
          "type": "integer[]"
        },
        "name": "shuffle"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "systemdesign": true
  }
}