{
  "id": "307",
  "frontend_id": "307",
  "title": "Range Sum Query - Mutable",
  "description": "Given an integer array nums, handle multiple queries of the following types:\n\nUpdate the value of an element in nums.\nCalculate the sum of the elements of nums between indices left and right inclusive where left <= right.\n\nImplement the NumArray class:\n\nNumArray(int[] nums) Initializes the object with the integer array nums.\nvoid update(int index, int val) Updates the value of nums[index] to be val.\nint sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).\n\n \nExample 1:\n\nInput\n[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\nOutput\n[null, 9, null, 8]\n\nExplanation\nNumArray numArray = new NumArray([1, 3, 5]);\nnumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\nnumArray.update(1, 2);   // nums = [1, 2, 5]\nnumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\n\n \nConstraints:\n\n1 <= nums.length <= 3 * 104\n-100 <= nums[i] <= 100\n0 <= index < nums.length\n-100 <= val <= 100\n0 <= left <= right < nums.length\nAt most 3 * 104 calls will be made to update and sumRange.\n\n",
  "difficulty": "Medium",
  "examples": [
    "[\"NumArray\",\"sumRange\",\"update\",\"sumRange\"]",
    "[[[1,3,5]],[0,2],[1,2],[0,2]]"
  ],
  "structured_test_cases": [],
  "python_starter": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n        \n\n    def update(self, index: int, val: int) -> None:\n        \n\n    def sumRange(self, left: int, right: int) -> int:\n        \n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# obj.update(index,val)\n# param_2 = obj.sumRange(left,right)",
  "hints": [],
  "meta_data": {
    "classname": "NumArray",
    "maxbytesperline": 170000,
    "constructor": {
      "params": [
        {
          "type": "integer[]",
          "name": "nums"
        }
      ]
    },
    "methods": [
      {
        "name": "update",
        "params": [
          {
            "type": "integer",
            "name": "index"
          },
          {
            "type": "integer",
            "name": "val"
          }
        ],
        "return": {
          "type": "void"
        }
      },
      {
        "name": "sumRange",
        "params": [
          {
            "type": "integer",
            "name": "left"
          },
          {
            "type": "integer",
            "name": "right"
          }
        ],
        "return": {
          "type": "integer"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    }
  }
}