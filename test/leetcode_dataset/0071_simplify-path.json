{
  "id": "71",
  "frontend_id": "71",
  "title": "Simplify Path",
  "description": "You are given an absolute path for a Unix-style file system, which always begins with a slash '/'. Your task is to transform this absolute path into its simplified canonical path.\nThe rules of a Unix-style file system are as follows:\n\nA single period '.' represents the current directory.\nA double period '..' represents the previous/parent directory.\nMultiple consecutive slashes such as '//' and '///' are treated as a single slash '/'.\nAny sequence of periods that does not match the rules above should be treated as a valid directory or file name. For example, '...' and '....' are valid directory or file names.\n\nThe simplified canonical path should follow these rules:\n\nThe path must start with a single slash '/'.\nDirectories within the path must be separated by exactly one slash '/'.\nThe path must not end with a slash '/', unless it is the root directory.\nThe path must not have any single or double periods ('.' and '..') used to denote current or parent directories.\n\nReturn the simplified canonical path.\n \nExample 1:\n\nInput: path = \"/home/\"\nOutput: \"/home\"\nExplanation:\nThe trailing slash should be removed.\n\nExample 2:\n\nInput: path = \"/home//foo/\"\nOutput: \"/home/foo\"\nExplanation:\nMultiple consecutive slashes are replaced by a single one.\n\nExample 3:\n\nInput: path = \"/home/user/Documents/../Pictures\"\nOutput: \"/home/user/Pictures\"\nExplanation:\nA double period \"..\" refers to the directory up a level (the parent directory).\n\nExample 4:\n\nInput: path = \"/../\"\nOutput: \"/\"\nExplanation:\nGoing one level up from the root directory is not possible.\n\nExample 5:\n\nInput: path = \"/.../a/../b/c/../d/./\"\nOutput: \"/.../b/d\"\nExplanation:\n\"...\" is a valid name for a directory in this problem.\n\n \nConstraints:\n\n1 <= path.length <= 3000\npath consists of English letters, digits, period '.', slash '/' or '_'.\npath is a valid absolute Unix path.\n\n",
  "difficulty": "Medium",
  "examples": [
    "\"/home/\"",
    "\"/home//foo/\"",
    "\"/home/user/Documents/../Pictures\"",
    "\"/../\"",
    "\"/.../a/../b/c/../d/./\""
  ],
  "structured_test_cases": [
    {
      "input": {
        "path": "\"/home/\""
      },
      "expected": "/home"
    },
    {
      "input": {
        "path": "\"/home//foo/\""
      },
      "expected": "/home/foo"
    },
    {
      "input": {
        "path": "\"/home/user/Documents/../Pictures\""
      },
      "expected": "/home/user/Pictures"
    },
    {
      "input": {
        "path": "\"/../\""
      },
      "expected": "/"
    },
    {
      "input": {
        "path": "\"/.../a/../b/c/../d/./\""
      },
      "expected": "/.../b/d"
    }
  ],
  "python_starter": "class Solution:\n    def simplifyPath(self, path: str) -> str:\n        ",
  "hints": [],
  "meta_data": {
    "name": "simplifyPath",
    "params": [
      {
        "name": "path",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    }
  }
}