{
  "id": "72",
  "frontend_id": "72",
  "title": "Edit Distance",
  "description": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\nYou have the following three operations permitted on a word:\n\nInsert a character\nDelete a character\nReplace a character\n\n \nExample 1:\n\nInput: word1 = \"horse\", word2 = \"ros\"\nOutput: 3\nExplanation: \nhorse -> rorse (replace 'h' with 'r')\nrorse -> rose (remove 'r')\nrose -> ros (remove 'e')\n\nExample 2:\n\nInput: word1 = \"intention\", word2 = \"execution\"\nOutput: 5\nExplanation: \nintention -> inention (remove 't')\ninention -> enention (replace 'i' with 'e')\nenention -> exention (replace 'n' with 'x')\nexention -> exection (replace 'n' with 'c')\nexection -> execution (insert 'u')\n\n \nConstraints:\n\n0 <= word1.length, word2.length <= 500\nword1 and word2 consist of lowercase English letters.\n\n",
  "difficulty": "Medium",
  "examples": [
    "\"horse\"",
    "\"ros\"",
    "\"intention\"",
    "\"execution\""
  ],
  "structured_test_cases": [
    {
      "input": {
        "word1": "\"horse\"",
        "word2": "\"ros\""
      },
      "expected": "3"
    },
    {
      "input": {
        "word1": "\"intention\"",
        "word2": "\"execution\""
      },
      "expected": "5"
    }
  ],
  "python_starter": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "minDistance",
    "params": [
      {
        "name": "word1",
        "type": "string"
      },
      {
        "name": "word2",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}