{
  "id": "585",
  "frontend_id": "585",
  "title": "Investments in 2016",
  "description": "Table: Insurance\n\n+-------------+-------+\n| Column Name | Type  |\n+-------------+-------+\n| pid         | int   |\n| tiv_2015    | float |\n| tiv_2016    | float |\n| lat         | float |\n| lon         | float |\n+-------------+-------+\npid is the primary key (column with unique values) for this table.\nEach row of this table contains information about one policy where:\npid is the policyholder's policy ID.\ntiv_2015 is the total investment value in 2015 and tiv_2016 is the total investment value in 2016.\nlat is the latitude of the policy holder's city. It's guaranteed that lat is not NULL.\nlon is the longitude of the policy holder's city. It's guaranteed that lon is not NULL.\n\n \nWrite a solution to report the sum of all total investment values in 2016 tiv_2016, for all policyholders who:\n\nhave the same tiv_2015 value as one or more other policyholders, and\nare not located in the same city as any other policyholder (i.e., the (lat, lon) attribute pairs must be unique).\n\nRound tiv_2016 to two decimal places.\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nInsurance table:\n+-----+----------+----------+-----+-----+\n| pid | tiv_2015 | tiv_2016 | lat | lon |\n+-----+----------+----------+-----+-----+\n| 1   | 10       | 5        | 10  | 10  |\n| 2   | 20       | 20       | 20  | 20  |\n| 3   | 10       | 30       | 20  | 20  |\n| 4   | 10       | 40       | 40  | 40  |\n+-----+----------+----------+-----+-----+\nOutput: \n+----------+\n| tiv_2016 |\n+----------+\n| 45.00    |\n+----------+\nExplanation: \nThe first record in the table, like the last record, meets both of the two criteria.\nThe tiv_2015 value 10 is the same as the third and fourth records, and its location is unique.\n\nThe second record does not meet any of the two criteria. Its tiv_2015 is not like any other policyholders and its location is the same as the third record, which makes the third record fail, too.\nSo, the result is the sum of tiv_2016 of the first and last record, which is 45.\n\n",
  "difficulty": "Medium",
  "examples": [
    "{\"headers\":{\"Insurance\":[\"pid\",\"tiv_2015\",\"tiv_2016\",\"lat\",\"lon\"]},\"rows\":{\"Insurance\":[[1,10,5,10,10],[2,20,20,20,20],[3,10,30,20,20],[4,10,40,40,40]]}}"
  ],
  "structured_test_cases": [
    {
      "input": {
        "param0": "Insurance table: +-----+----------+----------+-----+-----+ | pid | tiv_2015 | tiv_2016 | lat | lon | +-----+----------+----------+-----+-----+ | 1   | 10       | 5        | 10  | 10  | | 2   | 20       | 20       | 20  | 20  | | 3   | 10       | 30       | 20  | 20  | | 4   | 10       | 40       | 40  | 40  | +-----+----------+----------+-----+-----+"
      },
      "expected": "+----------+"
    }
  ],
  "python_starter": null,
  "hints": [
    "Make the (LAT, LON) a pair to represent the location information"
  ],
  "meta_data": {
    "mysql": [
      "Create Table If Not Exists Insurance (pid int, tiv_2015 float, tiv_2016 float, lat float, lon float)"
    ],
    "mssql": [
      "Create Table Insurance (pid int, tiv_2015 float, tiv_2016 float, lat float, lon float)"
    ],
    "oraclesql": [
      "Create Table Insurance (pid int, tiv_2015 float, tiv_2016 float, lat float, lon float)"
    ],
    "database": true,
    "name": "find_investments",
    "pythondata": [
      "Insurance = pd.DataFrame([], columns=['pid', 'tiv_2015', 'tiv_2016', 'lat', 'lon']).astype({'pid':'Int64', 'tiv_2015':'Float64', 'tiv_2016':'Float64', 'lat':'Float64', 'lon':'Float64'})"
    ],
    "postgresql": [
      "\nCreate Table If Not Exists Insurance (pid int, tiv_2015 float, tiv_2016 float, lat float, lon float)"
    ],
    "database_schema": {
      "Insurance": {
        "pid": "INT",
        "tiv_2015": "FLOAT",
        "tiv_2016": "FLOAT",
        "lat": "FLOAT",
        "lon": "FLOAT"
      }
    }
  }
}