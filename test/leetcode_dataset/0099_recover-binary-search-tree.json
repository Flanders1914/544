{
  "id": "99",
  "frontend_id": "99",
  "title": "Recover Binary Search Tree",
  "description": "You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\n \nExample 1:\n\n\nInput: root = [1,3,null,null,2]\nOutput: [3,1,null,null,2]\nExplanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\n\nExample 2:\n\n\nInput: root = [3,1,4,null,null,2]\nOutput: [2,1,4,null,null,3]\nExplanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [2, 1000].\n-231 <= Node.val <= 231 - 1\n\n \nFollow up: A solution using O(n) space is pretty straight-forward. Could you devise a constant O(1) space solution?",
  "difficulty": "Medium",
  "examples": [
    "[1,3,null,null,2]",
    "[3,1,4,null,null,2]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "root": "[1,3,null,null,2]"
      },
      "expected": "[3,1,null,null,2]"
    },
    {
      "input": {
        "root": "[3,1,4,null,null,2]"
      },
      "expected": "[2,1,4,null,null,3]"
    }
  ],
  "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def recoverTree(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        ",
  "hints": [],
  "meta_data": {
    "name": "recoverTree",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    }
  }
}