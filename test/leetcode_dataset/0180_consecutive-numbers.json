{
  "id": "180",
  "frontend_id": "180",
  "title": "Consecutive Numbers",
  "description": "Table: Logs\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| num         | varchar |\n+-------------+---------+\nIn SQL, id is the primary key for this table.\nid is an autoincrement column starting from 1.\n\n \nFind all numbers that appear at least three times consecutively.\nReturn the result table in any order.\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nLogs table:\n+----+-----+\n| id | num |\n+----+-----+\n| 1  | 1   |\n| 2  | 1   |\n| 3  | 1   |\n| 4  | 2   |\n| 5  | 1   |\n| 6  | 2   |\n| 7  | 2   |\n+----+-----+\nOutput: \n+-----------------+\n| ConsecutiveNums |\n+-----------------+\n| 1               |\n+-----------------+\nExplanation: 1 is the only number that appears consecutively for at least three times.\n\n",
  "difficulty": "Medium",
  "examples": [
    "{\"headers\":{\"Logs\":[\"id\",\"num\"]},\"rows\":{\"Logs\":[[1,1],[2,1],[3,1],[4,2],[5,1],[6,2],[7,2]]}}"
  ],
  "structured_test_cases": [
    {
      "input": {
        "param0": "Logs table: +----+-----+ | id | num | +----+-----+ | 1  | 1   | | 2  | 1   | | 3  | 1   | | 4  | 2   | | 5  | 1   | | 6  | 2   | | 7  | 2   | +----+-----+"
      },
      "expected": "+-----------------+"
    }
  ],
  "python_starter": null,
  "hints": [],
  "meta_data": {
    "mysql": [
      "Create table If Not Exists Logs (id int, num int)"
    ],
    "mssql": [
      "Create table Logs (id int, num int)"
    ],
    "oraclesql": [
      "Create table Logs (id int, num int)"
    ],
    "database": true,
    "name": "consecutive_numbers",
    "pythondata": [
      "Logs = pd.DataFrame([], columns=['id', 'num']).astype({'id':'Int64', 'num':'Int64'})"
    ],
    "postgresql": [
      "Create table If Not Exists Logs (id int, num int)"
    ],
    "database_schema": {
      "Logs": {
        "id": "INT",
        "num": "INT"
      }
    }
  }
}