{
  "id": "176",
  "frontend_id": "176",
  "title": "Second Highest Salary",
  "description": "Table: Employee\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| salary      | int  |\n+-------------+------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains information about the salary of an employee.\n\n \nWrite a solution to find the second highest distinct salary from the Employee table. If there is no second highest salary, return null (return None in Pandas).\nThe result format is in the following example.\n \nExample 1:\n\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\nOutput: \n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200                 |\n+---------------------+\n\nExample 2:\n\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n+----+--------+\nOutput: \n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| null                |\n+---------------------+\n\n",
  "difficulty": "Medium",
  "examples": [
    "{\"headers\":{\"Employee\":[\"id\",\"salary\"]},\"rows\":{\"Employee\":[[1,100],[2,200],[3,300]]}}",
    "{\"headers\":{\"Employee\":[\"id\",\"salary\"]},\"rows\":{\"Employee\":[[1,100]]}}"
  ],
  "structured_test_cases": [
    {
      "input": {
        "param0": "Employee table: +----+--------+ | id | salary | +----+--------+ | 1  | 100    | | 2  | 200    | | 3  | 300    | +----+--------+"
      },
      "expected": "+---------------------+"
    }
  ],
  "python_starter": null,
  "hints": [],
  "meta_data": {
    "mysql": [
      "Create table If Not Exists Employee (id int, salary int)"
    ],
    "mssql": [
      "Create table Employee (id int, salary int)"
    ],
    "oraclesql": [
      "Create table Employee (id int, salary int)"
    ],
    "database": true,
    "name": "second_highest_salary",
    "pythondata": [
      "Employee = pd.DataFrame([], columns=['id', 'salary']).astype({'id':'int64', 'salary':'int64'})"
    ],
    "manual": false,
    "postgresql": [
      "Create table If Not Exists Employee (id int, salary int)"
    ],
    "database_schema": {
      "Employee": {
        "id": "INT",
        "salary": "INT"
      }
    }
  }
}