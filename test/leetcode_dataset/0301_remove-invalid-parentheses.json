{
  "id": "301",
  "frontend_id": "301",
  "title": "Remove Invalid Parentheses",
  "description": "Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\nReturn a list of unique strings that are valid with the minimum number of removals. You may return the answer in any order.\n \nExample 1:\n\nInput: s = \"()())()\"\nOutput: [\"(())()\",\"()()()\"]\n\nExample 2:\n\nInput: s = \"(a)())()\"\nOutput: [\"(a())()\",\"(a)()()\"]\n\nExample 3:\n\nInput: s = \")(\"\nOutput: [\"\"]\n\n \nConstraints:\n\n1 <= s.length <= 25\ns consists of lowercase English letters and parentheses '(' and ')'.\nThere will be at most 20 parentheses in s.\n\n",
  "difficulty": "Hard",
  "examples": [
    "\"()())()\"",
    "\"(a)())()\"",
    "\")(\""
  ],
  "structured_test_cases": [
    {
      "input": {
        "s": "\"()())()\""
      },
      "expected": "[(())(),()()()]"
    }
  ],
  "python_starter": "class Solution:\n    def removeInvalidParentheses(self, s: str) -> List[str]:\n        ",
  "hints": [
    "Since we do not know which brackets can be removed, we try all the options! We can use recursion.",
    "In the recursion, for each bracket, we can either use it or remove it.",
    "Recursion will generate all the valid parentheses strings but we want the ones with the least number of parentheses deleted.",
    "We can count the number of invalid brackets to be deleted and only generate the valid strings in the recusrion."
  ],
  "meta_data": {
    "name": "removeInvalidParentheses",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "list<string>"
    }
  }
}