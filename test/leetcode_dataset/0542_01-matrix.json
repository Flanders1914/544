{
  "id": "542",
  "frontend_id": "542",
  "title": "01 Matrix",
  "description": "Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\nThe distance between two cells sharing a common edge is 1.\n \nExample 1:\n\n\nInput: mat = [[0,0,0],[0,1,0],[0,0,0]]\nOutput: [[0,0,0],[0,1,0],[0,0,0]]\n\nExample 2:\n\n\nInput: mat = [[0,0,0],[0,1,0],[1,1,1]]\nOutput: [[0,0,0],[0,1,0],[1,2,1]]\n\n \nConstraints:\n\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 104\n1 <= m * n <= 104\nmat[i][j] is either 0 or 1.\nThere is at least one 0 in mat.\n\n \nNote: This question is the same as 1765: https://leetcode.com/problems/map-of-highest-peak/\n",
  "difficulty": "Medium",
  "examples": [
    "[[0,0,0],[0,1,0],[0,0,0]]",
    "[[0,0,0],[0,1,0],[1,1,1]]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "mat": "[[0,0,0]"
      },
      "expected": "[[0,0,0]"
    }
  ],
  "python_starter": "class Solution:\n    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "updateMatrix",
    "params": [
      {
        "name": "mat",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer[][]"
    }
  }
}