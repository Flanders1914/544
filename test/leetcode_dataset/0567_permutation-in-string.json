{
  "id": "567",
  "frontend_id": "567",
  "title": "Permutation in String",
  "description": "Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.\nIn other words, return true if one of s1's permutations is the substring of s2.\n \nExample 1:\n\nInput: s1 = \"ab\", s2 = \"eidbaooo\"\nOutput: true\nExplanation: s2 contains one permutation of s1 (\"ba\").\n\nExample 2:\n\nInput: s1 = \"ab\", s2 = \"eidboaoo\"\nOutput: false\n\n \nConstraints:\n\n1 <= s1.length, s2.length <= 104\ns1 and s2 consist of lowercase English letters.\n\n",
  "difficulty": "Medium",
  "examples": [
    "\"ab\"",
    "\"eidbaooo\"",
    "\"ab\"",
    "\"eidboaoo\""
  ],
  "structured_test_cases": [
    {
      "input": {
        "s1": "\"ab\"",
        "s2": "\"eidbaooo\""
      },
      "expected": "true"
    },
    {
      "input": {
        "s1": "\"ab\"",
        "s2": "\"eidboaoo\""
      },
      "expected": "false"
    }
  ],
  "python_starter": "class Solution:\n    def checkInclusion(self, s1: str, s2: str) -> bool:\n        ",
  "hints": [
    "Obviously, brute force will result in TLE. Think of something else.",
    "How will you check whether one string is a permutation of another string?",
    "One way is to sort the string and then compare. But, Is there a better way?",
    "If one string is a permutation of another string then they must have one common metric. What is that?",
    "Both strings must have same character frequencies, if  one is permutation of another. Which data structure should be used to store frequencies?",
    "What about hash table?  An array of size 26?"
  ],
  "meta_data": {
    "name": "checkInclusion",
    "params": [
      {
        "name": "s1",
        "type": "string"
      },
      {
        "name": "s2",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    }
  }
}