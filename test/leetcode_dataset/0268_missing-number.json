{
  "id": "268",
  "frontend_id": "268",
  "title": "Missing Number",
  "description": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\n \nExample 1:\n\nInput: nums = [3,0,1]\nOutput: 2\nExplanation:\nn = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n\nExample 2:\n\nInput: nums = [0,1]\nOutput: 2\nExplanation:\nn = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n\nExample 3:\n\nInput: nums = [9,6,4,2,3,5,7,0,1]\nOutput: 8\nExplanation:\nn = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n\n\n\n \n\n\n \n\n \n \n\n\n\n\n\n \nConstraints:\n\nn == nums.length\n1 <= n <= 104\n0 <= nums[i] <= n\nAll the numbers of nums are unique.\n\n \nFollow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?\n",
  "difficulty": "Easy",
  "examples": [
    "[3,0,1]",
    "[0,1]",
    "[9,6,4,2,3,5,7,0,1]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[3,0,1]"
      },
      "expected": "2"
    },
    {
      "input": {
        "nums": "[0,1]"
      },
      "expected": "2"
    },
    {
      "input": {
        "nums": "[9,6,4,2,3,5,7,0,1]"
      },
      "expected": "8"
    }
  ],
  "python_starter": "class Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "missingNumber",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}