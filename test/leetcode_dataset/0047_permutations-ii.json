{
  "id": "47",
  "frontend_id": "47",
  "title": "Permutations II",
  "description": "Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\n \nExample 1:\n\nInput: nums = [1,1,2]\nOutput:\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n\nExample 2:\n\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n\n \nConstraints:\n\n1 <= nums.length <= 8\n-10 <= nums[i] <= 10\n\n",
  "difficulty": "Medium",
  "examples": [
    "[1,1,2]",
    "[1,2,3]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[1,1,2]"
      },
      "expected": "[[1,1,2]"
    }
  ],
  "python_starter": "class Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "permuteUnique",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "colsize": "size_1",
      "dealloc": true
    }
  }
}