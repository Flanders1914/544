{
  "id": "337",
  "frontend_id": "337",
  "title": "House Robber III",
  "description": "The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.\nBesides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.\nGiven the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.\n \nExample 1:\n\n\nInput: root = [3,2,3,null,3,null,1]\nOutput: 7\nExplanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.\n\nExample 2:\n\n\nInput: root = [3,4,5,1,3,null,1]\nOutput: 9\nExplanation: Maximum amount of money the thief can rob = 4 + 5 = 9.\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [1, 104].\n0 <= Node.val <= 104\n\n",
  "difficulty": "Medium",
  "examples": [
    "[3,2,3,null,3,null,1]",
    "[3,4,5,1,3,null,1]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "root": "[3,2,3,null,3,null,1]"
      },
      "expected": "7"
    },
    {
      "input": {
        "root": "[3,4,5,1,3,null,1]"
      },
      "expected": "9"
    }
  ],
  "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rob(self, root: Optional[TreeNode]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "rob",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}