{
  "id": "606",
  "frontend_id": "606",
  "title": "Construct String from Binary Tree",
  "description": "Given the root node of a binary tree, your task is to create a string representation of the tree following a specific set of formatting rules. The representation should be based on a preorder traversal of the binary tree and must adhere to the following guidelines:\n\n\nNode Representation: Each node in the tree should be represented by its integer value.\n\n\nParentheses for Children: If a node has at least one child (either left or right), its children should be represented inside parentheses. Specifically:\n\nIf a node has a left child, the value of the left child should be enclosed in parentheses immediately following the node's value.\nIf a node has a right child, the value of the right child should also be enclosed in parentheses. The parentheses for the right child should follow those of the left child.\n\n\n\nOmitting Empty Parentheses: Any empty parentheses pairs (i.e., ()) should be omitted from the final string representation of the tree, with one specific exception: when a node has a right child but no left child. In such cases, you must include an empty pair of parentheses to indicate the absence of the left child. This ensures that the one-to-one mapping between the string representation and the original binary tree structure is maintained.\nIn summary, empty parentheses pairs should be omitted when a node has only a left child or no children. However, when a node has a right child but no left child, an empty pair of parentheses must precede the representation of the right child to reflect the tree's structure accurately.\n\n\n \nExample 1:\n\n\nInput: root = [1,2,3,4]\nOutput: \"1(2(4))(3)\"\nExplanation: Originally, it needs to be \"1(2(4)())(3()())\", but you need to omit all the empty parenthesis pairs. And it will be \"1(2(4))(3)\".\n\nExample 2:\n\n\nInput: root = [1,2,3,null,4]\nOutput: \"1(2()(4))(3)\"\nExplanation: Almost the same as the first example, except the () after 2 is necessary to indicate the absence of a left child for 2 and the presence of a right child.\n\n \nConstraints:\n\nThe number of nodes in the tree is in the range [1, 104].\n-1000 <= Node.val <= 1000\n\n",
  "difficulty": "Medium",
  "examples": [
    "[1,2,3,4]",
    "[1,2,3,null,4]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "root": "[1,2,3,4]"
      },
      "expected": "1(2(4))(3)"
    },
    {
      "input": {
        "root": "[1,2,3,null,4]"
      },
      "expected": "1(2()(4))(3)"
    }
  ],
  "python_starter": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def tree2str(self, root: Optional[TreeNode]) -> str:\n        ",
  "hints": [],
  "meta_data": {
    "name": "tree2str",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "string"
    }
  }
}