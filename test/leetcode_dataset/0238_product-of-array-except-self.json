{
  "id": "238",
  "frontend_id": "238",
  "title": "Product of Array Except Self",
  "description": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\nYou must write an algorithm that runs in O(n) time and without using the division operation.\n \nExample 1:\nInput: nums = [1,2,3,4]\nOutput: [24,12,8,6]\nExample 2:\nInput: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]\n\n \nConstraints:\n\n2 <= nums.length <= 105\n-30 <= nums[i] <= 30\nThe input is generated such that answer[i] is guaranteed to fit in a 32-bit integer.\n\n \nFollow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)\n",
  "difficulty": "Medium",
  "examples": [
    "[1,2,3,4]",
    "[-1,1,0,-3,3]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[1,2,3,4]"
      },
      "expected": "[24,12,8,6]"
    }
  ],
  "python_starter": "class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        ",
  "hints": [
    "Think how you can efficiently utilize prefix and suffix products to calculate the product of all elements except self for each index. Can you pre-compute the prefix and suffix products in linear time to avoid redundant calculations?",
    "Can you minimize additional space usage by reusing memory or modifying the input array to store intermediate results?"
  ],
  "meta_data": {
    "name": "productExceptSelf",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer[]"
    }
  }
}