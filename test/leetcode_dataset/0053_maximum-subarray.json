{
  "id": "53",
  "frontend_id": "53",
  "title": "Maximum Subarray",
  "description": "Given an integer array nums, find the subarray with the largest sum, and return its sum.\n \nExample 1:\n\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: The subarray [4,-1,2,1] has the largest sum 6.\n\nExample 2:\n\nInput: nums = [1]\nOutput: 1\nExplanation: The subarray [1] has the largest sum 1.\n\nExample 3:\n\nInput: nums = [5,4,-1,7,8]\nOutput: 23\nExplanation: The subarray [5,4,-1,7,8] has the largest sum 23.\n\n \nConstraints:\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n\n \nFollow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\n",
  "difficulty": "Medium",
  "examples": [
    "[-2,1,-3,4,-1,2,1,-5,4]",
    "[1]",
    "[5,4,-1,7,8]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[-2,1,-3,4,-1,2,1,-5,4]"
      },
      "expected": "6"
    },
    {
      "input": {
        "nums": "[1]"
      },
      "expected": "1"
    },
    {
      "input": {
        "nums": "[5,4,-1,7,8]"
      },
      "expected": "23"
    }
  ],
  "python_starter": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "maxSubArray",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}