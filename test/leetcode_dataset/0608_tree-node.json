{
  "id": "608",
  "frontend_id": "608",
  "title": "Tree Node",
  "description": "Table: Tree\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| p_id        | int  |\n+-------------+------+\nid is the column with unique values for this table.\nEach row of this table contains information about the id of a node and the id of its parent node in a tree.\nThe given structure is always a valid tree.\n\n \nEach node in the tree can be one of three types:\n\n\"Leaf\": if the node is a leaf node.\n\"Root\": if the node is the root of the tree.\n\"Inner\": If the node is neither a leaf node nor a root node.\n\nWrite a solution to report the type of each node in the tree.\nReturn the result table in any order.\nThe result format is in the following example.\n \nExample 1:\n\n\nInput: \nTree table:\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n| 2  | 1    |\n| 3  | 1    |\n| 4  | 2    |\n| 5  | 2    |\n+----+------+\nOutput: \n+----+-------+\n| id | type  |\n+----+-------+\n| 1  | Root  |\n| 2  | Inner |\n| 3  | Leaf  |\n| 4  | Leaf  |\n| 5  | Leaf  |\n+----+-------+\nExplanation: \nNode 1 is the root node because its parent node is null and it has child nodes 2 and 3.\nNode 2 is an inner node because it has parent node 1 and child node 4 and 5.\nNodes 3, 4, and 5 are leaf nodes because they have parent nodes and they do not have child nodes.\n\nExample 2:\n\n\nInput: \nTree table:\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n+----+------+\nOutput: \n+----+-------+\n| id | type  |\n+----+-------+\n| 1  | Root  |\n+----+-------+\nExplanation: If there is only one node on the tree, you only need to output its root attributes.\n\n \nNote: This question is the same as  3054: Binary Tree Nodes.\n",
  "difficulty": "Medium",
  "examples": [
    "{\"headers\":{\"Tree\":[\"id\",\"p_id\"]},\"rows\":{\"Tree\":[[1,null],[2,1],[3,1],[4,2],[5,2]]}}",
    "{\"headers\":{\"Tree\":[\"id\",\"p_id\"]},\"rows\":{\"Tree\":[[1,null]]}}"
  ],
  "structured_test_cases": [
    {
      "input": {
        "param0": "Tree table: +----+------+ | id | p_id | +----+------+ | 1  | null | | 2  | 1    | | 3  | 1    | | 4  | 2    | | 5  | 2    | +----+------+"
      },
      "expected": "+----+-------+"
    },
    {
      "input": {
        "param0": "Tree table: +----+------+ | id | p_id | +----+------+ | 1  | null | +----+------+"
      },
      "expected": "+----+-------+"
    }
  ],
  "python_starter": null,
  "hints": [
    "You can judge the node type by querying whether the node's id shows up in p_id column and whether the node's p_id is null."
  ],
  "meta_data": {
    "mysql": [
      "Create table If Not Exists Tree (id int, p_id int)"
    ],
    "mssql": [
      "Create table Tree (id int, p_id int)"
    ],
    "oraclesql": [
      "Create table Tree (id int, p_id int)"
    ],
    "database": true,
    "name": "tree_node",
    "pythondata": [
      "Tree = pd.DataFrame([], columns=['id', 'p_id']).astype({'id':'Int64', 'p_id':'Int64'})"
    ],
    "postgresql": [
      "\nCreate table If Not Exists Tree (id int, p_id int)"
    ],
    "database_schema": {
      "Tree": {
        "id": "INT",
        "p_id": "INT"
      }
    }
  }
}