{
  "id": "25",
  "frontend_id": "25",
  "title": "Reverse Nodes in k-Group",
  "description": "Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\n \nExample 1:\n\n\nInput: head = [1,2,3,4,5], k = 2\nOutput: [2,1,4,3,5]\n\nExample 2:\n\n\nInput: head = [1,2,3,4,5], k = 3\nOutput: [3,2,1,4,5]\n\n \nConstraints:\n\nThe number of nodes in the list is n.\n1 <= k <= n <= 5000\n0 <= Node.val <= 1000\n\n \nFollow-up: Can you solve the problem in O(1) extra memory space?\n",
  "difficulty": "Hard",
  "examples": [
    "[1,2,3,4,5]",
    "2",
    "[1,2,3,4,5]",
    "3"
  ],
  "structured_test_cases": [
    {
      "input": {
        "head": "[1,2,3,4,5]",
        "k": "2"
      },
      "expected": "[2,1,4,3,5]"
    }
  ],
  "python_starter": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "reverseKGroup",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode"
    }
  }
}