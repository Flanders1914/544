{
  "id": "203",
  "frontend_id": "203",
  "title": "Remove Linked List Elements",
  "description": "Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.\n \nExample 1:\n\n\nInput: head = [1,2,6,3,4,5,6], val = 6\nOutput: [1,2,3,4,5]\n\nExample 2:\n\nInput: head = [], val = 1\nOutput: []\n\nExample 3:\n\nInput: head = [7,7,7,7], val = 7\nOutput: []\n\n \nConstraints:\n\nThe number of nodes in the list is in the range [0, 104].\n1 <= Node.val <= 50\n0 <= val <= 50\n\n",
  "difficulty": "Easy",
  "examples": [
    "[1,2,6,3,4,5,6]",
    "6",
    "[]",
    "1",
    "[7,7,7,7]",
    "7"
  ],
  "structured_test_cases": [
    {
      "input": {
        "head": "[1,2,6,3,4,5,6]",
        "val": "6"
      },
      "expected": "[1,2,3,4,5]"
    }
  ],
  "python_starter": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:\n        ",
  "hints": [],
  "meta_data": {
    "name": "removeElements",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "val",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    }
  }
}