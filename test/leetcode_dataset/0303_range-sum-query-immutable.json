{
  "id": "303",
  "frontend_id": "303",
  "title": "Range Sum Query - Immutable",
  "description": "Given an integer array nums, handle multiple queries of the following type:\n\nCalculate the sum of the elements of nums between indices left and right inclusive where left <= right.\n\nImplement the NumArray class:\n\nNumArray(int[] nums) Initializes the object with the integer array nums.\nint sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).\n\n \nExample 1:\n\nInput\n[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\nOutput\n[null, 1, -1, -3]\n\nExplanation\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\n\n \nConstraints:\n\n1 <= nums.length <= 104\n-105 <= nums[i] <= 105\n0 <= left <= right < nums.length\nAt most 104 calls will be made to sumRange.\n\n",
  "difficulty": "Easy",
  "examples": [
    "[\"NumArray\",\"sumRange\",\"sumRange\",\"sumRange\"]",
    "[[[-2,0,3,-5,2,-1]],[0,2],[2,5],[0,5]]"
  ],
  "structured_test_cases": [],
  "python_starter": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n        \n\n    def sumRange(self, left: int, right: int) -> int:\n        \n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(left,right)",
  "hints": [],
  "meta_data": {
    "classname": "NumArray",
    "maxbytesperline": 135000,
    "constructor": {
      "params": [
        {
          "type": "integer[]",
          "name": "nums"
        },
        {
          "type": "integer",
          "name": "numsSize",
          "lang": "c",
          "value": "size_1"
        }
      ]
    },
    "methods": [
      {
        "name": "sumRange",
        "params": [
          {
            "type": "integer",
            "name": "left"
          },
          {
            "type": "integer",
            "name": "right"
          }
        ],
        "return": {
          "type": "integer"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    }
  }
}