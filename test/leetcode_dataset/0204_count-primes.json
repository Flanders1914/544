{
  "id": "204",
  "frontend_id": "204",
  "title": "Count Primes",
  "description": "Given an integer n, return the number of prime numbers that are strictly less than n.\n \nExample 1:\n\nInput: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n\nExample 2:\n\nInput: n = 0\nOutput: 0\n\nExample 3:\n\nInput: n = 1\nOutput: 0\n\n \nConstraints:\n\n0 <= n <= 5 * 106\n\n",
  "difficulty": "Medium",
  "examples": [
    "10",
    "0",
    "1"
  ],
  "structured_test_cases": [
    {
      "input": {
        "n": "10"
      },
      "expected": "4"
    },
    {
      "input": {
        "n": "0"
      },
      "expected": "0"
    }
  ],
  "python_starter": "class Solution:\n    def countPrimes(self, n: int) -> int:\n        ",
  "hints": [
    "Checking all the integers in the range [1, n - 1] is not efficient. Think about a better approach.",
    "Since most of the numbers are not primes, we need a fast approach to exclude the non-prime integers.",
    "Use Sieve of Eratosthenes."
  ],
  "meta_data": {
    "name": "countPrimes",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}