{
  "id": "209",
  "frontend_id": "209",
  "title": "Minimum Size Subarray Sum",
  "description": "Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.\n \nExample 1:\n\nInput: target = 7, nums = [2,3,1,2,4,3]\nOutput: 2\nExplanation: The subarray [4,3] has the minimal length under the problem constraint.\n\nExample 2:\n\nInput: target = 4, nums = [1,4,4]\nOutput: 1\n\nExample 3:\n\nInput: target = 11, nums = [1,1,1,1,1,1,1,1]\nOutput: 0\n\n \nConstraints:\n\n1 <= target <= 109\n1 <= nums.length <= 105\n1 <= nums[i] <= 104\n\n \nFollow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).",
  "difficulty": "Medium",
  "examples": [
    "7",
    "[2,3,1,2,4,3]",
    "4",
    "[1,4,4]",
    "11",
    "[1,1,1,1,1,1,1,1]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "target": "7",
        "nums": "[2,3,1,2,4,3]"
      },
      "expected": "2"
    },
    {
      "input": {
        "target": "4",
        "nums": "[1,4,4]"
      },
      "expected": "1"
    }
  ],
  "python_starter": "class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "minSubArrayLen",
    "params": [
      {
        "name": "target",
        "type": "integer"
      },
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}