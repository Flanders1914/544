{
  "id": "15",
  "frontend_id": "15",
  "title": "3Sum",
  "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\nNotice that the solution set must not contain duplicate triplets.\n \nExample 1:\n\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n\nExample 2:\n\nInput: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n\nExample 3:\n\nInput: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0.\n\n \nConstraints:\n\n3 <= nums.length <= 3000\n-105 <= nums[i] <= 105\n\n",
  "difficulty": "Medium",
  "examples": [
    "[-1,0,1,2,-1,-4]",
    "[0,1,1]",
    "[0,0,0]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[-1,0,1,2,-1,-4]"
      },
      "expected": "[[-1,-1,2]"
    },
    {
      "input": {
        "nums": "[0,1,1]"
      },
      "expected": "[]"
    },
    {
      "input": {
        "nums": "[0,0,0]"
      },
      "expected": "[[0,0,0]"
    }
  ],
  "python_starter": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        ",
  "hints": [
    "So, we essentially need to find three numbers x, y, and z such that they add up to the given value. If we fix one of the numbers say x, we are left with the two-sum problem at hand!",
    "For the two-sum problem, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y, which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
    "The second train of thought for two-sum is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
  ],
  "meta_data": {
    "name": "threeSum",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "colsize": 3,
      "dealloc": true
    }
  }
}