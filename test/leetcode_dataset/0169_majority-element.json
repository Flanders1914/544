{
  "id": "169",
  "frontend_id": "169",
  "title": "Majority Element",
  "description": "Given an array nums of size n, return the majority element.\nThe majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.\n \nExample 1:\nInput: nums = [3,2,3]\nOutput: 3\nExample 2:\nInput: nums = [2,2,1,1,1,2,2]\nOutput: 2\n\n \nConstraints:\n\nn == nums.length\n1 <= n <= 5 * 104\n-109 <= nums[i] <= 109\n\n \nFollow-up: Could you solve the problem in linear time and in O(1) space?",
  "difficulty": "Easy",
  "examples": [
    "[3,2,3]",
    "[2,2,1,1,1,2,2]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[3,2,3]"
      },
      "expected": "3"
    }
  ],
  "python_starter": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        ",
  "hints": [],
  "meta_data": {
    "name": "majorityElement",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    }
  }
}