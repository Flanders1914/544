{
  "id": "334",
  "frontend_id": "334",
  "title": "Increasing Triplet Subsequence",
  "description": "Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.\n \nExample 1:\n\nInput: nums = [1,2,3,4,5]\nOutput: true\nExplanation: Any triplet where i < j < k is valid.\n\nExample 2:\n\nInput: nums = [5,4,3,2,1]\nOutput: false\nExplanation: No triplet exists.\n\nExample 3:\n\nInput: nums = [2,1,5,0,4,6]\nOutput: true\nExplanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.\n\n \nConstraints:\n\n1 <= nums.length <= 5 * 105\n-231 <= nums[i] <= 231 - 1\n\n \nFollow up: Could you implement a solution that runs in O(n) time complexity and O(1) space complexity?",
  "difficulty": "Medium",
  "examples": [
    "[1,2,3,4,5]",
    "[5,4,3,2,1]",
    "[2,1,5,0,4,6]"
  ],
  "structured_test_cases": [
    {
      "input": {
        "nums": "[1,2,3,4,5]"
      },
      "expected": "true"
    },
    {
      "input": {
        "nums": "[5,4,3,2,1]"
      },
      "expected": "false"
    },
    {
      "input": {
        "nums": "[2,1,5,0,4,6]"
      },
      "expected": "true"
    }
  ],
  "python_starter": "class Solution:\n    def increasingTriplet(self, nums: List[int]) -> bool:\n        ",
  "hints": [],
  "meta_data": {
    "name": "increasingTriplet",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "boolean"
    }
  }
}